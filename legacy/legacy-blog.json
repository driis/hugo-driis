{"Results":[{"Title":"Thoughts on Google Chrome","UrlName":"Thoughts-on-Google-Chrome","BodyHtml":"\n\t\t<p>I admit it, I am a fan of the new Google Chrome browser. </p>\n    <p>This made me chuckle, however:<br /><img width=\"500\" height=\"375\" alt=\"Google vs Microsoft ... ?\" src=\"~/media/689A97045E06494BB021912C15AD8790.ashx?w=500&amp;h=375&amp;as=1\" /></p>\n    <p>Is Google preparing to dominate the world ?</p>","Updated":"2008-10-28T09:33:00.0000000Z","Published":"2008-10-28T09:33:00.0000000Z","IsPublished":true,"Comments":{"$type":"System.Collections.Generic.List`1[[dr.TinyBlog.Comment, dr.TinyBlog]], mscorlib","$values":[]},"Tags":{"$type":"System.Collections.Generic.List`1[[System.String, mscorlib]], mscorlib","$values":["General technology"]},"Body":"\n\t\t<p>I admit it, I am a fan of the new Google Chrome browser. </p>\n    <p>This made me chuckle, however:<br /><img width=\"500\" height=\"375\" alt=\"Google vs Microsoft ... ?\" src=\"~/media/689A97045E06494BB021912C15AD8790.ashx?w=500&amp;h=375&amp;as=1\" /></p>\n    <p>Is Google preparing to dominate the world ?</p>","Author":"Dennis Riis","Created":"2008-10-28T09:33:00.0000000Z","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":2,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":42,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/12","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.6308958Z","@etag":"00000001-0000-0800-0000-000000000002","Non-Authoritative-Information":false}},{"Title":"Visual update on the blog","UrlName":"Visual-update-on-the-blog","BodyHtml":"\n\t\t<p>Just a quick post to let you know that the blog has been updated with a much nicer theme. I hope I will get around to adding more interesting content to the blog shortly :-)</p>\n","Updated":"2008-09-28T12:44:15.0000000Z","Published":"2008-09-28T12:44:15.0000000Z","IsPublished":true,"Comments":{"$type":"System.Collections.Generic.List`1[[dr.TinyBlog.Comment, dr.TinyBlog]], mscorlib","$values":[]},"Tags":{"$type":"System.Collections.Generic.List`1[[System.String, mscorlib]], mscorlib","$values":["Personal"]},"Body":"\n\t\t<p>Just a quick post to let you know that the blog has been updated with a much nicer theme. I hope I will get around to adding more interesting content to the blog shortly :-)</p>\n","Author":"Dennis Riis","Created":"2008-09-28T12:44:15.0000000Z","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":3,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":43,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/19","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.6319051Z","@etag":"00000001-0000-0800-0000-000000000003","Non-Authoritative-Information":false}},{"Title":"Sitecore certification","UrlName":"Sitecore-certification","BodyHtml":"\t\t<p>\n\t\t\t\t<a title=\"Sitecore\" href=\"http://sitecore.net/\" target=\"_blank\">Sitecore</a> is a .NET CMS system developed in Denmark by Sitecore A/S. We are starting to use the product more and more at work. </p>\n<p>Today I attended the second Sitecore development course in Copenhagen, \"SCD2\". So now I am a certified Sitecore developer ;-) </p>\n<p>Sitecore is a rather good CMS system (in my humble opinion). Some of the forces is that is easy to extend, and extensions can be created in well known technologies such as .NET controls and XSLT transformation (amongst others), and one can choose whichever is best for the task at hand. My impression is that it has a good and well-structured API, and that it is very stable. I am looking forward to do some real development work using the techniques I learned today. </p>","Updated":"2007-09-26T21:49:44.0000000Z","Published":"2007-09-26T21:49:44.0000000Z","IsPublished":true,"Comments":{"$type":"System.Collections.Generic.List`1[[dr.TinyBlog.Comment, dr.TinyBlog]], mscorlib","$values":[{"Email":"dr@webdanmark.com","Approved":true,"Body":"Testing the comments feature ;-)","Author":"Dennis","Id":null,"Created":"2008-02-10T19:10:47.0000000Z"},{"Email":"dr@webdanmark.com","Approved":true,"Body":"Testing again - bear with me...","Author":"Dennis","Id":null,"Created":"2008-02-10T20:08:30.0000000Z"}]},"Tags":{"$type":"System.Collections.Generic.List`1[[System.String, mscorlib]], mscorlib","$values":["Personal"]},"Body":"\t\t<p>\n\t\t\t\t<a title=\"Sitecore\" href=\"http://sitecore.net/\" target=\"_blank\">Sitecore</a> is a .NET CMS system developed in Denmark by Sitecore A/S. We are starting to use the product more and more at work. </p>\n<p>Today I attended the second Sitecore development course in Copenhagen, \"SCD2\". So now I am a certified Sitecore developer ;-) </p>\n<p>Sitecore is a rather good CMS system (in my humble opinion). Some of the forces is that is easy to extend, and extensions can be created in well known technologies such as .NET controls and XSLT transformation (amongst others), and one can choose whichever is best for the task at hand. My impression is that it has a good and well-structured API, and that it is very stable. I am looking forward to do some real development work using the techniques I learned today. </p>","Author":"Dennis Riis","Created":"2007-09-26T21:49:44.0000000Z","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":4,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":44,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/30","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.6319051Z","@etag":"00000001-0000-0800-0000-000000000004","Non-Authoritative-Information":false}},{"Title":"Got a blog","UrlName":"Got-a-blog","BodyHtml":"\t\t<div class=\"entry\">\n<p>So, I decided today that I needed a blog. So here it is, me blogging about programming in general, .NET and my everyday experiences.&nbsp; </p>\n<p>Why does the world need another blog; you might ask ? Well, it is an experiment for now. I will try to provide some interesting content - and at the same time it will be a place for me to document various findings and thoughts. Anyways, it is much better than the old \"Web 0.1\" static content website that I used to have on this domain ;-) </p>\n<p>I encourage everyone to use the comments for questions and/or suggestions.&nbsp; </p>\n<p><strong>Don't know who I am ?&nbsp;</strong> </p>\n<p>Well, you don't really need to, in order to read my posts. My name is Dennis Riis and I am a danish software developer / architect, currently working with web technologies. If you want to read more about me, you can always head over to the <a href=\"/\">About me page</a>.</p></div>\n","Updated":"2007-07-09T21:21:17.0000000Z","Published":"2007-07-09T21:21:17.0000000Z","IsPublished":true,"Comments":{"$type":"System.Collections.Generic.List`1[[dr.TinyBlog.Comment, dr.TinyBlog]], mscorlib","$values":[]},"Tags":{"$type":"System.Collections.Generic.List`1[[System.String, mscorlib]], mscorlib","$values":["General technology"]},"Body":"\t\t<div class=\"entry\">\n<p>So, I decided today that I needed a blog. So here it is, me blogging about programming in general, .NET and my everyday experiences.&nbsp; </p>\n<p>Why does the world need another blog; you might ask ? Well, it is an experiment for now. I will try to provide some interesting content - and at the same time it will be a place for me to document various findings and thoughts. Anyways, it is much better than the old \"Web 0.1\" static content website that I used to have on this domain ;-) </p>\n<p>I encourage everyone to use the comments for questions and/or suggestions.&nbsp; </p>\n<p><strong>Don't know who I am ?&nbsp;</strong> </p>\n<p>Well, you don't really need to, in order to read my posts. My name is Dennis Riis and I am a danish software developer / architect, currently working with web technologies. If you want to read more about me, you can always head over to the <a href=\"/\">About me page</a>.</p></div>\n","Author":"Dennis Riis","Created":"2007-07-09T21:21:17.0000000Z","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":5,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":45,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/36","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.6319051Z","@etag":"00000001-0000-0800-0000-000000000005","Non-Authoritative-Information":false}},{"Title":"This blog now running MVC3 and RavenDB !","UrlName":"blog-now-running-mvc3-and-ravendb","BodyHtml":"<p>From today, this blog will be running a home-grown blogging system built on MVC3, Razor and RavenDB.</p>\n\n<p>It had been running Sitecore Express until now, but i decided to ditch it. A Sitecore installation is simply too much of a hassle for a simple site like this. Also, the rich text editor in Sitecore was not really fit for posting code snippets. I will be refining this new blogging solution over the next few weeks, and hopefully it will give me a renewed interest in actually posting content on this blog :-)</p>\n\n<p>I built this blogging system myself (no CMS or other framework base) to learn more about MVC3 and RavenDB. Conlusion: MVC3 is nice, Razor view syntax is <em>extremely cool</em>. </p>\n\n<p>RavenDB is also easy to get started with and to learn. It is what I would call a no-frills NoSQL document database. So if one has data storage needs that fit into the NoSQL camp, and is building on .NET, i think the choice is a no-brainer. You do have to be aware that it is still a young product, which is changing rapidly. </p>\n","Body":"From today, this blog will be running a home-grown blogging system built on MVC3, Razor and RavenDB.\r\n\r\nIt had been running Sitecore Express until now, but i decided to ditch it. A Sitecore installation is simply too much of a hassle for a simple site like this. Also, the rich text editor in Sitecore was not really fit for posting code snippets. I will be refining this new blogging solution over the next few weeks, and hopefully it will give me a renewed interest in actually posting content on this blog :-)\r\n\r\nI built this blogging system myself (no CMS or other framework base) to learn more about MVC3 and RavenDB. Conlusion: MVC3 is nice, Razor view syntax is _extremely cool_. \r\n\r\nRavenDB is also easy to get started with and to learn. It is what I would call a no-frills NoSQL document database. So if one has data storage needs that fit into the NoSQL camp, and is building on .NET, i think the choice is a no-brainer. You do have to be aware that it is still a young product, which is changing rapidly. ","Author":null,"Published":"2011-03-06T18:51:56.0000000Z","IsPublished":true,"Comments":[{"Email":"dr@driis.dk","Approved":true,"Body":"A comment goes here.","Author":"Dennis Riis","Created":"2011-03-06T19:02:18.8780000Z"},{"Email":"dr@webdanmark.com","Approved":true,"Body":"test test test","Author":"Dennis Riis","Created":"2011-03-06T19:04:17.4550000Z"},{"Email":"prideaux90@hotmail.com","Approved":true,"Body":"Hey dude show us the source code. i want to learn MVC too.","Author":"prideaux","Created":"2012-05-24T08:19:27.3792491"}],"Tags":["MVC3","Razor","ASP .NET",".NET"],"Created":"2011-03-06T19:01:13.3390000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":"false","Raven-Replication-History":[{"Raven-Replication-Version":7,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":47,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/1025","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.6329044Z","@etag":"00000001-0000-0800-0000-000000000007","Non-Authoritative-Information":false}},{"Title":"Got a Twitter account","UrlName":"Got-a-Twitter-account","BodyHtml":"Oh, BTW, I got a twitter account. Follow me on <a href=\"http://twitter.com/dennisriis\">http://twitter.com/dennisriis</a>, if interested.","Body":"Oh, BTW, I got a twitter account. Follow me on <a href=\"http://twitter.com/dennisriis\">http://twitter.com/dennisriis</a>, if interested.","Author":"Dennis Riis","Published":"2009-11-09T23:25:00.0000000Z","IsPublished":true,"Comments":[{"Email":"someone@mailinator.com","Approved":true,"Body":"great...","Author":"Xyz","Created":"2012-10-06T09:47:47.5864461"}],"Tags":[".NET"],"Created":"2009-11-09T23:25:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":"false","__document_id":"posts/7","Raven-Replication-History":[{"Raven-Replication-Version":9,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":49,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/7","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.6339049Z","@etag":"00000001-0000-0800-0000-000000000009","Non-Authoritative-Information":false}},{"Title":"Using Expression Trees To Break The Law Of Demeter","UrlName":"Using-Expression-Trees-To-Break-The-Law-Of-Demeter","BodyHtml":"I am sure most programmers have heard about the <a title=\"Law Of Demeter on Wikipedia\" href=\"http://en.wikipedia.org/wiki/Law_of_Demeter\" target=\"ext\">Law Of Demeter</a>, which is the principle that a classshould only have limited knowledge about other classes, and only talk to objects closely related to the current object. This is sometimes presented as \"you should not have more than one dot in each expression\". In other words, this would be breaking the law: <p></p><pre class=\"csharpcode\"><span class=\"kwrd\"><br />string</span> name = order.Customer.Name;</pre><p>  </p><p>While I do appreciate the idea behind the Law Of Demeter, specifically that individual classes should not know too much about each other; I think the above code would often be perfectly acceptable. <a title=\"Phil Haack's blog\" href=\"http://haacked.com/\" target=\"ext\">Phil Haack</a> has a blogpost going into further details about this: <a title=\"Phil Haack on the Law of Demeter\" href=\"http://haacked.com/archive/2009/07/14/law-of-demeter-dot-counting.aspx\" target=\"ext\">The Law of Demeter Is Not A Dot Counting Excercise</a>, and <a title=\"Dan Mange on the Law of Demeter\" href=\"http://www.dcmanges.com/blog/37\" target=\"ext\">others agree</a>. <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: DA\">I think Martin Fowler explains it best: \"<a title=\"Martin Fowler quote\" href=\"http://twitter.com/martinfowler/status/1649793241\" target=\"ext\">I'd prefer to call it the Occasional Useful Suggestion of Demeter</a></span><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: DA\">\". <p></p></span></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p style=\"LINE-HEIGHT: normal; MARGIN: 0cm 0cm 10pt; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto\" class=\"MsoNormal\"><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: DA\">So, most of us will probably (hopefully) agree, that it is OK to use more than one dot in a statement, when appropiate. One such place might be when doing UI in a ASP .NET application, and one needs to display information about an order and it's details. But here arises a problem, we will need to check each of the expression parts for null to ensure that we do not accidentally cause a NullReferenceException. This leads to ugly code, especially in a data-binding scenario, such as: <p></p></span></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><pre class=\"csharpcode\">&lt;%# order == <span class=\"kwrd\">null</span> ? <span class=\"kwrd\">null</span> : order.Customer == <span class=\"kwrd\">null</span> ? <span class=\"kwrd\">null</span> : order.Customer.Name %&gt;</pre><p> </p><p><a title=\"Stackoverflow question about Deep Null Checking\" href=\"http://stackoverflow.com/questions/2080647/deep-null-checking-is-there-a-better-way\" target=\"ext\">This question on StackOverflow</a> asks about exactly that, how do we get rid of such explicit and repeated null checking ? It got me thinking, it must be possible to solve this using expression trees. It turns out, it is in fact possible, as I state in <a title=\"StackOverflow answer\" href=\"http://stackoverflow.com/questions/2080647/deep-null-checking-is-there-a-better-way/2081942#2081942\" target=\"ext\">my answer on StackOverflow</a>. We can in fact build an extension methods, which looks at an expression tree, evaluates each part of it seperately, checks for null each time, and ultimately returns the correct value; or null if one of the expression parts where null. This is my implementation of such a method:</p><!-- code formatted by http://manoli.net/csharpformat/ --><div class=\"csharpcode\"><pre class=\"alt\"><span class=\"lnum\"> 1: </span><span class=\"kwrd\">using</span> System;</pre><pre><span class=\"lnum\"> 2: </span><span class=\"kwrd\">using</span> System.Collections.Generic;</pre><pre class=\"alt\"><span class=\"lnum\"> 3: </span><span class=\"kwrd\">using</span> System.Linq.Expressions;</pre><pre><span class=\"lnum\"> 4: </span> </pre><pre class=\"alt\"><span class=\"lnum\"> 5: </span><span class=\"kwrd\">namespace</span> dr.IfNotNullOperator.PoC</pre><pre><span class=\"lnum\"> 6: </span>{</pre><pre class=\"alt\"><span class=\"lnum\"> 7: </span>    <span class=\"kwrd\">public</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">class</span> ObjectExtensions</pre><pre><span class=\"lnum\"> 8: </span>    {</pre><pre class=\"alt\"><span class=\"lnum\"> 9: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">static</span> TResult IfNotNull&lt;TArg,TResult&gt;(<span class=\"kwrd\">this</span> TArg arg, Expression&lt;Func&lt;TArg,TResult&gt;&gt; expression)</pre><pre><span class=\"lnum\"> 10: </span>        {</pre><pre class=\"alt\"><span class=\"lnum\"> 11: </span>            <span class=\"kwrd\">if</span> (expression == <span class=\"kwrd\">null</span>)</pre><pre><span class=\"lnum\"> 12: </span>                <span class=\"kwrd\">throw</span> <span class=\"kwrd\">new</span> ArgumentNullException(<span class=\"str\">\"expression\"</span>);</pre><pre class=\"alt\"><span class=\"lnum\"> 13: </span> </pre><pre><span class=\"lnum\"> 14: </span>            <span class=\"kwrd\">if</span> (ReferenceEquals(arg, <span class=\"kwrd\">null</span>))</pre><pre class=\"alt\"><span class=\"lnum\"> 15: </span>                <span class=\"kwrd\">return</span> <span class=\"kwrd\">default</span>(TResult);</pre><pre><span class=\"lnum\"> 16: </span> </pre><pre class=\"alt\"><span class=\"lnum\"> 17: </span>            var stack = <span class=\"kwrd\">new</span> Stack&lt;MemberExpression&gt;();</pre><pre><span class=\"lnum\"> 18: </span>            var expr = expression.Body <span class=\"kwrd\">as</span> MemberExpression;</pre><pre class=\"alt\"><span class=\"lnum\"> 19: </span>            <span class=\"kwrd\">while</span>(expr != <span class=\"kwrd\">null</span>)</pre><pre><span class=\"lnum\"> 20: </span>            {</pre><pre class=\"alt\"><span class=\"lnum\"> 21: </span>                stack.Push(expr);</pre><pre><span class=\"lnum\"> 22: </span>                expr = expr.Expression <span class=\"kwrd\">as</span> MemberExpression;</pre><pre class=\"alt\"><span class=\"lnum\"> 23: </span>            } </pre><pre><span class=\"lnum\"> 24: </span> </pre><pre class=\"alt\"><span class=\"lnum\"> 25: </span>            <span class=\"kwrd\">if</span> (stack.Count == 0 || !(stack.Peek().Expression <span class=\"kwrd\">is</span> ParameterExpression))</pre><pre><span class=\"lnum\"> 26: </span>                <span class=\"kwrd\">throw</span> <span class=\"kwrd\">new</span> ApplicationException(String.Format(<span class=\"str\">\"The expression '{0}' contains unsupported constructs.\"</span>,</pre><pre class=\"alt\"><span class=\"lnum\"> 27: </span>                                                             expression));</pre><pre><span class=\"lnum\"> 28: </span>            </pre><pre class=\"alt\"><span class=\"lnum\"> 29: </span>            <span class=\"kwrd\">object</span> a = arg;</pre><pre><span class=\"lnum\"> 30: </span>            <span class=\"kwrd\">while</span>(stack.Count &gt; 0)</pre><pre class=\"alt\"><span class=\"lnum\"> 31: </span>            {</pre><pre><span class=\"lnum\"> 32: </span>                expr = stack.Pop();</pre><pre class=\"alt\"><span class=\"lnum\"> 33: </span>                var p = expr.Expression <span class=\"kwrd\">as</span> ParameterExpression;</pre><pre><span class=\"lnum\"> 34: </span>                <span class=\"kwrd\">if</span> (p == <span class=\"kwrd\">null</span>)</pre><pre class=\"alt\"><span class=\"lnum\"> 35: </span>                {</pre><pre><span class=\"lnum\"> 36: </span>                    p = Expression.Parameter(a.GetType(), <span class=\"str\">\"x\"</span>);</pre><pre class=\"alt\"><span class=\"lnum\"> 37: </span>                    expr = expr.Update(p);</pre><pre><span class=\"lnum\"> 38: </span>                }</pre><pre class=\"alt\"><span class=\"lnum\"> 39: </span>                var lambda = Expression.Lambda(expr, p);</pre><pre><span class=\"lnum\"> 40: </span>                Delegate t = lambda.Compile();                </pre><pre class=\"alt\"><span class=\"lnum\"> 41: </span>                a = t.DynamicInvoke(a);</pre><pre><span class=\"lnum\"> 42: </span>                <span class=\"kwrd\">if</span> (ReferenceEquals(a, <span class=\"kwrd\">null</span>))</pre><pre class=\"alt\"><span class=\"lnum\"> 43: </span>                    <span class=\"kwrd\">return</span> <span class=\"kwrd\">default</span>(TResult);</pre><pre><span class=\"lnum\"> 44: </span>            }</pre><pre class=\"alt\"><span class=\"lnum\"> 45: </span> </pre><pre><span class=\"lnum\"> 46: </span>            <span class=\"kwrd\">return</span> (TResult)a;            </pre><pre class=\"alt\"><span class=\"lnum\"> 47: </span>        }</pre><pre><span class=\"lnum\"> 48: </span>    }</pre><pre class=\"alt\"><span class=\"lnum\"> 49: </span>}</pre></div><p>There are some caveats though, in the current version it will only work with simple member access, and it only works on .NET Framework 4, because it uses the MemberExpression.Update method, which is new in v4. </p><div></div><p></p><p></p><p></p><p style=\"MARGIN: 0cm 0cm 12pt; VERTICAL-ALIGN: baseline; background-origin: initial; background-clip: initial\"><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">It works by examining the expression tree representing your expression, and evaluating the parts one after the other; each time checking that the result is not null. <p></p></span></p><p></p><p></p><p></p><p style=\"MARGIN: 0cm 0cm 12pt; VERTICAL-ALIGN: baseline; background-origin: initial; background-clip: initial\"><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">I am sure this could be extended so that other expressions than MemberExpression is supported, and I might update it at a later point to support more complicated expressions. Consider this as proof-of-concept code, and please keep in mind that there will be a performance penalty by using it (which will probably not matter in many cases, but don't use it in a tight loop :-) ). I have not done any measurements on the performance yet, and I am also sure that one could make some optimizations to it. <p></p></span></p><p></p><p></p><p></p><p><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">Here is a zip containing the code as well as a few unit tests: </span><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'\"><a title=\"Download (from MediaFire)\" href=\"http://www.mediafire.com/?h2zktzd2mmd\" target=\"ext\"><span style=\"mso-ansi-language: EN-US\"><span style=\"COLOR: #0000ff\">IfNotNullExtension.zip</span></span></a></span><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">. <p></p></span></p><p></p><p></p><p></p><p><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">What do you think about this approach to null checking ? Would you consider this extension method useful (provided that it performs adequately for the scenario) ? <p></p></span></p><p></p><p></p><p></p><p></p><p></p><p></p>","Body":"I am sure most programmers have heard about the <a title=\"Law Of Demeter on Wikipedia\" href=\"http://en.wikipedia.org/wiki/Law_of_Demeter\" target=\"ext\">Law Of Demeter</a>, which is the principle that a classshould only have limited knowledge about other classes, and only talk to objects closely related to the current object. This is sometimes presented as \"you should not have more than one dot in each expression\". In other words, this would be breaking the law: <p></p><pre class=\"csharpcode\"><span class=\"kwrd\"><br />string</span> name = order.Customer.Name;</pre><p>  </p><p>While I do appreciate the idea behind the Law Of Demeter, specifically that individual classes should not know too much about each other; I think the above code would often be perfectly acceptable. <a title=\"Phil Haack's blog\" href=\"http://haacked.com/\" target=\"ext\">Phil Haack</a> has a blogpost going into further details about this: <a title=\"Phil Haack on the Law of Demeter\" href=\"http://haacked.com/archive/2009/07/14/law-of-demeter-dot-counting.aspx\" target=\"ext\">The Law of Demeter Is Not A Dot Counting Excercise</a>, and <a title=\"Dan Mange on the Law of Demeter\" href=\"http://www.dcmanges.com/blog/37\" target=\"ext\">others agree</a>. <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: DA\">I think Martin Fowler explains it best: \"<a title=\"Martin Fowler quote\" href=\"http://twitter.com/martinfowler/status/1649793241\" target=\"ext\">I'd prefer to call it the Occasional Useful Suggestion of Demeter</a></span><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: DA\">\". <p></p></span></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p style=\"LINE-HEIGHT: normal; MARGIN: 0cm 0cm 10pt; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto\" class=\"MsoNormal\"><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-fareast-font-family: 'Times New Roman'; mso-ansi-language: EN-US; mso-fareast-language: DA\">So, most of us will probably (hopefully) agree, that it is OK to use more than one dot in a statement, when appropiate. One such place might be when doing UI in a ASP .NET application, and one needs to display information about an order and it's details. But here arises a problem, we will need to check each of the expression parts for null to ensure that we do not accidentally cause a NullReferenceException. This leads to ugly code, especially in a data-binding scenario, such as: <p></p></span></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><pre class=\"csharpcode\">&lt;%# order == <span class=\"kwrd\">null</span> ? <span class=\"kwrd\">null</span> : order.Customer == <span class=\"kwrd\">null</span> ? <span class=\"kwrd\">null</span> : order.Customer.Name %&gt;</pre><p> </p><p><a title=\"Stackoverflow question about Deep Null Checking\" href=\"http://stackoverflow.com/questions/2080647/deep-null-checking-is-there-a-better-way\" target=\"ext\">This question on StackOverflow</a> asks about exactly that, how do we get rid of such explicit and repeated null checking ? It got me thinking, it must be possible to solve this using expression trees. It turns out, it is in fact possible, as I state in <a title=\"StackOverflow answer\" href=\"http://stackoverflow.com/questions/2080647/deep-null-checking-is-there-a-better-way/2081942#2081942\" target=\"ext\">my answer on StackOverflow</a>. We can in fact build an extension methods, which looks at an expression tree, evaluates each part of it seperately, checks for null each time, and ultimately returns the correct value; or null if one of the expression parts where null. This is my implementation of such a method:</p><!-- code formatted by http://manoli.net/csharpformat/ --><div class=\"csharpcode\"><pre class=\"alt\"><span class=\"lnum\"> 1: </span><span class=\"kwrd\">using</span> System;</pre><pre><span class=\"lnum\"> 2: </span><span class=\"kwrd\">using</span> System.Collections.Generic;</pre><pre class=\"alt\"><span class=\"lnum\"> 3: </span><span class=\"kwrd\">using</span> System.Linq.Expressions;</pre><pre><span class=\"lnum\"> 4: </span> </pre><pre class=\"alt\"><span class=\"lnum\"> 5: </span><span class=\"kwrd\">namespace</span> dr.IfNotNullOperator.PoC</pre><pre><span class=\"lnum\"> 6: </span>{</pre><pre class=\"alt\"><span class=\"lnum\"> 7: </span>    <span class=\"kwrd\">public</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">class</span> ObjectExtensions</pre><pre><span class=\"lnum\"> 8: </span>    {</pre><pre class=\"alt\"><span class=\"lnum\"> 9: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">static</span> TResult IfNotNull&lt;TArg,TResult&gt;(<span class=\"kwrd\">this</span> TArg arg, Expression&lt;Func&lt;TArg,TResult&gt;&gt; expression)</pre><pre><span class=\"lnum\"> 10: </span>        {</pre><pre class=\"alt\"><span class=\"lnum\"> 11: </span>            <span class=\"kwrd\">if</span> (expression == <span class=\"kwrd\">null</span>)</pre><pre><span class=\"lnum\"> 12: </span>                <span class=\"kwrd\">throw</span> <span class=\"kwrd\">new</span> ArgumentNullException(<span class=\"str\">\"expression\"</span>);</pre><pre class=\"alt\"><span class=\"lnum\"> 13: </span> </pre><pre><span class=\"lnum\"> 14: </span>            <span class=\"kwrd\">if</span> (ReferenceEquals(arg, <span class=\"kwrd\">null</span>))</pre><pre class=\"alt\"><span class=\"lnum\"> 15: </span>                <span class=\"kwrd\">return</span> <span class=\"kwrd\">default</span>(TResult);</pre><pre><span class=\"lnum\"> 16: </span> </pre><pre class=\"alt\"><span class=\"lnum\"> 17: </span>            var stack = <span class=\"kwrd\">new</span> Stack&lt;MemberExpression&gt;();</pre><pre><span class=\"lnum\"> 18: </span>            var expr = expression.Body <span class=\"kwrd\">as</span> MemberExpression;</pre><pre class=\"alt\"><span class=\"lnum\"> 19: </span>            <span class=\"kwrd\">while</span>(expr != <span class=\"kwrd\">null</span>)</pre><pre><span class=\"lnum\"> 20: </span>            {</pre><pre class=\"alt\"><span class=\"lnum\"> 21: </span>                stack.Push(expr);</pre><pre><span class=\"lnum\"> 22: </span>                expr = expr.Expression <span class=\"kwrd\">as</span> MemberExpression;</pre><pre class=\"alt\"><span class=\"lnum\"> 23: </span>            } </pre><pre><span class=\"lnum\"> 24: </span> </pre><pre class=\"alt\"><span class=\"lnum\"> 25: </span>            <span class=\"kwrd\">if</span> (stack.Count == 0 || !(stack.Peek().Expression <span class=\"kwrd\">is</span> ParameterExpression))</pre><pre><span class=\"lnum\"> 26: </span>                <span class=\"kwrd\">throw</span> <span class=\"kwrd\">new</span> ApplicationException(String.Format(<span class=\"str\">\"The expression '{0}' contains unsupported constructs.\"</span>,</pre><pre class=\"alt\"><span class=\"lnum\"> 27: </span>                                                             expression));</pre><pre><span class=\"lnum\"> 28: </span>            </pre><pre class=\"alt\"><span class=\"lnum\"> 29: </span>            <span class=\"kwrd\">object</span> a = arg;</pre><pre><span class=\"lnum\"> 30: </span>            <span class=\"kwrd\">while</span>(stack.Count &gt; 0)</pre><pre class=\"alt\"><span class=\"lnum\"> 31: </span>            {</pre><pre><span class=\"lnum\"> 32: </span>                expr = stack.Pop();</pre><pre class=\"alt\"><span class=\"lnum\"> 33: </span>                var p = expr.Expression <span class=\"kwrd\">as</span> ParameterExpression;</pre><pre><span class=\"lnum\"> 34: </span>                <span class=\"kwrd\">if</span> (p == <span class=\"kwrd\">null</span>)</pre><pre class=\"alt\"><span class=\"lnum\"> 35: </span>                {</pre><pre><span class=\"lnum\"> 36: </span>                    p = Expression.Parameter(a.GetType(), <span class=\"str\">\"x\"</span>);</pre><pre class=\"alt\"><span class=\"lnum\"> 37: </span>                    expr = expr.Update(p);</pre><pre><span class=\"lnum\"> 38: </span>                }</pre><pre class=\"alt\"><span class=\"lnum\"> 39: </span>                var lambda = Expression.Lambda(expr, p);</pre><pre><span class=\"lnum\"> 40: </span>                Delegate t = lambda.Compile();                </pre><pre class=\"alt\"><span class=\"lnum\"> 41: </span>                a = t.DynamicInvoke(a);</pre><pre><span class=\"lnum\"> 42: </span>                <span class=\"kwrd\">if</span> (ReferenceEquals(a, <span class=\"kwrd\">null</span>))</pre><pre class=\"alt\"><span class=\"lnum\"> 43: </span>                    <span class=\"kwrd\">return</span> <span class=\"kwrd\">default</span>(TResult);</pre><pre><span class=\"lnum\"> 44: </span>            }</pre><pre class=\"alt\"><span class=\"lnum\"> 45: </span> </pre><pre><span class=\"lnum\"> 46: </span>            <span class=\"kwrd\">return</span> (TResult)a;            </pre><pre class=\"alt\"><span class=\"lnum\"> 47: </span>        }</pre><pre><span class=\"lnum\"> 48: </span>    }</pre><pre class=\"alt\"><span class=\"lnum\"> 49: </span>}</pre></div><p>There are some caveats though, in the current version it will only work with simple member access, and it only works on .NET Framework 4, because it uses the MemberExpression.Update method, which is new in v4. </p><div></div><p></p><p></p><p></p><p style=\"MARGIN: 0cm 0cm 12pt; VERTICAL-ALIGN: baseline; background-origin: initial; background-clip: initial\"><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">It works by examining the expression tree representing your expression, and evaluating the parts one after the other; each time checking that the result is not null. <p></p></span></p><p></p><p></p><p></p><p style=\"MARGIN: 0cm 0cm 12pt; VERTICAL-ALIGN: baseline; background-origin: initial; background-clip: initial\"><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">I am sure this could be extended so that other expressions than MemberExpression is supported, and I might update it at a later point to support more complicated expressions. Consider this as proof-of-concept code, and please keep in mind that there will be a performance penalty by using it (which will probably not matter in many cases, but don't use it in a tight loop :-) ). I have not done any measurements on the performance yet, and I am also sure that one could make some optimizations to it. <p></p></span></p><p></p><p></p><p></p><p><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">Here is a zip containing the code as well as a few unit tests: </span><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'\"><a title=\"Download (from MediaFire)\" href=\"http://www.mediafire.com/?h2zktzd2mmd\" target=\"ext\"><span style=\"mso-ansi-language: EN-US\"><span style=\"COLOR: #0000ff\">IfNotNullExtension.zip</span></span></a></span><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">. <p></p></span></p><p></p><p></p><p></p><p><span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">What do you think about this approach to null checking ? Would you consider this extension method useful (provided that it performs adequately for the scenario) ? <p></p></span></p><p></p><p></p><p></p><p></p><p></p><p></p>","Author":"Dennis Riis","Published":"2010-01-17T18:47:00.0000000Z","IsPublished":true,"Comments":[],"Tags":["LINQ",".NET"],"Created":"2010-01-17T18:47:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":11,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":51,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/2","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.7849158Z","@etag":"00000001-0000-0800-0000-00000000000b","Non-Authoritative-Information":false}},{"Title":"Last day at TechEd","UrlName":"Last-day-at-TechEd","BodyHtml":"\n\t\t<p>It's friday, and TechEd is over for this time.</p>\n    <p>My first session on friday was about little-known secrets in Microsoft Silverlight 3. This was a really good session for advanced Silverlight development, and I took away many tricks - including the ability to download and use assemblies dynamically and asynchronously; and to use the OS client stack instead of the browser stack for network access.</p>\n    <p>Second session was about extending Visual Studio 2010's architecture modelling tools. This was a code-rich session, where we were walked through creating 3 extensions for the modelling tools. With VSIX packages, deployment of Visual Studio extensions are now much easier. The coding experience when creating extenions has also been made much nicer in the new verison of Visual Studio 2010. It is a no-frills experience, where you only need to work in the problem domain, and not jump through hoops to make Visual Studio do what you want. </p>\n    <p>The last session of this year's TechEd is about <a title=\"Pex at Microsoft Research\" href=\"http://research.microsoft.com/en-us/projects/Pex/\" target=\"_blank\">Pex</a> and <a title=\"Code Contracts at Microsoft Research\" href=\"http://research.microsoft.com/en-us/projects/contracts/\" target=\"_blank\">Code Contracts</a>. I am writing this while waiting for the session to be begin - it's a very interesting topic, and I might do a full length blog post about Pex and Code Contracts at a later time.</p>\n    <p>This has been a very educational and interesting week. I have learned about architecture and design, new tools and techniques. In general, the quality of the talks has been very high (there were a few misses, but it's been an overall good experience). The only problem has been to select the right session, when there were multiple interesting selections in the same time slot, which happened to me a lot. For instance, I never got to see a talk about the Concurrency Runtime (CCR), because there were always something more interesting on the menu. Now, I need to get home and get into the gym - it's been a week with good foods, eggs and bacon each morning at the hotel, so I need it :-) I Might be coming back next year !</p>","Body":"\n\t\t<p>It's friday, and TechEd is over for this time.</p>\n    <p>My first session on friday was about little-known secrets in Microsoft Silverlight 3. This was a really good session for advanced Silverlight development, and I took away many tricks - including the ability to download and use assemblies dynamically and asynchronously; and to use the OS client stack instead of the browser stack for network access.</p>\n    <p>Second session was about extending Visual Studio 2010's architecture modelling tools. This was a code-rich session, where we were walked through creating 3 extensions for the modelling tools. With VSIX packages, deployment of Visual Studio extensions are now much easier. The coding experience when creating extenions has also been made much nicer in the new verison of Visual Studio 2010. It is a no-frills experience, where you only need to work in the problem domain, and not jump through hoops to make Visual Studio do what you want. </p>\n    <p>The last session of this year's TechEd is about <a title=\"Pex at Microsoft Research\" href=\"http://research.microsoft.com/en-us/projects/Pex/\" target=\"_blank\">Pex</a> and <a title=\"Code Contracts at Microsoft Research\" href=\"http://research.microsoft.com/en-us/projects/contracts/\" target=\"_blank\">Code Contracts</a>. I am writing this while waiting for the session to be begin - it's a very interesting topic, and I might do a full length blog post about Pex and Code Contracts at a later time.</p>\n    <p>This has been a very educational and interesting week. I have learned about architecture and design, new tools and techniques. In general, the quality of the talks has been very high (there were a few misses, but it's been an overall good experience). The only problem has been to select the right session, when there were multiple interesting selections in the same time slot, which happened to me a lot. For instance, I never got to see a talk about the Concurrency Runtime (CCR), because there were always something more interesting on the menu. Now, I need to get home and get into the gym - it's been a week with good foods, eggs and bacon each morning at the hotel, so I need it :-) I Might be coming back next year !</p>","Author":"Dennis Riis","Published":"2009-11-13T09:56:00.0000000Z","IsPublished":true,"Comments":[],"Tags":["TechEd",".NET"],"Created":"2009-11-13T09:56:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":12,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":52,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/3","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.7909187Z","@etag":"00000001-0000-0800-0000-00000000000c","Non-Authoritative-Information":false}},{"Title":"Day Four at TechEd over","UrlName":"Day-Four-at-TechEd-over","BodyHtml":"\n\t\t<p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">TechEd is coming to an end, day four is now over. There are three sessions on friday, then it's over.</span> </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">I started the day with a session on C# 4.0 Dynamic: The why’s and hows. It was being done by Alex Turner, who is Program Manager for the C# compiler. This was a very interesting walk through why C# should have dynamic features, and why it has been designed as it is. There has gone a lot of design thought into the dynamic design, and I certainly think that the final design they’ve chosen is the right one. He demoed creating your own dynamic types from C# which can respond to any method call – very cool. I can certainly see some good use cases for the C# <i style=\"mso-bidi-font-style: normal\">dynamic</i> keyword. <p></p></span>\n        <p>\n        </p>\n      </span>\n    </p>\n    <p>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Next, I went to see a talk about Windows Communication Foundation: Developer’s Guide to Windows Communication Foundation, SOA and success. Interesting, and with some very good thoughts on interoperability. My most important take-away from that session, is that if you need to be interoperable, try to do REST. <p></p></span>\n        <p>\n        </p>\n      </span>\n    </p>\n    <p>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">In the afternoon, I went to see Tess Ferrandez present on ASP .NET post-mortem debugging (well, the techniques apply to any .NET process, I think, but it was presented towards ASP .NET). This is the kind of debugging you get to do when your process consumes too much memory, hangs, or explodes; in the production environment, without you being able to reproduce the issue locally. When this kind of debugging is needed, something is on fire, and you will get stress fixing it. But apart from that, I do find this kind of debugging challenging and kind-of-fun ;-) Tess demonstrated using WinDbg, SOS.dll (Son-of-Strike, someone please explain the name to me), Debug Diag and other tools. She demonstrated detecting a memory issue, a poor performance issue, and a crash issue using these tools. She also demonstrated doing these using Visual Studio 2010, with its new ability to open memory dumps, and do debugging on them. With this cool new feature, you can do almost everything you can do in a normal debug session, but in a memory dump, that you might have obtained from some production server. You can see the stack trace, the locals, and examine the value of objects. The only thing you cannot do, is run/step back/forward, of course, the dump is an image of the process at a specific time. Very neat is the Parallel Stacks feature, where Visual Studio will visualize the stack of each thread for you, which makes it easy to identify contention in your locking, as well as other thread sync issues. <p></p></span>\n        <p>\n        </p>\n      </span>\n    </p>\n    <p>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Last session of the day was by Magnus Mårtensson. This was an architecture talk about design with dependency injection and ensuring extensibility. Very interesting.</span> </span>\n    </p>","Body":"\n\t\t<p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">TechEd is coming to an end, day four is now over. There are three sessions on friday, then it's over.</span> </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">I started the day with a session on C# 4.0 Dynamic: The why’s and hows. It was being done by Alex Turner, who is Program Manager for the C# compiler. This was a very interesting walk through why C# should have dynamic features, and why it has been designed as it is. There has gone a lot of design thought into the dynamic design, and I certainly think that the final design they’ve chosen is the right one. He demoed creating your own dynamic types from C# which can respond to any method call – very cool. I can certainly see some good use cases for the C# <i style=\"mso-bidi-font-style: normal\">dynamic</i> keyword. <p></p></span>\n        <p>\n        </p>\n      </span>\n    </p>\n    <p>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Next, I went to see a talk about Windows Communication Foundation: Developer’s Guide to Windows Communication Foundation, SOA and success. Interesting, and with some very good thoughts on interoperability. My most important take-away from that session, is that if you need to be interoperable, try to do REST. <p></p></span>\n        <p>\n        </p>\n      </span>\n    </p>\n    <p>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">In the afternoon, I went to see Tess Ferrandez present on ASP .NET post-mortem debugging (well, the techniques apply to any .NET process, I think, but it was presented towards ASP .NET). This is the kind of debugging you get to do when your process consumes too much memory, hangs, or explodes; in the production environment, without you being able to reproduce the issue locally. When this kind of debugging is needed, something is on fire, and you will get stress fixing it. But apart from that, I do find this kind of debugging challenging and kind-of-fun ;-) Tess demonstrated using WinDbg, SOS.dll (Son-of-Strike, someone please explain the name to me), Debug Diag and other tools. She demonstrated detecting a memory issue, a poor performance issue, and a crash issue using these tools. She also demonstrated doing these using Visual Studio 2010, with its new ability to open memory dumps, and do debugging on them. With this cool new feature, you can do almost everything you can do in a normal debug session, but in a memory dump, that you might have obtained from some production server. You can see the stack trace, the locals, and examine the value of objects. The only thing you cannot do, is run/step back/forward, of course, the dump is an image of the process at a specific time. Very neat is the Parallel Stacks feature, where Visual Studio will visualize the stack of each thread for you, which makes it easy to identify contention in your locking, as well as other thread sync issues. <p></p></span>\n        <p>\n        </p>\n      </span>\n    </p>\n    <p>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Last session of the day was by Magnus Mårtensson. This was an architecture talk about design with dependency injection and ensuring extensibility. Very interesting.</span> </span>\n    </p>","Author":"Dennis Riis","Published":"2009-11-13T09:50:00.0000000Z","IsPublished":true,"Comments":[],"Tags":["TechEd",".NET"],"Created":"2009-11-13T09:50:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":13,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":53,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/4","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.7909187Z","@etag":"00000001-0000-0800-0000-00000000000d","Non-Authoritative-Information":false}},{"Title":"Third day at TechEd","UrlName":"Third-day-at-TechEd","BodyHtml":"\n\t\t<p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Once again, I attended some very interesting talks at TechEd. This mornings sessions was entitled “The daily Scrum”, about doing Scrum and agile development. This was mostly a Q&amp;A session with answers to many of the practical problems one might encounter when trying to be agile.<p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Next, I had a real hard time deciding between staying on the agile track and attending the “Tools and Agile Teams” talk versus hearing Don Syme speak about F#. I chose the F# session, which I think was a good choice. Don is one of the primary architects behind F#, so it would have been a shame not to hear him speak about it. This talk really drove home some points about F#, and why it helps you do parallel programming, with immutability, the async language construct and Agents. Another good point is that F# should not be used for anything, and in a large application, Don suggested that only a small DLL might be written in F# - it should be used as a tool, where you needed. Don also showed some really impressing demos, using Direct3D from F#.<p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">After lunch, I attended Roy Osherove’s talk about unit testing. His main points where to write maintainable, consistent and readable unit tests, and proceeded to show this can be done. He suggested using test reviews in order to get started writing good unit tests, which I think is a very good idea. Very insightful talk.<p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">The last session of today was about cloud computing: “</span>\n      </span>\n      <span class=\"apple-style-span\">\n        <span style=\"LINE-HEIGHT: 115%; FONT-FAMILY: 'Arial','sans-serif'; COLOR: black; FONT-SIZE: 8.5pt; mso-ansi-language: EN-US\" lang=\"EN-US\">Deep Dive into Developing Line-of-Business Applications Running in the Cloud</span>\n        <span style=\"FONT-FAMILY: Calibri\">”. </span>\n      </span>\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">I don’t think this was a good session. There was too much demoing of an app in the cloud, and too little talk about the actual architecture behind it. Also, the presenters neglected to do any introduction to the Azure tools, I guess they expected everyone attending to know about those in advance.<p></p></span>\n      </span>\n    </p>","Body":"\n\t\t<p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Once again, I attended some very interesting talks at TechEd. This mornings sessions was entitled “The daily Scrum”, about doing Scrum and agile development. This was mostly a Q&amp;A session with answers to many of the practical problems one might encounter when trying to be agile.<p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Next, I had a real hard time deciding between staying on the agile track and attending the “Tools and Agile Teams” talk versus hearing Don Syme speak about F#. I chose the F# session, which I think was a good choice. Don is one of the primary architects behind F#, so it would have been a shame not to hear him speak about it. This talk really drove home some points about F#, and why it helps you do parallel programming, with immutability, the async language construct and Agents. Another good point is that F# should not be used for anything, and in a large application, Don suggested that only a small DLL might be written in F# - it should be used as a tool, where you needed. Don also showed some really impressing demos, using Direct3D from F#.<p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">After lunch, I attended Roy Osherove’s talk about unit testing. His main points where to write maintainable, consistent and readable unit tests, and proceeded to show this can be done. He suggested using test reviews in order to get started writing good unit tests, which I think is a very good idea. Very insightful talk.<p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">The last session of today was about cloud computing: “</span>\n      </span>\n      <span class=\"apple-style-span\">\n        <span style=\"LINE-HEIGHT: 115%; FONT-FAMILY: 'Arial','sans-serif'; COLOR: black; FONT-SIZE: 8.5pt; mso-ansi-language: EN-US\" lang=\"EN-US\">Deep Dive into Developing Line-of-Business Applications Running in the Cloud</span>\n        <span style=\"FONT-FAMILY: Calibri\">”. </span>\n      </span>\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">I don’t think this was a good session. There was too much demoing of an app in the cloud, and too little talk about the actual architecture behind it. Also, the presenters neglected to do any introduction to the Azure tools, I guess they expected everyone attending to know about those in advance.<p></p></span>\n      </span>\n    </p>","Author":"Dennis Riis","Published":"2009-11-11T18:07:00.0000000Z","IsPublished":true,"Comments":[],"Tags":["TechEd",".NET"],"Created":"2009-11-11T18:07:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":14,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":54,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/5","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.8069176Z","@etag":"00000001-0000-0800-0000-00000000000e","Non-Authoritative-Information":false}},{"Title":"Day Two At TechEd Europe","UrlName":"Day-Two-At-TechEd-Europe","BodyHtml":"\n\t\t<p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Today started off fresh with 2 Sharepoint sessions The first one was an introduction to Sharepoint 2010 for developers, and while I haven’t done any development on Sharepoint before, based on the feedback, it will be tons easier to do Sharepoint development with 2010. The second session on Sharepoint was somewhat relevant and somewhat a<span style=\"mso-spacerun: yes\">  </span>miss. While it did provide some good information, there was not really anything new, if you had attended the first session.<p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">During lunch, I had been invited to a lunch session by Microsoft Denmark on IIS 7.5. The speaker was<span style=\"mso-spacerun: yes\">  </span>a real expert on the subject, Bernhard Frank. Very interesting and good<span style=\"mso-spacerun: yes\">  </span>food, but had to cut the session short in order to make it to the next session.<p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Next was a presentation by Brian Harry about TFS 2010 and its new version control features. There are some real goodies coming ,, in 2010, and Brian demonstrated better branching and branch visualization, support for rollback and improved labeling. Very nice, and something I can really see the need for in my own organization. <p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">I also attended a session on software architecture by Ralf Westphal. He discussed architecture at a high level, and you should not view the architecture as UML class diagram, layered architechture diagram or something like that. Instead he advocated functional<span style=\"mso-spacerun: yes\">  </span>building blocks, or functional units as he called it; which recursively consists of yet another set of functional units. This way, you get a hierarchy of functional units from the one application, through synchronous components till methods in a class. While surely one of the most abstract talks today, I took some very good points with me from the talk.<p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Lastly today, there was an ASP .NET MVC2: “What’s new” session that I attended. It really competed with the “Pumping Iron” session (about IronRuby/Python), but as it turns out, that session was overbooked, so I made the right choice. There is some really great improvements in MVC2, which boils down to improving productivity on the framework. This means support for partial renderings based on invoking of controllers, and templated views. A cool demo was demonstrating the validation features, where you can define your validation rules in the model (as annotations out-of-the-box, but it’s extensible, so you can store your rules wherever you like). I think MVC2 might just be the release that is mature enough to be tried out on a real project – I am sure our frontend developers will love it.<p></p></span>\n      </span>\n    </p>","Body":"\n\t\t<p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Today started off fresh with 2 Sharepoint sessions The first one was an introduction to Sharepoint 2010 for developers, and while I haven’t done any development on Sharepoint before, based on the feedback, it will be tons easier to do Sharepoint development with 2010. The second session on Sharepoint was somewhat relevant and somewhat a<span style=\"mso-spacerun: yes\">  </span>miss. While it did provide some good information, there was not really anything new, if you had attended the first session.<p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">During lunch, I had been invited to a lunch session by Microsoft Denmark on IIS 7.5. The speaker was<span style=\"mso-spacerun: yes\">  </span>a real expert on the subject, Bernhard Frank. Very interesting and good<span style=\"mso-spacerun: yes\">  </span>food, but had to cut the session short in order to make it to the next session.<p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Next was a presentation by Brian Harry about TFS 2010 and its new version control features. There are some real goodies coming ,, in 2010, and Brian demonstrated better branching and branch visualization, support for rollback and improved labeling. Very nice, and something I can really see the need for in my own organization. <p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">I also attended a session on software architecture by Ralf Westphal. He discussed architecture at a high level, and you should not view the architecture as UML class diagram, layered architechture diagram or something like that. Instead he advocated functional<span style=\"mso-spacerun: yes\">  </span>building blocks, or functional units as he called it; which recursively consists of yet another set of functional units. This way, you get a hierarchy of functional units from the one application, through synchronous components till methods in a class. While surely one of the most abstract talks today, I took some very good points with me from the talk.<p></p></span>\n      </span>\n    </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\" lang=\"EN-US\">\n        <span style=\"FONT-FAMILY: Calibri\">Lastly today, there was an ASP .NET MVC2: “What’s new” session that I attended. It really competed with the “Pumping Iron” session (about IronRuby/Python), but as it turns out, that session was overbooked, so I made the right choice. There is some really great improvements in MVC2, which boils down to improving productivity on the framework. This means support for partial renderings based on invoking of controllers, and templated views. A cool demo was demonstrating the validation features, where you can define your validation rules in the model (as annotations out-of-the-box, but it’s extensible, so you can store your rules wherever you like). I think MVC2 might just be the release that is mature enough to be tried out on a real project – I am sure our frontend developers will love it.<p></p></span>\n      </span>\n    </p>","Author":"Dennis Riis","Published":"2009-11-10T22:47:00.0000000Z","IsPublished":true,"Comments":[],"Tags":["TechEd",".NET"],"Created":"2009-11-10T22:47:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":15,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":55,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/6","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.8069176Z","@etag":"00000001-0000-0800-0000-00000000000f","Non-Authoritative-Information":false}},{"Title":"TechEd Europe 2009 Day One","UrlName":"TechEd-Europe-2009-Day-One","BodyHtml":"\n\t\t<p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">Today was my first day at TechEd Europe 2009 in Berlin, after having arrived to the hotel on sunday evening. I chose to drive to Berlin myself from Denmark, which went just fine, until I scratched a rim on the way down into a very narrow passage to the parking garage. Damn. The TechEd experience so far has been just great, although there was some queue for registration this morning. I guess it is hard to avoid when you have 7000+ people attending an event, and they all, more or less, arrive at the same time. <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">My first session at TechEd was titled \"ADO.NET Entity Framework in Microsoft Visual Studio 2010 and Microsoft .NET Framework 4\" and was about Entity Framework 4 with speaker Eric Nelson. Wait-a-minute, you might say, because last version of the EF was the initial release, 1.0. It seems that the EF has skipped a couple of versions so that it gets the same version number as the .NET Framework it ships with. That being said, the EF ships some of it's features as a separate download, but the core should be in .NET FX 4. <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">So what's to say about EF4 ? Well, it seems that Microsoft has fixed it. By that I mean that many of the problems that existed with the initial version has been eliminated or the experience has been improved. This includes better tooling and designer support. There is support for model-first development, where you drag-and-drop your model in a designer, and lets the framework generate the database for you (technically speaking, this also existed in v1, but it required you to do a lot of manual stuff, or as Eric Nelson put it, you would be in for a whole world of pain taking that route. <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">Something I am more excited about is the ability to control the generated code using T4 templates. This enables different scenarious such as POCO objects, which was missing from v1. There are some built-in templates so you don't need to write them from scratch. If you adhere to the \"develop against an interface\" to \"do TDD\" group of people (count me in), it would be quite easy to change the built in templates, so that you would get some nice interfaces to work against. Very nice. <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">Also, Eric demoed a Code-Only, or \"persistance ignorance\" support in EF4. With this, you can take some objects, and persist them to a database, and the framework will itself create a database, the schema, and do CRUD operations. While nice for demos, I really can't see the application of this for real-world projects larger than toy-size. <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">It seems that EF4 is now a serious contender in the ORM world, and I think I will try it out on a real project when I get the chance (of course, it probably needs to go out of beta first). <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">  <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">Next session was about ASP .NET 4 and Visual Studio 2010 improvements. This was a very interesting lap around a lot of small improvements and features, that will life better and easier for the web developer. This includes an inheritable viewstate setting, better controls for ClientID generation and better standards-compliant markup from the built in controls; as well as better control over the markup that is emitted. Also, a Code nugget syntax for emitting HTML encoded strings has been added, which will prove handy. One of the things that looks really good is the improved Publish dialog in 2010 and the support for Web.config merges, so that you can have one .config to rule them all, but keep transformations that you can apply automagically when deploying. Together this means, that you can click a button and get your website deployed. I didn't have the chance to ask if this is supported as MSBuild tasks as well, but I suspect it is. I'll have to track down someone who can answer this during the conference. Shouldn't be too hard :-) <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">  <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">The rest of the day was keynote sessions. First was the \"Developer General\" session, by Jason Zander (project manager for the Visual Studio team). Jason talked about the development ecosystem and the effort Microsoft has put into VS 2010 to make a better development experience. This includes push-of-a-button deployment of Sharepoint parts, instead of 22 manual steps. He might have been exaggerating about the 22 steps, but is sounds nice. Oh, he also announced that <a href=\"http://blogs.msdn.com/jasonz/archive/2009/11/09/announced-at-teched-europe-teamprise-client-suite-acquisition.aspx\" target=\"_blank\">Microsoft has acquired the Teamprise client suite</a>, which makes it possible for non-Windows, non-Micrsoft, non-.NET devs to work with Team Foundation Server. <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'\">Lastly there was the \"real\" keynote by Stephen Elop, President of Microsoft Business Division. This was a typically \"fluffy\" talk which did not have much real content for developers. It was interesting though, and he demoed some new features in Windows Server 2008 R2 and Exchange Server 2010. He got the biggest applause when demonstrating, that Outlook Web Access 2010 now runs seamlessly in Firefox &amp; friends :-)</span> </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'\">Tomorrow, I have another busy day lined up. Just have to figure out how to be 3 places at once ...</span> </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\">\n        <p>\n        </p>\n        <span style=\"FONT-FAMILY: Calibri\"> </span> </span>\n    </p> <p></p>","Body":"\n\t\t<p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">Today was my first day at TechEd Europe 2009 in Berlin, after having arrived to the hotel on sunday evening. I chose to drive to Berlin myself from Denmark, which went just fine, until I scratched a rim on the way down into a very narrow passage to the parking garage. Damn. The TechEd experience so far has been just great, although there was some queue for registration this morning. I guess it is hard to avoid when you have 7000+ people attending an event, and they all, more or less, arrive at the same time. <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">My first session at TechEd was titled \"ADO.NET Entity Framework in Microsoft Visual Studio 2010 and Microsoft .NET Framework 4\" and was about Entity Framework 4 with speaker Eric Nelson. Wait-a-minute, you might say, because last version of the EF was the initial release, 1.0. It seems that the EF has skipped a couple of versions so that it gets the same version number as the .NET Framework it ships with. That being said, the EF ships some of it's features as a separate download, but the core should be in .NET FX 4. <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">So what's to say about EF4 ? Well, it seems that Microsoft has fixed it. By that I mean that many of the problems that existed with the initial version has been eliminated or the experience has been improved. This includes better tooling and designer support. There is support for model-first development, where you drag-and-drop your model in a designer, and lets the framework generate the database for you (technically speaking, this also existed in v1, but it required you to do a lot of manual stuff, or as Eric Nelson put it, you would be in for a whole world of pain taking that route. <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">Something I am more excited about is the ability to control the generated code using T4 templates. This enables different scenarious such as POCO objects, which was missing from v1. There are some built-in templates so you don't need to write them from scratch. If you adhere to the \"develop against an interface\" to \"do TDD\" group of people (count me in), it would be quite easy to change the built in templates, so that you would get some nice interfaces to work against. Very nice. <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">Also, Eric demoed a Code-Only, or \"persistance ignorance\" support in EF4. With this, you can take some objects, and persist them to a database, and the framework will itself create a database, the schema, and do CRUD operations. While nice for demos, I really can't see the application of this for real-world projects larger than toy-size. <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">It seems that EF4 is now a serious contender in the ORM world, and I think I will try it out on a real project when I get the chance (of course, it probably needs to go out of beta first). <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">  <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">Next session was about ASP .NET 4 and Visual Studio 2010 improvements. This was a very interesting lap around a lot of small improvements and features, that will life better and easier for the web developer. This includes an inheritable viewstate setting, better controls for ClientID generation and better standards-compliant markup from the built in controls; as well as better control over the markup that is emitted. Also, a Code nugget syntax for emitting HTML encoded strings has been added, which will prove handy. One of the things that looks really good is the improved Publish dialog in 2010 and the support for Web.config merges, so that you can have one .config to rule them all, but keep transformations that you can apply automagically when deploying. Together this means, that you can click a button and get your website deployed. I didn't have the chance to ask if this is supported as MSBuild tasks as well, but I suspect it is. I'll have to track down someone who can answer this during the conference. Shouldn't be too hard :-) <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">  <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'; mso-ansi-language: EN-US\">The rest of the day was keynote sessions. First was the \"Developer General\" session, by Jason Zander (project manager for the Visual Studio team). Jason talked about the development ecosystem and the effort Microsoft has put into VS 2010 to make a better development experience. This includes push-of-a-button deployment of Sharepoint parts, instead of 22 manual steps. He might have been exaggerating about the 22 steps, but is sounds nice. Oh, he also announced that <a href=\"http://blogs.msdn.com/jasonz/archive/2009/11/09/announced-at-teched-europe-teamprise-client-suite-acquisition.aspx\" target=\"_blank\">Microsoft has acquired the Teamprise client suite</a>, which makes it possible for non-Windows, non-Micrsoft, non-.NET devs to work with Team Foundation Server. <p></p></span>\n    </p>\n    <p>\n    </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'\">Lastly there was the \"real\" keynote by Stephen Elop, President of Microsoft Business Division. This was a typically \"fluffy\" talk which did not have much real content for developers. It was interesting though, and he demoed some new features in Windows Server 2008 R2 and Exchange Server 2010. He got the biggest applause when demonstrating, that Outlook Web Access 2010 now runs seamlessly in Firefox &amp; friends :-)</span> </p>\n    <p>\n      <span style=\"FONT-FAMILY: 'Tahoma','sans-serif'\">Tomorrow, I have another busy day lined up. Just have to figure out how to be 3 places at once ...</span> </p>\n    <p style=\"MARGIN: 0cm 0cm 10pt\" class=\"MsoNormal\">\n      <span style=\"mso-ansi-language: EN-US\">\n        <p>\n        </p>\n        <span style=\"FONT-FAMILY: Calibri\"> </span> </span>\n    </p> <p></p>","Author":"Dennis Riis","Published":"2009-11-09T22:06:00.0000000Z","IsPublished":true,"Comments":[],"Tags":[".NET"],"Created":"2009-11-09T22:06:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":16,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":56,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/8","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.8179181Z","@etag":"00000001-0000-0800-0000-000000000010","Non-Authoritative-Information":false}},{"Title":"Making The HTC Touch Diamond Vibrate","UrlName":"Making-The-HTC-Touch-Diamond-Vibrate","BodyHtml":"\n\t\t<p>One of the minor problems I had when making the <a href=\"~/link.aspx?_id=86BB00B0ED614F7DA540A61BE37D2CB2&amp;_z=z\">Stopwatch for my HTC Touch Diamond</a>, was to make the phone vibrate automatically. It seems there are no managed way of doing this. However, after a bit of googling around, I found out that the vibrator typically can be addressed as a LED object using the Open NET CF Framework. So I decided to throw together a tiny wrapper class around this functionality, so I can use it generally in the future. The most useful thing here, I think, is the ability to have the phone vibrate using a given on-off pattern in a fire-and-forget pattern that works well when programming Compact Framework forms.</p>\n    <p>This is the simple Vibrator class:</p>\n    <p>\n      <!-- code formatted by http://manoli.net/csharpformat/ -->\n    </p>\n    <div class=\"csharpcode\">\n      <pre>        <span class=\"lnum\"> 1: </span><span class=\"kwrd\">using</span> System;</pre>\n      <pre>        <span class=\"lnum\"> 2: </span><span class=\"kwrd\">using</span> System.Threading;</pre>\n      <pre>        <span class=\"lnum\"> 3: </span><span class=\"kwrd\">using</span> OpenNETCF.WindowsCE.Notification;</pre>\n      <pre>        <span class=\"lnum\"> 4: </span> </pre>\n      <pre>        <span class=\"lnum\"> 5: </span> <span class=\"kwrd\">namespace</span> dr.WM.Common</pre>\n      <pre>        <span class=\"lnum\"> 6: </span>{</pre>\n      <pre>        <span class=\"lnum\"> 7: </span>    <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 8: </span>    <span class=\"rem\">/// Vibrator class. Works on HTC Touch Diamond, not tested anywhere else.</span></pre>\n      <pre>        <span class=\"lnum\"> 9: </span>    <span class=\"rem\">/// (Mostly, The LED index could be different on other devices.)</span></pre>\n      <pre>        <span class=\"lnum\"> 10: </span>    <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 11: </span>    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> Vibrator</pre>\n      <pre>        <span class=\"lnum\"> 12: </span>    {</pre>\n      <pre>        <span class=\"lnum\"> 13: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 14: </span>        <span class=\"rem\">/// Index of the Vibrator LED.</span></pre>\n      <pre>        <span class=\"lnum\"> 15: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 16: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">const</span> <span class=\"kwrd\">int</span> VibratorLedIndex = 1;</pre>\n      <pre>        <span class=\"lnum\"> 17: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 18: </span>        <span class=\"rem\">/// LED instance.</span></pre>\n      <pre>        <span class=\"lnum\"> 19: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 20: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Led led = <span class=\"kwrd\">new</span> Led();</pre>\n      <pre>        <span class=\"lnum\"> 21: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 22: </span>        <span class=\"rem\">/// Whether the Run thread is allowed to run.</span></pre>\n      <pre>        <span class=\"lnum\"> 23: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 24: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">bool</span> allowRun = <span class=\"kwrd\">false</span>;</pre>\n      <pre>        <span class=\"lnum\"> 25: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 26: </span>        <span class=\"rem\">/// Starts this instance.</span></pre>\n      <pre>        <span class=\"lnum\"> 27: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 28: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> Start()</pre>\n      <pre>        <span class=\"lnum\"> 29: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 30: </span>            allowRun = <span class=\"kwrd\">true</span>;</pre>\n      <pre>        <span class=\"lnum\"> 31: </span>            led.SetLedStatus(VibratorLedIndex,Led.LedState.Blink);</pre>\n      <pre>        <span class=\"lnum\"> 32: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 33: </span> </pre>\n      <pre>        <span class=\"lnum\"> 34: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 35: </span>        <span class=\"rem\">/// Stops this instance.</span></pre>\n      <pre>        <span class=\"lnum\"> 36: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 37: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> Stop()</pre>\n      <pre>        <span class=\"lnum\"> 38: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 39: </span>            allowRun = <span class=\"kwrd\">false</span>;</pre>\n      <pre>        <span class=\"lnum\"> 40: </span>            led.SetLedStatus(VibratorLedIndex, Led.LedState.Off);            </pre>\n      <pre>        <span class=\"lnum\"> 41: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 42: </span> </pre>\n      <pre>        <span class=\"lnum\"> 43: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 44: </span>        <span class=\"rem\">/// Starts a vibrating sequence by specifying the vibrate and pause times.</span></pre>\n      <pre>        <span class=\"lnum\"> 45: </span>        <span class=\"rem\">/// Vibration will run until the Stop method is called.</span></pre>\n      <pre>        <span class=\"lnum\"> 46: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 47: </span>        <span class=\"rem\">/// &lt;param name=\"msVibrate\"&gt;The vibrate time in milliseconds.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 48: </span>        <span class=\"rem\">/// &lt;param name=\"msPause\"&gt;The pause time in milliseconds.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 49: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> StartSequence(<span class=\"kwrd\">int</span> msVibrate, <span class=\"kwrd\">int</span> msPause)</pre>\n      <pre>        <span class=\"lnum\"> 50: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 51: </span>            StartSequence(msVibrate,msPause,0);</pre>\n      <pre>        <span class=\"lnum\"> 52: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 53: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 54: </span>        <span class=\"rem\">/// Starts a vibrating sequence by specifying the vibrate and pause times.</span></pre>\n      <pre>        <span class=\"lnum\"> 55: </span>        <span class=\"rem\">/// Vibration will run for the specified total time, or until the Stop method is called.</span></pre>\n      <pre>        <span class=\"lnum\"> 56: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 57: </span>        <span class=\"rem\">/// &lt;param name=\"msVibrate\"&gt;The vibrate time in milliseconds.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 58: </span>        <span class=\"rem\">/// &lt;param name=\"msPause\"&gt;The pause time in milliseconds.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 59: </span>        <span class=\"rem\">/// &lt;param name=\"totalLength\"&gt;The total time to vibrate.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 60: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> StartSequence(<span class=\"kwrd\">int</span> msVibrate, <span class=\"kwrd\">int</span> msPause, <span class=\"kwrd\">int</span> totalLength)</pre>\n      <pre>        <span class=\"lnum\"> 61: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 62: </span>            allowRun = <span class=\"kwrd\">true</span>;</pre>\n      <pre>        <span class=\"lnum\"> 63: </span>            ThreadPool.QueueUserWorkItem(Run,</pre>\n      <pre>        <span class=\"lnum\"> 64: </span>                                         <span class=\"kwrd\">new</span> RunState</pre>\n      <pre>        <span class=\"lnum\"> 65: </span>                                             {VibrateTime = msVibrate, PauseTime = msPause, TotalTime = totalLength});</pre>\n      <pre>        <span class=\"lnum\"> 66: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 67: </span> </pre>\n      <pre>        <span class=\"lnum\"> 68: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 69: </span>        <span class=\"rem\">/// Thread worker for a vibrating sequence.</span></pre>\n      <pre>        <span class=\"lnum\"> 70: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 71: </span>        <span class=\"rem\">/// &lt;param name=\"state\"&gt;The state.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 72: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> Run(<span class=\"kwrd\">object</span> state)</pre>\n      <pre>        <span class=\"lnum\"> 73: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 74: </span>            <span class=\"kwrd\">long</span> begin = Environment.TickCount;</pre>\n      <pre>        <span class=\"lnum\"> 75: </span>            RunState runState = (RunState)state;</pre>\n      <pre>        <span class=\"lnum\"> 76: </span>            <span class=\"kwrd\">while</span>(allowRun &amp;&amp; (runState.TotalTime &lt;= 0 || Environment.TickCount - begin &lt; runState.TotalTime))</pre>\n      <pre>        <span class=\"lnum\"> 77: </span>            {</pre>\n      <pre>        <span class=\"lnum\"> 78: </span>                led.SetLedStatus(VibratorLedIndex, Led.LedState.Blink);</pre>\n      <pre>        <span class=\"lnum\"> 79: </span>                Thread.Sleep(runState.VibrateTime);</pre>\n      <pre>        <span class=\"lnum\"> 80: </span>                led.SetLedStatus(VibratorLedIndex, Led.LedState.Off);</pre>\n      <pre>        <span class=\"lnum\"> 81: </span>                Thread.Sleep(runState.PauseTime);</pre>\n      <pre>        <span class=\"lnum\"> 82: </span>            }</pre>\n      <pre>        <span class=\"lnum\"> 83: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 84: </span> </pre>\n      <pre>        <span class=\"lnum\"> 85: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 86: </span>        <span class=\"rem\">/// Helper for passing vibration state to the worker thread.</span></pre>\n      <pre>        <span class=\"lnum\"> 87: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 88: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">struct</span> RunState</pre>\n      <pre>        <span class=\"lnum\"> 89: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 90: </span>            <span class=\"kwrd\">public</span> <span class=\"kwrd\">int</span> VibrateTime { get; set; }</pre>\n      <pre>        <span class=\"lnum\"> 91: </span>            <span class=\"kwrd\">public</span> <span class=\"kwrd\">int</span> PauseTime { get; set; }</pre>\n      <pre>        <span class=\"lnum\"> 92: </span>            <span class=\"kwrd\">public</span> <span class=\"kwrd\">int</span> TotalTime { get; set; }</pre>\n      <pre>        <span class=\"lnum\"> 93: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 94: </span>    }</pre>\n      <pre>        <span class=\"lnum\"> 95: </span>}</pre>\n    </div>\n    <p>\n    </p>\n    <p>Please note that this might (propably) will not work on other devices, since the vibrator might not be on the same LED index. One could refactor the class and make a couple of vibrator on/off virtual protected methods, and call these from the Start / Stop methods. That way, it could be easy to make the class general enough for use on other devices, you would just need to implement the start and stop operations. However, there might be an easier way of doing this using an unmanaged API (actually I hope there is, since collecting info about all types of devices in order to figure out how to fire the vibrator, seems as an unfeasible task).</p>\n    <p>It seems that the <a title=\"Klaxon for Windows Mobile\" href=\"http://www.koushikdutta.com/search/label/Klaxon\">Klaxon Open-Source alarm clock for Windows Mobile has just been made Open Source</a>. I think I will have a look at the source to see whether my way of using the vibrator is feasible, or the Klaxon author uses a better approach ;-) </p>","Body":"\n\t\t<p>One of the minor problems I had when making the <a href=\"~/link.aspx?_id=86BB00B0ED614F7DA540A61BE37D2CB2&amp;_z=z\">Stopwatch for my HTC Touch Diamond</a>, was to make the phone vibrate automatically. It seems there are no managed way of doing this. However, after a bit of googling around, I found out that the vibrator typically can be addressed as a LED object using the Open NET CF Framework. So I decided to throw together a tiny wrapper class around this functionality, so I can use it generally in the future. The most useful thing here, I think, is the ability to have the phone vibrate using a given on-off pattern in a fire-and-forget pattern that works well when programming Compact Framework forms.</p>\n    <p>This is the simple Vibrator class:</p>\n    <p>\n      <!-- code formatted by http://manoli.net/csharpformat/ -->\n    </p>\n    <div class=\"csharpcode\">\n      <pre>        <span class=\"lnum\"> 1: </span><span class=\"kwrd\">using</span> System;</pre>\n      <pre>        <span class=\"lnum\"> 2: </span><span class=\"kwrd\">using</span> System.Threading;</pre>\n      <pre>        <span class=\"lnum\"> 3: </span><span class=\"kwrd\">using</span> OpenNETCF.WindowsCE.Notification;</pre>\n      <pre>        <span class=\"lnum\"> 4: </span> </pre>\n      <pre>        <span class=\"lnum\"> 5: </span> <span class=\"kwrd\">namespace</span> dr.WM.Common</pre>\n      <pre>        <span class=\"lnum\"> 6: </span>{</pre>\n      <pre>        <span class=\"lnum\"> 7: </span>    <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 8: </span>    <span class=\"rem\">/// Vibrator class. Works on HTC Touch Diamond, not tested anywhere else.</span></pre>\n      <pre>        <span class=\"lnum\"> 9: </span>    <span class=\"rem\">/// (Mostly, The LED index could be different on other devices.)</span></pre>\n      <pre>        <span class=\"lnum\"> 10: </span>    <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 11: </span>    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> Vibrator</pre>\n      <pre>        <span class=\"lnum\"> 12: </span>    {</pre>\n      <pre>        <span class=\"lnum\"> 13: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 14: </span>        <span class=\"rem\">/// Index of the Vibrator LED.</span></pre>\n      <pre>        <span class=\"lnum\"> 15: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 16: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">const</span> <span class=\"kwrd\">int</span> VibratorLedIndex = 1;</pre>\n      <pre>        <span class=\"lnum\"> 17: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 18: </span>        <span class=\"rem\">/// LED instance.</span></pre>\n      <pre>        <span class=\"lnum\"> 19: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 20: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Led led = <span class=\"kwrd\">new</span> Led();</pre>\n      <pre>        <span class=\"lnum\"> 21: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 22: </span>        <span class=\"rem\">/// Whether the Run thread is allowed to run.</span></pre>\n      <pre>        <span class=\"lnum\"> 23: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 24: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">bool</span> allowRun = <span class=\"kwrd\">false</span>;</pre>\n      <pre>        <span class=\"lnum\"> 25: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 26: </span>        <span class=\"rem\">/// Starts this instance.</span></pre>\n      <pre>        <span class=\"lnum\"> 27: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 28: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> Start()</pre>\n      <pre>        <span class=\"lnum\"> 29: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 30: </span>            allowRun = <span class=\"kwrd\">true</span>;</pre>\n      <pre>        <span class=\"lnum\"> 31: </span>            led.SetLedStatus(VibratorLedIndex,Led.LedState.Blink);</pre>\n      <pre>        <span class=\"lnum\"> 32: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 33: </span> </pre>\n      <pre>        <span class=\"lnum\"> 34: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 35: </span>        <span class=\"rem\">/// Stops this instance.</span></pre>\n      <pre>        <span class=\"lnum\"> 36: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 37: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> Stop()</pre>\n      <pre>        <span class=\"lnum\"> 38: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 39: </span>            allowRun = <span class=\"kwrd\">false</span>;</pre>\n      <pre>        <span class=\"lnum\"> 40: </span>            led.SetLedStatus(VibratorLedIndex, Led.LedState.Off);            </pre>\n      <pre>        <span class=\"lnum\"> 41: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 42: </span> </pre>\n      <pre>        <span class=\"lnum\"> 43: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 44: </span>        <span class=\"rem\">/// Starts a vibrating sequence by specifying the vibrate and pause times.</span></pre>\n      <pre>        <span class=\"lnum\"> 45: </span>        <span class=\"rem\">/// Vibration will run until the Stop method is called.</span></pre>\n      <pre>        <span class=\"lnum\"> 46: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 47: </span>        <span class=\"rem\">/// &lt;param name=\"msVibrate\"&gt;The vibrate time in milliseconds.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 48: </span>        <span class=\"rem\">/// &lt;param name=\"msPause\"&gt;The pause time in milliseconds.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 49: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> StartSequence(<span class=\"kwrd\">int</span> msVibrate, <span class=\"kwrd\">int</span> msPause)</pre>\n      <pre>        <span class=\"lnum\"> 50: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 51: </span>            StartSequence(msVibrate,msPause,0);</pre>\n      <pre>        <span class=\"lnum\"> 52: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 53: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 54: </span>        <span class=\"rem\">/// Starts a vibrating sequence by specifying the vibrate and pause times.</span></pre>\n      <pre>        <span class=\"lnum\"> 55: </span>        <span class=\"rem\">/// Vibration will run for the specified total time, or until the Stop method is called.</span></pre>\n      <pre>        <span class=\"lnum\"> 56: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 57: </span>        <span class=\"rem\">/// &lt;param name=\"msVibrate\"&gt;The vibrate time in milliseconds.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 58: </span>        <span class=\"rem\">/// &lt;param name=\"msPause\"&gt;The pause time in milliseconds.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 59: </span>        <span class=\"rem\">/// &lt;param name=\"totalLength\"&gt;The total time to vibrate.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 60: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> StartSequence(<span class=\"kwrd\">int</span> msVibrate, <span class=\"kwrd\">int</span> msPause, <span class=\"kwrd\">int</span> totalLength)</pre>\n      <pre>        <span class=\"lnum\"> 61: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 62: </span>            allowRun = <span class=\"kwrd\">true</span>;</pre>\n      <pre>        <span class=\"lnum\"> 63: </span>            ThreadPool.QueueUserWorkItem(Run,</pre>\n      <pre>        <span class=\"lnum\"> 64: </span>                                         <span class=\"kwrd\">new</span> RunState</pre>\n      <pre>        <span class=\"lnum\"> 65: </span>                                             {VibrateTime = msVibrate, PauseTime = msPause, TotalTime = totalLength});</pre>\n      <pre>        <span class=\"lnum\"> 66: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 67: </span> </pre>\n      <pre>        <span class=\"lnum\"> 68: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 69: </span>        <span class=\"rem\">/// Thread worker for a vibrating sequence.</span></pre>\n      <pre>        <span class=\"lnum\"> 70: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 71: </span>        <span class=\"rem\">/// &lt;param name=\"state\"&gt;The state.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 72: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> Run(<span class=\"kwrd\">object</span> state)</pre>\n      <pre>        <span class=\"lnum\"> 73: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 74: </span>            <span class=\"kwrd\">long</span> begin = Environment.TickCount;</pre>\n      <pre>        <span class=\"lnum\"> 75: </span>            RunState runState = (RunState)state;</pre>\n      <pre>        <span class=\"lnum\"> 76: </span>            <span class=\"kwrd\">while</span>(allowRun &amp;&amp; (runState.TotalTime &lt;= 0 || Environment.TickCount - begin &lt; runState.TotalTime))</pre>\n      <pre>        <span class=\"lnum\"> 77: </span>            {</pre>\n      <pre>        <span class=\"lnum\"> 78: </span>                led.SetLedStatus(VibratorLedIndex, Led.LedState.Blink);</pre>\n      <pre>        <span class=\"lnum\"> 79: </span>                Thread.Sleep(runState.VibrateTime);</pre>\n      <pre>        <span class=\"lnum\"> 80: </span>                led.SetLedStatus(VibratorLedIndex, Led.LedState.Off);</pre>\n      <pre>        <span class=\"lnum\"> 81: </span>                Thread.Sleep(runState.PauseTime);</pre>\n      <pre>        <span class=\"lnum\"> 82: </span>            }</pre>\n      <pre>        <span class=\"lnum\"> 83: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 84: </span> </pre>\n      <pre>        <span class=\"lnum\"> 85: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 86: </span>        <span class=\"rem\">/// Helper for passing vibration state to the worker thread.</span></pre>\n      <pre>        <span class=\"lnum\"> 87: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 88: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">struct</span> RunState</pre>\n      <pre>        <span class=\"lnum\"> 89: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 90: </span>            <span class=\"kwrd\">public</span> <span class=\"kwrd\">int</span> VibrateTime { get; set; }</pre>\n      <pre>        <span class=\"lnum\"> 91: </span>            <span class=\"kwrd\">public</span> <span class=\"kwrd\">int</span> PauseTime { get; set; }</pre>\n      <pre>        <span class=\"lnum\"> 92: </span>            <span class=\"kwrd\">public</span> <span class=\"kwrd\">int</span> TotalTime { get; set; }</pre>\n      <pre>        <span class=\"lnum\"> 93: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 94: </span>    }</pre>\n      <pre>        <span class=\"lnum\"> 95: </span>}</pre>\n    </div>\n    <p>\n    </p>\n    <p>Please note that this might (propably) will not work on other devices, since the vibrator might not be on the same LED index. One could refactor the class and make a couple of vibrator on/off virtual protected methods, and call these from the Start / Stop methods. That way, it could be easy to make the class general enough for use on other devices, you would just need to implement the start and stop operations. However, there might be an easier way of doing this using an unmanaged API (actually I hope there is, since collecting info about all types of devices in order to figure out how to fire the vibrator, seems as an unfeasible task).</p>\n    <p>It seems that the <a title=\"Klaxon for Windows Mobile\" href=\"http://www.koushikdutta.com/search/label/Klaxon\">Klaxon Open-Source alarm clock for Windows Mobile has just been made Open Source</a>. I think I will have a look at the source to see whether my way of using the vibrator is feasible, or the Klaxon author uses a better approach ;-) </p>","Author":"Dennis Riis","Published":"2008-10-26T20:41:00.0000000Z","IsPublished":true,"Comments":[],"Tags":["Compact Framework","Windows Mobile",".NET"],"Created":"2008-10-26T20:41:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":17,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":57,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/13","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.8189180Z","@etag":"00000001-0000-0800-0000-000000000011","Non-Authoritative-Information":false}},{"Title":"A Stopwatch for Windows Mobile","UrlName":"A-Stopwatch-for-Windows-Mobile","BodyHtml":"\n\t\t<p>I have got a new mobile phone, a <a href=\"http://www.htc.com/europe/product/touchdiamond/overview.html\">HTC Touch Diamond</a>. Besides the fact that it has a sleek design and is much easier to work with when reading email and browsing the web than my old phone.</p>\n    <p>However, that it is not the only reason for buying the Diamond. Another, very important reason, is that it runs Windows Mobile 6.1 - and therefore I can write my own programs for it using pretty much the same toolset as I use for any other .NET program. Granted, there are stuff missing in the Compact Framework compared to the full-blown framework (Expression trees anyone ?), but it is normally quite easy to find alternatives, and the Compact Framework does make it quite easy to program the device.</p>\n    <p>My first application for the Touch is a simple Stopwatch program. I wrote it, because there was no stopwatch and/or timer program on the Touch when I got it, so why not write my own ;-) The application it is quite simple, but I learned quite a deal about the device and the Compact Framework while developing it. It essentially relies on the <a href=\"http://msdn.microsoft.com/en-us/library/system.environment.tickcount.aspx\">Environment.TickCount </a>counter to measure time, so it might not be 100% accurate - but for my needs (such as heating pizza's), it is quite sufficient.</p>\n    <p>If anyone's interested, <a href=\"~/media/772D64F4CBFA4174B500F6807CA9353E.ashx\">you may download the source from here</a>. If you want to compile it, you will need a copy of the <a href=\"http://www.opennetcf.com/\">OpenNET CF Framework</a>, because I needed to use some parts of it for making the phone vibrate when the alarm goes off. (It could be replaced with some P/Invoke calls, but i got lazy ;-) </p>\n    <p>The application itself has the following features:</p>\n    <p>\n    </p>\n    <ul>\n      <li>Simple stopwatch</li>\n      <li>Timer with alert (vibration and sound)</li>\n      <li>Configurable alarm sound (only .wav files, sorry).</li>\n      <li>Settings are remembered (stored in Application Data)</li>\n      <p>\n      </p>\n    </ul>","Body":"\n\t\t<p>I have got a new mobile phone, a <a href=\"http://www.htc.com/europe/product/touchdiamond/overview.html\">HTC Touch Diamond</a>. Besides the fact that it has a sleek design and is much easier to work with when reading email and browsing the web than my old phone.</p>\n    <p>However, that it is not the only reason for buying the Diamond. Another, very important reason, is that it runs Windows Mobile 6.1 - and therefore I can write my own programs for it using pretty much the same toolset as I use for any other .NET program. Granted, there are stuff missing in the Compact Framework compared to the full-blown framework (Expression trees anyone ?), but it is normally quite easy to find alternatives, and the Compact Framework does make it quite easy to program the device.</p>\n    <p>My first application for the Touch is a simple Stopwatch program. I wrote it, because there was no stopwatch and/or timer program on the Touch when I got it, so why not write my own ;-) The application it is quite simple, but I learned quite a deal about the device and the Compact Framework while developing it. It essentially relies on the <a href=\"http://msdn.microsoft.com/en-us/library/system.environment.tickcount.aspx\">Environment.TickCount </a>counter to measure time, so it might not be 100% accurate - but for my needs (such as heating pizza's), it is quite sufficient.</p>\n    <p>If anyone's interested, <a href=\"~/media/772D64F4CBFA4174B500F6807CA9353E.ashx\">you may download the source from here</a>. If you want to compile it, you will need a copy of the <a href=\"http://www.opennetcf.com/\">OpenNET CF Framework</a>, because I needed to use some parts of it for making the phone vibrate when the alarm goes off. (It could be replaced with some P/Invoke calls, but i got lazy ;-) </p>\n    <p>The application itself has the following features:</p>\n    <p>\n    </p>\n    <ul>\n      <li>Simple stopwatch</li>\n      <li>Timer with alert (vibration and sound)</li>\n      <li>Configurable alarm sound (only .wav files, sorry).</li>\n      <li>Settings are remembered (stored in Application Data)</li>\n      <p>\n      </p>\n    </ul>","Author":"Dennis Riis","Published":"2008-10-26T20:21:00.0000000Z","IsPublished":true,"Comments":[],"Tags":["General technology","Compact Framework","Windows Mobile",".NET"],"Created":"2008-10-26T20:21:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":18,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":58,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/14","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.8199238Z","@etag":"00000001-0000-0800-0000-000000000012","Non-Authoritative-Information":false}},{"Title":"Last Day at Jaoo","UrlName":"Last-Day-at-Jaoo","BodyHtml":"Wednesday was the last official day of the JAOO conference, and once again it featured a bunch of interesting talks. I attended these: <p><strong>50 in 50<br /><span style=\"font-weight: normal; \">This was todays keynote by Richard P. Gabriel and Guy L. Steele Jr. Before the talk, there had been some speculations about the title; was it 50 programming languages in 50 minutes ? Or what did it mean exactly ? It turned out to be 50 comments about programming and programming languages, in 50 minutes. These focused on the history of programming and did so in an entertaining and enlightening manner. This was a certainly a great talk - and for a \"young\" programmer like my self what was not even born when Ada and Algol 60 appeared; it provided also some historical insight. Only downside to this talk, is that the schedule was affected by the fact that it was more like 50 in 75 - the talk took about 75 minutes; but with this quality of technical and on the same time entertaining talk, that does not really matter for me.</span></strong></p><strong>Five Considerations For Software Developers<br /><span style=\"font-weight: normal; \">This was also a dual talk with two presenters - Frank Bushmann and Kevlin Henney. They talked about architecure and specifically five considerations that drives design quality. Those were:<br />\n<ul>\n<li>Economy - the idea that software must be built for a reason and should not have an complicated or elaborate design just because it *might* be needed in the future.</li>\n<li>Visibility - in the sense that the design must be easily discoverable.</li>\n<li>Spacing - basically the idea to separate concerns and make sure not to bake the design into deep inheritance hierarchies that xould better be expressed with composition.</li>\n<li>Symmetry - in that API's should be symmetric with the example that if you can create something with a Factory, said Factory should also be able to destroy it</li>\n<li>Emergence</li>\n</ul>\n</span><br /></strong><strong><br /></strong><div><strong>LINQ + New Microsoft Things<br /><span style=\"font-weight: normal; \">This talks title is actually wrong, since Erik Meijer primarily talked about LINQ, and very little about \"New Microsoft Things\". To be fair, he did not have much time to cover it all since the talk got started late because of the schedule slip at the keynote earlier on the day. LINQ was covered well, however, and from a slightly different angle than Anders Hejlsberg talked about earlier in the week. Erik talked about Expression trees and how they represent code as data. This makes it possible to hand an expression tree to an interpreter for a given query language, that can then execute it in the given domain. This is why we (in theory) could forget all other query languages such as XQuery or SQL, and only use Linq-to-Xxx - given that someone writes a Xxx extension to LINQ, of course.</span><br /></strong><strong><br /></strong></div><div><strong>Real World Refactoring<br /><span style=\"font-weight: normal; \">This talk about Refactoring by Neal Ford addressed the challenges that goes into actually performing refactorings in code. It was very hands-on and offered some good advice on how to structure refactorings. One of the best pieces of advice, I think, was to time-restrain major (multi-day) refactoring efforts to an estimated period of time before-hand. If you cannot complete the planned refactoring in the planned time, take the time to rethink the problem, and find out if you are doing it right. If not, you can throw the refactored code away and try again, instead of keeping on a track, that might resolve to more complicated code than before; because new knowledge has beeng gained during the process or because the refactorings was not well enough planned and thought out in advance.</span><br /></strong><strong><br /></strong></div><div><strong>JavaScript As An Assembly Language<br /><span style=\"font-weight: normal; \">This second presentation by Erik Meijer was primarily about Volta, an exciting new technology from Microsoft's Live Labs. The project basically promises to make it easier to make multi-tier applications that can run on the server and work with any client, with parts being executed on the client. This is done by decorating methods with custom attributes, that marks them for running on the client. The Volta compiler will then \"compile\" those to javascript, that can run on any client (or, if Silverlight is available on the client, the code will run in Silverlight as .NET IL). Erik explained the technology behind, and how they generate javascript code and the various problems involved in that. I do not think that this technology is quite ready to be used in the wild yet, but it should definitely be interesting to see how it evolves in the future. The documentation site on Live Labs seems to be down for the moment, however, <span style=\"\"><a href=\"http://weblogs.asp.net/mschwarz/archive/2008/01/03/volta-microsoft-live-labs.aspx\">this blogpost</a></span> also explains the technology in more detail.</span><br /></strong><strong><br /></strong></div><div><strong>Concurrent Programming with Concurrent Extensions to .NET<br /><span style=\"font-weight: normal; \">In this talk, Joe Duffy, gave an introduction to the parallel extensions to .NET, a new API for writing concurrent applications with .NET. These extension is in CTP right now (so it's preview technology, not recommandable for production use). Joe promised though, that these APIs will be part of the <span style=\"\"><a href=\"http://en.wikipedia.org/wiki/.NET_Framework#.NET_Framework_4.0\">.NET Framework version 4 release</a></span>. These new APIs promise to make it easier to write concurrent applications with .NET with little overhad, both mentally for the programmer, but also performance-wise for the machine. The presentation featured running demos and code, and I believe that the new APIs are quite well-designed and that there is definitely a need for this kind of API in todays world of multi-core hardware. However, as Joe pointed out, there is no such thing as a free lunch; and even when using this API, of course you need to think hard over concurrency issues and side-effects before you can put it to use. The system makes it easier for you to program concurrently; but you can still fail badly if you do not understand what it does under the covers.</span></strong></div>","Body":"Wednesday was the last official day of the JAOO conference, and once again it featured a bunch of interesting talks. I attended these: <p><strong>50 in 50<br /><span style=\"font-weight: normal; \">This was todays keynote by Richard P. Gabriel and Guy L. Steele Jr. Before the talk, there had been some speculations about the title; was it 50 programming languages in 50 minutes ? Or what did it mean exactly ? It turned out to be 50 comments about programming and programming languages, in 50 minutes. These focused on the history of programming and did so in an entertaining and enlightening manner. This was a certainly a great talk - and for a \"young\" programmer like my self what was not even born when Ada and Algol 60 appeared; it provided also some historical insight. Only downside to this talk, is that the schedule was affected by the fact that it was more like 50 in 75 - the talk took about 75 minutes; but with this quality of technical and on the same time entertaining talk, that does not really matter for me.</span></strong></p><strong>Five Considerations For Software Developers<br /><span style=\"font-weight: normal; \">This was also a dual talk with two presenters - Frank Bushmann and Kevlin Henney. They talked about architecure and specifically five considerations that drives design quality. Those were:<br />\n<ul>\n<li>Economy - the idea that software must be built for a reason and should not have an complicated or elaborate design just because it *might* be needed in the future.</li>\n<li>Visibility - in the sense that the design must be easily discoverable.</li>\n<li>Spacing - basically the idea to separate concerns and make sure not to bake the design into deep inheritance hierarchies that xould better be expressed with composition.</li>\n<li>Symmetry - in that API's should be symmetric with the example that if you can create something with a Factory, said Factory should also be able to destroy it</li>\n<li>Emergence</li>\n</ul>\n</span><br /></strong><strong><br /></strong><div><strong>LINQ + New Microsoft Things<br /><span style=\"font-weight: normal; \">This talks title is actually wrong, since Erik Meijer primarily talked about LINQ, and very little about \"New Microsoft Things\". To be fair, he did not have much time to cover it all since the talk got started late because of the schedule slip at the keynote earlier on the day. LINQ was covered well, however, and from a slightly different angle than Anders Hejlsberg talked about earlier in the week. Erik talked about Expression trees and how they represent code as data. This makes it possible to hand an expression tree to an interpreter for a given query language, that can then execute it in the given domain. This is why we (in theory) could forget all other query languages such as XQuery or SQL, and only use Linq-to-Xxx - given that someone writes a Xxx extension to LINQ, of course.</span><br /></strong><strong><br /></strong></div><div><strong>Real World Refactoring<br /><span style=\"font-weight: normal; \">This talk about Refactoring by Neal Ford addressed the challenges that goes into actually performing refactorings in code. It was very hands-on and offered some good advice on how to structure refactorings. One of the best pieces of advice, I think, was to time-restrain major (multi-day) refactoring efforts to an estimated period of time before-hand. If you cannot complete the planned refactoring in the planned time, take the time to rethink the problem, and find out if you are doing it right. If not, you can throw the refactored code away and try again, instead of keeping on a track, that might resolve to more complicated code than before; because new knowledge has beeng gained during the process or because the refactorings was not well enough planned and thought out in advance.</span><br /></strong><strong><br /></strong></div><div><strong>JavaScript As An Assembly Language<br /><span style=\"font-weight: normal; \">This second presentation by Erik Meijer was primarily about Volta, an exciting new technology from Microsoft's Live Labs. The project basically promises to make it easier to make multi-tier applications that can run on the server and work with any client, with parts being executed on the client. This is done by decorating methods with custom attributes, that marks them for running on the client. The Volta compiler will then \"compile\" those to javascript, that can run on any client (or, if Silverlight is available on the client, the code will run in Silverlight as .NET IL). Erik explained the technology behind, and how they generate javascript code and the various problems involved in that. I do not think that this technology is quite ready to be used in the wild yet, but it should definitely be interesting to see how it evolves in the future. The documentation site on Live Labs seems to be down for the moment, however, <span style=\"\"><a href=\"http://weblogs.asp.net/mschwarz/archive/2008/01/03/volta-microsoft-live-labs.aspx\">this blogpost</a></span> also explains the technology in more detail.</span><br /></strong><strong><br /></strong></div><div><strong>Concurrent Programming with Concurrent Extensions to .NET<br /><span style=\"font-weight: normal; \">In this talk, Joe Duffy, gave an introduction to the parallel extensions to .NET, a new API for writing concurrent applications with .NET. These extension is in CTP right now (so it's preview technology, not recommandable for production use). Joe promised though, that these APIs will be part of the <span style=\"\"><a href=\"http://en.wikipedia.org/wiki/.NET_Framework#.NET_Framework_4.0\">.NET Framework version 4 release</a></span>. These new APIs promise to make it easier to write concurrent applications with .NET with little overhad, both mentally for the programmer, but also performance-wise for the machine. The presentation featured running demos and code, and I believe that the new APIs are quite well-designed and that there is definitely a need for this kind of API in todays world of multi-core hardware. However, as Joe pointed out, there is no such thing as a free lunch; and even when using this API, of course you need to think hard over concurrency issues and side-effects before you can put it to use. The system makes it easier for you to program concurrently; but you can still fail badly if you do not understand what it does under the covers.</span></strong></div>","Author":"Dennis Riis","Published":"2008-09-30T19:30:00.0000000Z","IsPublished":true,"Comments":[{"Email":"js@webdanmark.com","Approved":true,"Body":"Very interesting...","Author":"Janus","Created":"2008-10-16T15:43:43.0000000Z"}],"Tags":["General technology",".NET"],"Created":"2008-09-30T19:30:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":19,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":59,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/15","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.8529279Z","@etag":"00000001-0000-0800-0000-000000000013","Non-Authoritative-Information":false}},{"Title":"JAOO Day Two","UrlName":"JAOO-Day-Two","BodyHtml":"\n\t\t<p>Today on JAOO has also been packed with interesting talks. I attended these:</p>\n    <p>\n      <strong>V8: The Javascript engine inside Google Chrome</strong> <br />Keynote by Lars Bak about the all-new javascript engine that was implemented by his team in Århus for Google Chrome. This javascript engine is about 10 times faster than other javascript implementations. Lars explained how this is possible in a very dynamic language like javascript, by creating classes that can be reused; if another object with the same properties is created, which tends to happen often. Optmizations can then be applied to those classes. Furthermore, Chrome compiles the Javascript code to native code so that it can run really fast on any platform. Lars mentioned a few other major improvements, and this was a very inspiring and interesting talk - even though he had some problems with the projector in the beginning.</p>\n    <p>\n      <strong>Failure Comes In Flavours</strong> <br />This talk by Mikael Nygard (who is not danish, by the way, though his name resembles a danish name pretty much) was divided into two sessions. In the first, Mikael talk about anti-patterns that lead to failure - such as depending too hard on third parties, or waiting forever for some external call. This talk featured some \"war stories\" about failures Mikael had helped to resolve in the past. In the second session, Mikael offered his advice on how to avoid failure and some patterns that can help in this. Though focus was very much on big enterprise SOA systems; the principles can be applied anywhere. I learned a thing or two in this session, that can be applied to my every-day work on web applications in a smaller scale.</p>\n    <p>\n      <strong>Not your Grandfather's Architecture: Taking Architecture into the Agile World</strong> <br />In this talk, James Coplien talked about Agile architecture. He presented his ideas about adding roles as a concept to the object-oriented world of classes and objects. He argued that programs could be made simpler and get rid of polymorphism using his approach; I am not sure that I agree. There was no working code demo, so his ideas is still kind of abstract in my mind.</p>\n    <p>\n      <strong>Successfully applying REST - Integration, Web-style</strong> <br />Stefan Tilkov talked about REST integration; a subject that I find very interesting, since we already use it in projects at work, and are planning to use it even more extensively. Stefan had some very interesting points about REST, and how it can be applied to a SOA world. I really like the clean interface you can make of a REST service, without much of the overhead and scaffolding that is neccessary in SOAP, for instance.</p>\n    <p>\n      <strong>Top Ten Software Architecture Mistakes</strong> <br />This was a talk focusing on what not to do in architecture; so that we can avoid mistakes or bad decisions in our architecture. The talker, Eion Woods, had his list of 10 mistakes and how to avoid them, which was presented with a little bit of humour. At least some of the items is going to be on my list of things to check before beginning development of new projects.</p>","Body":"\n\t\t<p>Today on JAOO has also been packed with interesting talks. I attended these:</p>\n    <p>\n      <strong>V8: The Javascript engine inside Google Chrome</strong> <br />Keynote by Lars Bak about the all-new javascript engine that was implemented by his team in Århus for Google Chrome. This javascript engine is about 10 times faster than other javascript implementations. Lars explained how this is possible in a very dynamic language like javascript, by creating classes that can be reused; if another object with the same properties is created, which tends to happen often. Optmizations can then be applied to those classes. Furthermore, Chrome compiles the Javascript code to native code so that it can run really fast on any platform. Lars mentioned a few other major improvements, and this was a very inspiring and interesting talk - even though he had some problems with the projector in the beginning.</p>\n    <p>\n      <strong>Failure Comes In Flavours</strong> <br />This talk by Mikael Nygard (who is not danish, by the way, though his name resembles a danish name pretty much) was divided into two sessions. In the first, Mikael talk about anti-patterns that lead to failure - such as depending too hard on third parties, or waiting forever for some external call. This talk featured some \"war stories\" about failures Mikael had helped to resolve in the past. In the second session, Mikael offered his advice on how to avoid failure and some patterns that can help in this. Though focus was very much on big enterprise SOA systems; the principles can be applied anywhere. I learned a thing or two in this session, that can be applied to my every-day work on web applications in a smaller scale.</p>\n    <p>\n      <strong>Not your Grandfather's Architecture: Taking Architecture into the Agile World</strong> <br />In this talk, James Coplien talked about Agile architecture. He presented his ideas about adding roles as a concept to the object-oriented world of classes and objects. He argued that programs could be made simpler and get rid of polymorphism using his approach; I am not sure that I agree. There was no working code demo, so his ideas is still kind of abstract in my mind.</p>\n    <p>\n      <strong>Successfully applying REST - Integration, Web-style</strong> <br />Stefan Tilkov talked about REST integration; a subject that I find very interesting, since we already use it in projects at work, and are planning to use it even more extensively. Stefan had some very interesting points about REST, and how it can be applied to a SOA world. I really like the clean interface you can make of a REST service, without much of the overhead and scaffolding that is neccessary in SOAP, for instance.</p>\n    <p>\n      <strong>Top Ten Software Architecture Mistakes</strong> <br />This was a talk focusing on what not to do in architecture; so that we can avoid mistakes or bad decisions in our architecture. The talker, Eion Woods, had his list of 10 mistakes and how to avoid them, which was presented with a little bit of humour. At least some of the items is going to be on my list of things to check before beginning development of new projects.</p>","Author":"Dennis Riis","Published":"2008-09-30T10:34:00.0000000Z","IsPublished":true,"Comments":[],"Tags":["General technology",".NET"],"Created":"2008-09-30T10:34:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":20,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":60,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/16","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.8529279Z","@etag":"00000001-0000-0800-0000-000000000014","Non-Authoritative-Information":false}},{"Title":"JAOO Day One","UrlName":"JAOO-Day-One","BodyHtml":"\n\t\t<p>Today, I've been attending the first day at the JAOO Conference. It has been an interesting day, and I am amazed by all the very talented people that speaks here at the conference, as well as by the quality of the talks. I have been attending these sessions:</p>\n    <p>\n      <strong>Opening Keynote: Where Are Programming Languages Going, by Anders Hejlsberg</strong>\n      <br />In this talk, Anders presented his take on how the programming languages will be evolving in the future. One point made, was that programming languages has not evolved much over the last 25 years - which was exemplified by a \"Hello world\" program in Pascal versus one in C#. The C# one was neither the shortest nor the most concise one. Anders believes that we will se more implementation of what he calls \"internal domain-specific-languages\", such as LINQ. Furthermore, he thinks that in the future the gap between functional and imperative programming languages will diminish, since they are already today starting to borrow the best elements from each other. Finally, he talked about concurrency and in-language concurrency constructs such as isolation, which Anders predicts also will be part of the main-stream languages in the near future. </p>\n    <p>\n      <strong>Continuous Integration<br /></strong>\nThe Continuous Integration talk was a great introduction to me into Continuous integration, since it is something, that I have little to zero experience with. We do have a build server that does nightly builds at work, but as Chris Read, the speaker, pointed out, that is not CI, though it is a step on the way toward succesful CI.\n    </p>\n    <p>\n      <strong>Google Chrome: The Invisible Browser</strong><br />\nThis was a talk by Ben Goodger, the Google Chrome UI tech lead, about the minimalist Chrome UI and the architecture and decisions behind it. It was interesting, though there was not much new to learn here. (Or perhaps I should know better than to attend UI talks, when UI does not really interest me. I am trying to learn ;-) )\n    </p>\n    <p>\n      <strong>LING and C# 3.0</strong><br />\nThis was the second talk by Anders Hejlsberg this day, and featured the new features in C# 3.0. This was info that I knew (mostly) in advance, but Anders explained both the how and the why behind the features - which was really interesting.\n    </p>\n    <p>\n      <strong>PowerShell</strong><br />\nThe talk about PowerShell was really good; even for me who know and use PowerShell in advance. It got beyond the covers on why the architecture and implementation works as it does, which was interesting and enlightening, and I left with a better understanding of PowerShell.\n    </p>\n    <p>\n      <strong>The Scala Programming Language</strong><br />\nScala is a language for the JVM, that I did not know much about in advance. The talk was interesting, but in \"real life\", I am probably never going to use it.\n    </p>\n    <p>\n      <strong>Why Functional Programming (still) Matters</strong><br />\nThis talk by Erik Meijer was propably the most interesting and entertaining one on Day One of JAOO. With enthusiasm, Erik explained about side-effects and why they are bad and what one should do about them (make them explicit if they cannot be avoided). He also demonstrated a few side effects, that can hit you in C# or other main stream languages with closures and lambdas, which was a pleasant reminder for me.\n    </p>","Body":"\n\t\t<p>Today, I've been attending the first day at the JAOO Conference. It has been an interesting day, and I am amazed by all the very talented people that speaks here at the conference, as well as by the quality of the talks. I have been attending these sessions:</p>\n    <p>\n      <strong>Opening Keynote: Where Are Programming Languages Going, by Anders Hejlsberg</strong>\n      <br />In this talk, Anders presented his take on how the programming languages will be evolving in the future. One point made, was that programming languages has not evolved much over the last 25 years - which was exemplified by a \"Hello world\" program in Pascal versus one in C#. The C# one was neither the shortest nor the most concise one. Anders believes that we will se more implementation of what he calls \"internal domain-specific-languages\", such as LINQ. Furthermore, he thinks that in the future the gap between functional and imperative programming languages will diminish, since they are already today starting to borrow the best elements from each other. Finally, he talked about concurrency and in-language concurrency constructs such as isolation, which Anders predicts also will be part of the main-stream languages in the near future. </p>\n    <p>\n      <strong>Continuous Integration<br /></strong>\nThe Continuous Integration talk was a great introduction to me into Continuous integration, since it is something, that I have little to zero experience with. We do have a build server that does nightly builds at work, but as Chris Read, the speaker, pointed out, that is not CI, though it is a step on the way toward succesful CI.\n    </p>\n    <p>\n      <strong>Google Chrome: The Invisible Browser</strong><br />\nThis was a talk by Ben Goodger, the Google Chrome UI tech lead, about the minimalist Chrome UI and the architecture and decisions behind it. It was interesting, though there was not much new to learn here. (Or perhaps I should know better than to attend UI talks, when UI does not really interest me. I am trying to learn ;-) )\n    </p>\n    <p>\n      <strong>LING and C# 3.0</strong><br />\nThis was the second talk by Anders Hejlsberg this day, and featured the new features in C# 3.0. This was info that I knew (mostly) in advance, but Anders explained both the how and the why behind the features - which was really interesting.\n    </p>\n    <p>\n      <strong>PowerShell</strong><br />\nThe talk about PowerShell was really good; even for me who know and use PowerShell in advance. It got beyond the covers on why the architecture and implementation works as it does, which was interesting and enlightening, and I left with a better understanding of PowerShell.\n    </p>\n    <p>\n      <strong>The Scala Programming Language</strong><br />\nScala is a language for the JVM, that I did not know much about in advance. The talk was interesting, but in \"real life\", I am probably never going to use it.\n    </p>\n    <p>\n      <strong>Why Functional Programming (still) Matters</strong><br />\nThis talk by Erik Meijer was propably the most interesting and entertaining one on Day One of JAOO. With enthusiasm, Erik explained about side-effects and why they are bad and what one should do about them (make them explicit if they cannot be avoided). He also demonstrated a few side effects, that can hit you in C# or other main stream languages with closures and lambdas, which was a pleasant reminder for me.\n    </p>","Author":"Dennis Riis","Published":"2008-09-29T14:36:00.0000000Z","IsPublished":true,"Comments":[],"Tags":["General technology","PowerShell","Personal","LINQ",".NET"],"Created":"2008-09-29T14:36:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":21,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":61,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/17","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.8729290Z","@etag":"00000001-0000-0800-0000-000000000015","Non-Authoritative-Information":false}},{"Title":"Attending JAOO","UrlName":"Attending-JAOO","BodyHtml":"I will be attending the <span style=\"\"><a href=\"http://jaoo.dk/conference/\">JAOO conference</a></span> the next couple of days. It is my first time, but I have high expectations. I am not sure which sessions I will attend, but of course the opening keynote by Anders Hejlsberg will be a must.<div><br /></div><div>I find it hard to choose - there are so many interesting subjects and speakers; and so little time ;-) If you are going to JAOO, feel free to drop a comment with suggestions on which sessions is a must for you, and why.</div>","Body":"I will be attending the <span style=\"\"><a href=\"http://jaoo.dk/conference/\">JAOO conference</a></span> the next couple of days. It is my first time, but I have high expectations. I am not sure which sessions I will attend, but of course the opening keynote by Anders Hejlsberg will be a must.<div><br /></div><div>I find it hard to choose - there are so many interesting subjects and speakers; and so little time ;-) If you are going to JAOO, feel free to drop a comment with suggestions on which sessions is a must for you, and why.</div>","Author":"Dennis Riis","Published":"2008-09-28T22:49:00.0000000Z","IsPublished":true,"Comments":[],"Tags":["General technology",".NET"],"Created":"2008-09-28T22:49:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":22,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":62,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/18","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.8739312Z","@etag":"00000001-0000-0800-0000-000000000016","Non-Authoritative-Information":false}},{"Title":"ReSharper 4 Available","UrlName":"ReSharper-4-Available","BodyHtml":"\n\t\t<p>The good folks over at <a href=\"http://www.jetbrains.com/\">Jetbrains </a>has finally released version 4 of their <a href=\"http://www.jetbrains.com/resharper/index.html\">ReSharper </a>productivity enhancing tool with support for C#3.0.</p>\n<p>Highly recommended.</p>","Body":"\n\t\t<p>The good folks over at <a href=\"http://www.jetbrains.com/\">Jetbrains </a>has finally released version 4 of their <a href=\"http://www.jetbrains.com/resharper/index.html\">ReSharper </a>productivity enhancing tool with support for C#3.0.</p>\n<p>Highly recommended.</p>","Author":"Dennis Riis","Published":"2008-06-11T19:23:39.0000000Z","IsPublished":true,"Comments":[],"Tags":[".NET"],"Created":"2008-06-11T19:23:39.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":23,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":63,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/21","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.8739312Z","@etag":"00000001-0000-0800-0000-000000000017","Non-Authoritative-Information":false}},{"Title":"How to: Create an ASP.NET CAPTCHA Control (part 1)","UrlName":"How-to:-Create-an-ASP.NET-CAPTCHA-Control-(part-1)","BodyHtml":"\n\t\t<p>As I explained in my <a href=\"/\" shape=\"rect\">previous post</a>, I developed a <a href=\"http://en.wikipedia.org/wiki/Captcha\" title=\"CAPTCHA on Wikipedia\" shape=\"rect\">CAPTCHA </a>ASP.NET control for this blog. In the next few posts, I will explain the steps involved in doing this, and how you can develop your own CAPTCHA control.</p>\n<p><strong>Preparations<br /></strong>There are some variations on CAPTCHA tests, the most common one requiring the user to input the characters displayed on an image. The idea is that only a human will be able to read these characters; so if the challenge response is correct, it is most likely a &quot;real human&quot; submitting the data. Since modern OCR software can be quite efficient, it is neccessary to make the charaters hard-to-read by altering shape, adding noise or lines. Of course these measures also make the CAPTCHA harder to read for a human. For my CAPTCHA control, I decided to create a control, that emphasizes on ease-of-use for the end user. Therefore, the images generated should be easy to read.</p>\n<p>When deciding which characters to display on the image, there are generally two approaches: Generate some randomly, or choose between a pre-defined set of words. I choose the latter approach, since it would be easiest for a human to recognize an actual word. Therefore, I am storing a list of English words, from which I select one randomly whenever I need to generate a CAPTCHA.</p>\n<p><strong>Step one: Creating the basic control<br /></strong>I have chosen to implement the CAPTCHA as a UserControl, so that the look and/or different parts of the control can be changed at a later time, if I need to do so. So I created a UserControl and placed an image tag and a textbox on it. These are the essential parts of the CAPTCHA control.</p>\n<p>The basic control implementation does the following: Whenever the control is shown, a word is selected randomly for the challenge. A unique, random URL for the CAPTCHA image is also generated. The purpose of using a unique URL is to ensure that the browser does not display an old CAPTCHA image because it caches it locally. </p>\n<p>The selected word is stored in Session state. Alongside the URL, it is exposed as a public static property, that populates on-demand. This makes sure that the image-rendering code will be able to get the correct word, and the encapsulation ensures that I can change the storage if necessary. This is the implementation of these two properties:</p><!-- code formatted by http://manoli.net/csharpformat/  -->\n<div class=\"csharpcode\"><pre _xml3a_space=\"preserve\"><span class=\"lnum\">1: </span>        <span class=\"rem\">/// <pre>2:         /// Gets the captcha URL.</pre><pre>3:         /// </pre></span></pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">4: </span>        <span class=\"rem\">/// The captcha URL.</span></pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">5: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">string</span> CaptchaUrl </pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">6: </span>        { </pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">7: </span>            get</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">8: </span>            {</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">9: </span>                <span class=\"kwrd\">if</span> (MyContext.Session[CaptchaUrlKey] == <span class=\"kwrd\">null</span>)</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">10: </span>                    MyContext.Session[CaptchaUrlKey] = String.Format(<span class=\"str\">&quot;/captcha/{0}.ashx&quot;</span>, rand.Next());</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">11: </span>                <span class=\"kwrd\">return</span> (<span class=\"kwrd\">string</span>)MyContext.Session[CaptchaUrlKey];</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">12: </span>            }</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">13: </span>        }</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">14: </span> </pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">15: </span>        <span class=\"rem\">/// <pre>16:         /// Gets the captcha word.</pre><pre>17:         /// </pre></span></pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">18: </span>        <span class=\"rem\">/// The captcha word.</span></pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">19: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">string</span> CaptchaWord</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">20: </span>        {</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">21: </span>            get</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">22: </span>            {</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">23: </span>                <span class=\"kwrd\">if</span> ( MyContext.Session[CaptchaWordKey] == <span class=\"kwrd\">null</span>)</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">24: </span>                {</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">25: </span>                    <span class=\"kwrd\">string</span> listWords = Settings.User[<span class=\"str\">&quot;CaptchaWords&quot;</span>];</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">26: </span>                    var words = listWords.Split(<span class=\"str\">','</span>);</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">27: </span>                    MyContext.Session[CaptchaWordKey] = words[rand.Next(words.Length - 1)].Trim();</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">28: </span>                }</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">29: </span>                <span class=\"kwrd\">return</span> (<span class=\"kwrd\">string</span>)MyContext.Session[CaptchaWordKey];</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">30: </span>            }</pre></div>\n<p>When the control is displayed, the image on the control is databound to the CaptchaUrl property; so it will display the image containing the correct word. The request the browser sends for the image will get handled by a separate http handler (which we will discuss in a later post); which will output the generated image.</p>\n<p>On postback, the control will check the text the user has entered, and if it matches the generated word, a public property called &quot;IsValid&quot; will be set to true. This indicates to the control on which our CAPTCHA resides, that the user has passed the CAPTCHA test. After the check, the word and URL is reset, so a new CAPTCHA will be generated if the control is shown again.</p>\n<p>A slightly better approach would be to implement the control as a .NET Validator control, so that it could take part in the page validation along with other validator controls. This would eliminate the need of the other controls on the page being aware of the CAPTCHA. Doing this would not be much more work; one would simply need to inherit from the abstract <a href=\"http://msdn2.microsoft.com/en-us/library/system.web.ui.webcontrols.basevalidator.aspx\" title=\"BaseValidator docs on MSDN\" shape=\"rect\">BaseValidator class</a> and implement the neccessary methods.</p>","Body":"\n\t\t<p>As I explained in my <a href=\"/\" shape=\"rect\">previous post</a>, I developed a <a href=\"http://en.wikipedia.org/wiki/Captcha\" title=\"CAPTCHA on Wikipedia\" shape=\"rect\">CAPTCHA </a>ASP.NET control for this blog. In the next few posts, I will explain the steps involved in doing this, and how you can develop your own CAPTCHA control.</p>\n<p><strong>Preparations<br /></strong>There are some variations on CAPTCHA tests, the most common one requiring the user to input the characters displayed on an image. The idea is that only a human will be able to read these characters; so if the challenge response is correct, it is most likely a &quot;real human&quot; submitting the data. Since modern OCR software can be quite efficient, it is neccessary to make the charaters hard-to-read by altering shape, adding noise or lines. Of course these measures also make the CAPTCHA harder to read for a human. For my CAPTCHA control, I decided to create a control, that emphasizes on ease-of-use for the end user. Therefore, the images generated should be easy to read.</p>\n<p>When deciding which characters to display on the image, there are generally two approaches: Generate some randomly, or choose between a pre-defined set of words. I choose the latter approach, since it would be easiest for a human to recognize an actual word. Therefore, I am storing a list of English words, from which I select one randomly whenever I need to generate a CAPTCHA.</p>\n<p><strong>Step one: Creating the basic control<br /></strong>I have chosen to implement the CAPTCHA as a UserControl, so that the look and/or different parts of the control can be changed at a later time, if I need to do so. So I created a UserControl and placed an image tag and a textbox on it. These are the essential parts of the CAPTCHA control.</p>\n<p>The basic control implementation does the following: Whenever the control is shown, a word is selected randomly for the challenge. A unique, random URL for the CAPTCHA image is also generated. The purpose of using a unique URL is to ensure that the browser does not display an old CAPTCHA image because it caches it locally. </p>\n<p>The selected word is stored in Session state. Alongside the URL, it is exposed as a public static property, that populates on-demand. This makes sure that the image-rendering code will be able to get the correct word, and the encapsulation ensures that I can change the storage if necessary. This is the implementation of these two properties:</p><!-- code formatted by http://manoli.net/csharpformat/  -->\n<div class=\"csharpcode\"><pre _xml3a_space=\"preserve\"><span class=\"lnum\">1: </span>        <span class=\"rem\">/// <pre>2:         /// Gets the captcha URL.</pre><pre>3:         /// </pre></span></pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">4: </span>        <span class=\"rem\">/// The captcha URL.</span></pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">5: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">string</span> CaptchaUrl </pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">6: </span>        { </pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">7: </span>            get</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">8: </span>            {</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">9: </span>                <span class=\"kwrd\">if</span> (MyContext.Session[CaptchaUrlKey] == <span class=\"kwrd\">null</span>)</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">10: </span>                    MyContext.Session[CaptchaUrlKey] = String.Format(<span class=\"str\">&quot;/captcha/{0}.ashx&quot;</span>, rand.Next());</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">11: </span>                <span class=\"kwrd\">return</span> (<span class=\"kwrd\">string</span>)MyContext.Session[CaptchaUrlKey];</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">12: </span>            }</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">13: </span>        }</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">14: </span> </pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">15: </span>        <span class=\"rem\">/// <pre>16:         /// Gets the captcha word.</pre><pre>17:         /// </pre></span></pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">18: </span>        <span class=\"rem\">/// The captcha word.</span></pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">19: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">string</span> CaptchaWord</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">20: </span>        {</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">21: </span>            get</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">22: </span>            {</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">23: </span>                <span class=\"kwrd\">if</span> ( MyContext.Session[CaptchaWordKey] == <span class=\"kwrd\">null</span>)</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">24: </span>                {</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">25: </span>                    <span class=\"kwrd\">string</span> listWords = Settings.User[<span class=\"str\">&quot;CaptchaWords&quot;</span>];</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">26: </span>                    var words = listWords.Split(<span class=\"str\">','</span>);</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">27: </span>                    MyContext.Session[CaptchaWordKey] = words[rand.Next(words.Length - 1)].Trim();</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">28: </span>                }</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">29: </span>                <span class=\"kwrd\">return</span> (<span class=\"kwrd\">string</span>)MyContext.Session[CaptchaWordKey];</pre><pre _xml3a_space=\"preserve\"><span class=\"lnum\">30: </span>            }</pre></div>\n<p>When the control is displayed, the image on the control is databound to the CaptchaUrl property; so it will display the image containing the correct word. The request the browser sends for the image will get handled by a separate http handler (which we will discuss in a later post); which will output the generated image.</p>\n<p>On postback, the control will check the text the user has entered, and if it matches the generated word, a public property called &quot;IsValid&quot; will be set to true. This indicates to the control on which our CAPTCHA resides, that the user has passed the CAPTCHA test. After the check, the word and URL is reset, so a new CAPTCHA will be generated if the control is shown again.</p>\n<p>A slightly better approach would be to implement the control as a .NET Validator control, so that it could take part in the page validation along with other validator controls. This would eliminate the need of the other controls on the page being aware of the CAPTCHA. Doing this would not be much more work; one would simply need to inherit from the abstract <a href=\"http://msdn2.microsoft.com/en-us/library/system.web.ui.webcontrols.basevalidator.aspx\" title=\"BaseValidator docs on MSDN\" shape=\"rect\">BaseValidator class</a> and implement the neccessary methods.</p>","Author":"Dennis Riis","Published":"2008-04-13T17:40:46.0000000Z","IsPublished":true,"Comments":[],"Tags":["ASP .NET",".NET"],"Created":"2008-04-13T17:40:46.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":25,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":65,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/24","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9159313Z","@etag":"00000001-0000-0800-0000-000000000019","Non-Authoritative-Information":false}},{"Title":"Hacking ASP.NET: Trace information","UrlName":"Hacking-ASP.NET:-Trace-information","BodyHtml":"\n\t\t<p>All ASP .NET developers propably know about the trace feature in ASP .NET. Provided you have enabled tracing in web.config, (using &lt;trace enabled=\"true\" /&gt; in the system.web element; requesting the url /trace.axd will provide you with a nice list of trace information for the previous requests.</p>\n<p>I have often thought about putting the wealth of information to better use; perhaps making more detailed reports based on the trace information. This could be useful during testing. Unfortunately, as far as I can tell, there is no other way to get the information, than requesting Trace.axd. There seems to be no supported programmatic way of doing this.</p>\n<p>So I set about finding out, how this could be done. At first I thought about creating a screen-scraper for requesting trace.axd and collecting the information. But this would be impractical; especially when large amounts of data should be collected.</p>\n<p>A better approach seemed to be to find out how ASP .NET actually stores this information. Since trace.axd is actually an IHttpHandler (System.Web.TraceHandlers.TraceHttpHandler), the natural starting point was using <a href=\"http://www.aisto.com/roeder/dotnet/\">Reflector</a> to view the internals of this class. It did not take long to figure out, that the HttpRuntime class has a static internal property named <em>Profile </em>of the type <em>System.Web.Util.Profiler, </em>which is internal<em>. </em>This is the class responsible for collecting the Trace information, and has a <em>GetData </em>method. This method returns the current trace information as an IList containing DataSets. </p>\n<p>Armed with this information, I wrote a small class that uses reflection to obtain the profiling data. The class looks like this:<!-- code formatted by http://manoli.net/csharpformat/ --> </p>\n<div class=\"csharpcode\"><pre><span class=\"lnum\">   1:  </span><span class=\"kwrd\">using</span> System;</pre><pre><span class=\"lnum\">   2:  </span><span class=\"kwrd\">using</span> System.Collections;</pre><pre><span class=\"lnum\">   3:  </span><span class=\"kwrd\">using</span> System.Collections.Generic;</pre><pre><span class=\"lnum\">   4:  </span><span class=\"kwrd\">using</span> System.Data;</pre><pre><span class=\"lnum\">   5:  </span><span class=\"kwrd\">using</span> System.Linq;</pre><pre><span class=\"lnum\">   6:  </span><span class=\"kwrd\">using</span> System.Reflection;</pre><pre><span class=\"lnum\">   7:  </span><span class=\"kwrd\">using</span> System.Web;</pre><pre><span class=\"lnum\">   8:  </span> </pre><pre><span class=\"lnum\">   9:  </span><span class=\"kwrd\">namespace</span> dr.TraceAnalyzer</pre><pre><span class=\"lnum\">  10:  </span>{</pre><pre><span class=\"lnum\">  11:  </span>    <span class=\"rem\">/// <summary></summary></span></pre><pre><span class=\"lnum\">  12:  </span>    <span class=\"rem\">/// Proof-of-concept class for accessing trace data using reflection.</span></pre><pre><span class=\"lnum\">  13:  </span>    <span class=\"rem\">/// </span></pre><pre><span class=\"lnum\">  14:  </span>    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> TraceData</pre><pre><span class=\"lnum\">  15:  </span>    {</pre><pre><span class=\"lnum\">  16:  </span>        <span class=\"rem\">/// <summary></summary></span></pre><pre><span class=\"lnum\">  17:  </span>        <span class=\"rem\">/// Data</span></pre><pre><span class=\"lnum\">  18:  </span>        <span class=\"rem\">/// </span></pre><pre><span class=\"lnum\">  19:  </span>        <span class=\"kwrd\">private</span> IList data = <span class=\"kwrd\">null</span>;</pre><pre><span class=\"lnum\">  20:  </span>        <span class=\"rem\">/// <summary></summary></span></pre><pre><span class=\"lnum\">  21:  </span>        <span class=\"rem\">/// Gets the trace data in its raw list-of-datasets representation.</span></pre><pre><span class=\"lnum\">  22:  </span>        <span class=\"rem\">/// </span></pre><pre><span class=\"lnum\">  23:  </span>        <span class=\"kwrd\">public</span> IList Data</pre><pre><span class=\"lnum\">  24:  </span>        {</pre><pre><span class=\"lnum\">  25:  </span>            get</pre><pre><span class=\"lnum\">  26:  </span>            {</pre><pre><span class=\"lnum\">  27:  </span>                <span class=\"kwrd\">if</span> (data == <span class=\"kwrd\">null</span>)</pre><pre><span class=\"lnum\">  28:  </span>                    GetCurrentData();</pre><pre><span class=\"lnum\">  29:  </span>                <span class=\"kwrd\">return</span> data;</pre><pre><span class=\"lnum\">  30:  </span>            }</pre><pre><span class=\"lnum\">  31:  </span>        }</pre><pre><span class=\"lnum\">  32:  </span> </pre><pre><span class=\"lnum\">  33:  </span>        <span class=\"rem\">/// <summary></summary></span></pre><pre><span class=\"lnum\">  34:  </span>        <span class=\"rem\">/// Returns the response time for each request stored in the trace data.</span></pre><pre><span class=\"lnum\">  35:  </span>        <span class=\"rem\">/// </span></pre><pre><span class=\"lnum\">  36:  </span>        <span class=\"kwrd\">public</span> IEnumerable<span class=\"kwrd\">double</span>&gt;<span class=\"kwrd\">double</span>&gt; RequestResponseTimes</pre><pre><span class=\"lnum\">  37:  </span>        {</pre><pre><span class=\"lnum\">  38:  </span>            get</pre><pre><span class=\"lnum\">  39:  </span>            {</pre><pre><span class=\"lnum\">  40:  </span>                GetCurrentData();</pre><pre><span class=\"lnum\">  41:  </span>                var sets = from d <span class=\"kwrd\">in</span> Data.Cast<dataset></dataset>()</pre><pre><span class=\"lnum\">  42:  </span>                           select d;</pre><pre><span class=\"lnum\">  43:  </span>                <span class=\"kwrd\">return</span> from set <span class=\"kwrd\">in</span> sets</pre><pre><span class=\"lnum\">  44:  </span>                             let traceTable = set.Tables[<span class=\"str\">\"Trace_Trace_Information\"</span>]</pre><pre><span class=\"lnum\">  45:  </span>                             <span class=\"kwrd\">where</span> traceTable != <span class=\"kwrd\">null</span> && traceTable.Rows.Count &gt; 0</pre><pre><span class=\"lnum\">  46:  </span>                             select (<span class=\"kwrd\">double</span>) traceTable.Rows[traceTable.Rows.Count - 1][<span class=\"str\">\"Trace_From_First\"</span>];</pre><pre><span class=\"lnum\">  47:  </span>            }</pre><pre><span class=\"lnum\">  48:  </span>        }</pre><pre><span class=\"lnum\">  49:  </span> </pre><pre><span class=\"lnum\">  50:  </span>        <span class=\"rem\">/// <summary></summary></span></pre><pre><span class=\"lnum\">  51:  </span>        <span class=\"rem\">/// Gets the current data from the Profiler instance's GetData method.</span></pre><pre><span class=\"lnum\">  52:  </span>        <span class=\"rem\">/// </span></pre><pre><span class=\"lnum\">  53:  </span>        <span class=\"rem\">/// <returns></returns></span></pre><pre><span class=\"lnum\">  54:  </span>        <span class=\"kwrd\">public</span> IList GetCurrentData()</pre><pre><span class=\"lnum\">  55:  </span>        {</pre><pre><span class=\"lnum\">  56:  </span>            var profiler = GetProfiler();</pre><pre><span class=\"lnum\">  57:  </span>            Type profilerType = profiler.GetType();</pre><pre><span class=\"lnum\">  58:  </span>            MethodInfo method = profilerType.GetMethod(<span class=\"str\">\"GetData\"</span>, BindingFlags.Instance | BindingFlags.NonPublic);</pre><pre><span class=\"lnum\">  59:  </span>            <span class=\"kwrd\">return</span> data = (IList) method.Invoke(profiler, <span class=\"kwrd\">null</span>);</pre><pre><span class=\"lnum\">  60:  </span>        }</pre><pre><span class=\"lnum\">  61:  </span> </pre><pre><span class=\"lnum\">  62:  </span>        <span class=\"rem\">/// <summary></summary></span></pre><pre><span class=\"lnum\">  63:  </span>        <span class=\"rem\">/// Use reflection to get the Profiler instance.</span></pre><pre><span class=\"lnum\">  64:  </span>        <span class=\"rem\">/// </span></pre><pre><span class=\"lnum\">  65:  </span>        <span class=\"rem\">/// <returns></returns></span></pre><pre><span class=\"lnum\">  66:  </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">object</span> GetProfiler()</pre><pre><span class=\"lnum\">  67:  </span>        {</pre><pre><span class=\"lnum\">  68:  </span>            Type runtimeType = <span class=\"kwrd\">typeof</span> (HttpRuntime);</pre><pre><span class=\"lnum\">  69:  </span>            PropertyInfo profileProperty = runtimeType.GetProperty(<span class=\"str\">\"Profile\"</span>,</pre><pre><span class=\"lnum\">  70:  </span>                                                                   BindingFlags.NonPublic | BindingFlags.Static);</pre><pre><span class=\"lnum\">  71:  </span>            <span class=\"kwrd\">if</span> (profileProperty != <span class=\"kwrd\">null</span>)</pre><pre><span class=\"lnum\">  72:  </span>            {</pre><pre><span class=\"lnum\">  73:  </span>                <span class=\"kwrd\">return</span> profileProperty.GetValue(<span class=\"kwrd\">null</span>, <span class=\"kwrd\">null</span>);</pre><pre><span class=\"lnum\">  74:  </span>            }</pre><pre><span class=\"lnum\">  75:  </span> </pre><pre><span class=\"lnum\">  76:  </span>            <span class=\"kwrd\">throw</span> <span class=\"kwrd\">new</span> ApplicationException(<span class=\"str\">\"Reflection to get profiler instance failed.\"</span>);</pre><pre><span class=\"lnum\">  77:  </span>        }</pre><pre><span class=\"lnum\">  78:  </span>    }</pre><pre><span class=\"lnum\">  79:  </span>}</pre></div>\n<p>I have yet to decide what I am going to use the trace data for. But an obvious way to use it would be to represent some of the performance data that is collected, as a graph.&nbsp;For now, I&nbsp;have added a property, <span style=\"FONT-SIZE: 10pt\"><em>RequestResponseTimes,</em> </span>that returns a list of the total time taken for each request stored in the trace data.</p>\n<p>&nbsp;</p>\n<p>And, please remember to disable tracing when putting your site into production ;-) </p>","Body":"\n\t\t<p>All ASP .NET developers propably know about the trace feature in ASP .NET. Provided you have enabled tracing in web.config, (using &lt;trace enabled=\"true\" /&gt; in the system.web element; requesting the url /trace.axd will provide you with a nice list of trace information for the previous requests.</p>\n<p>I have often thought about putting the wealth of information to better use; perhaps making more detailed reports based on the trace information. This could be useful during testing. Unfortunately, as far as I can tell, there is no other way to get the information, than requesting Trace.axd. There seems to be no supported programmatic way of doing this.</p>\n<p>So I set about finding out, how this could be done. At first I thought about creating a screen-scraper for requesting trace.axd and collecting the information. But this would be impractical; especially when large amounts of data should be collected.</p>\n<p>A better approach seemed to be to find out how ASP .NET actually stores this information. Since trace.axd is actually an IHttpHandler (System.Web.TraceHandlers.TraceHttpHandler), the natural starting point was using <a href=\"http://www.aisto.com/roeder/dotnet/\">Reflector</a> to view the internals of this class. It did not take long to figure out, that the HttpRuntime class has a static internal property named <em>Profile </em>of the type <em>System.Web.Util.Profiler, </em>which is internal<em>. </em>This is the class responsible for collecting the Trace information, and has a <em>GetData </em>method. This method returns the current trace information as an IList containing DataSets. </p>\n<p>Armed with this information, I wrote a small class that uses reflection to obtain the profiling data. The class looks like this:<!-- code formatted by http://manoli.net/csharpformat/ --> </p>\n<div class=\"csharpcode\"><pre><span class=\"lnum\">   1:  </span><span class=\"kwrd\">using</span> System;</pre><pre><span class=\"lnum\">   2:  </span><span class=\"kwrd\">using</span> System.Collections;</pre><pre><span class=\"lnum\">   3:  </span><span class=\"kwrd\">using</span> System.Collections.Generic;</pre><pre><span class=\"lnum\">   4:  </span><span class=\"kwrd\">using</span> System.Data;</pre><pre><span class=\"lnum\">   5:  </span><span class=\"kwrd\">using</span> System.Linq;</pre><pre><span class=\"lnum\">   6:  </span><span class=\"kwrd\">using</span> System.Reflection;</pre><pre><span class=\"lnum\">   7:  </span><span class=\"kwrd\">using</span> System.Web;</pre><pre><span class=\"lnum\">   8:  </span> </pre><pre><span class=\"lnum\">   9:  </span><span class=\"kwrd\">namespace</span> dr.TraceAnalyzer</pre><pre><span class=\"lnum\">  10:  </span>{</pre><pre><span class=\"lnum\">  11:  </span>    <span class=\"rem\">/// <summary></summary></span></pre><pre><span class=\"lnum\">  12:  </span>    <span class=\"rem\">/// Proof-of-concept class for accessing trace data using reflection.</span></pre><pre><span class=\"lnum\">  13:  </span>    <span class=\"rem\">/// </span></pre><pre><span class=\"lnum\">  14:  </span>    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> TraceData</pre><pre><span class=\"lnum\">  15:  </span>    {</pre><pre><span class=\"lnum\">  16:  </span>        <span class=\"rem\">/// <summary></summary></span></pre><pre><span class=\"lnum\">  17:  </span>        <span class=\"rem\">/// Data</span></pre><pre><span class=\"lnum\">  18:  </span>        <span class=\"rem\">/// </span></pre><pre><span class=\"lnum\">  19:  </span>        <span class=\"kwrd\">private</span> IList data = <span class=\"kwrd\">null</span>;</pre><pre><span class=\"lnum\">  20:  </span>        <span class=\"rem\">/// <summary></summary></span></pre><pre><span class=\"lnum\">  21:  </span>        <span class=\"rem\">/// Gets the trace data in its raw list-of-datasets representation.</span></pre><pre><span class=\"lnum\">  22:  </span>        <span class=\"rem\">/// </span></pre><pre><span class=\"lnum\">  23:  </span>        <span class=\"kwrd\">public</span> IList Data</pre><pre><span class=\"lnum\">  24:  </span>        {</pre><pre><span class=\"lnum\">  25:  </span>            get</pre><pre><span class=\"lnum\">  26:  </span>            {</pre><pre><span class=\"lnum\">  27:  </span>                <span class=\"kwrd\">if</span> (data == <span class=\"kwrd\">null</span>)</pre><pre><span class=\"lnum\">  28:  </span>                    GetCurrentData();</pre><pre><span class=\"lnum\">  29:  </span>                <span class=\"kwrd\">return</span> data;</pre><pre><span class=\"lnum\">  30:  </span>            }</pre><pre><span class=\"lnum\">  31:  </span>        }</pre><pre><span class=\"lnum\">  32:  </span> </pre><pre><span class=\"lnum\">  33:  </span>        <span class=\"rem\">/// <summary></summary></span></pre><pre><span class=\"lnum\">  34:  </span>        <span class=\"rem\">/// Returns the response time for each request stored in the trace data.</span></pre><pre><span class=\"lnum\">  35:  </span>        <span class=\"rem\">/// </span></pre><pre><span class=\"lnum\">  36:  </span>        <span class=\"kwrd\">public</span> IEnumerable<span class=\"kwrd\">double</span>&gt;<span class=\"kwrd\">double</span>&gt; RequestResponseTimes</pre><pre><span class=\"lnum\">  37:  </span>        {</pre><pre><span class=\"lnum\">  38:  </span>            get</pre><pre><span class=\"lnum\">  39:  </span>            {</pre><pre><span class=\"lnum\">  40:  </span>                GetCurrentData();</pre><pre><span class=\"lnum\">  41:  </span>                var sets = from d <span class=\"kwrd\">in</span> Data.Cast<dataset></dataset>()</pre><pre><span class=\"lnum\">  42:  </span>                           select d;</pre><pre><span class=\"lnum\">  43:  </span>                <span class=\"kwrd\">return</span> from set <span class=\"kwrd\">in</span> sets</pre><pre><span class=\"lnum\">  44:  </span>                             let traceTable = set.Tables[<span class=\"str\">\"Trace_Trace_Information\"</span>]</pre><pre><span class=\"lnum\">  45:  </span>                             <span class=\"kwrd\">where</span> traceTable != <span class=\"kwrd\">null</span> && traceTable.Rows.Count &gt; 0</pre><pre><span class=\"lnum\">  46:  </span>                             select (<span class=\"kwrd\">double</span>) traceTable.Rows[traceTable.Rows.Count - 1][<span class=\"str\">\"Trace_From_First\"</span>];</pre><pre><span class=\"lnum\">  47:  </span>            }</pre><pre><span class=\"lnum\">  48:  </span>        }</pre><pre><span class=\"lnum\">  49:  </span> </pre><pre><span class=\"lnum\">  50:  </span>        <span class=\"rem\">/// <summary></summary></span></pre><pre><span class=\"lnum\">  51:  </span>        <span class=\"rem\">/// Gets the current data from the Profiler instance's GetData method.</span></pre><pre><span class=\"lnum\">  52:  </span>        <span class=\"rem\">/// </span></pre><pre><span class=\"lnum\">  53:  </span>        <span class=\"rem\">/// <returns></returns></span></pre><pre><span class=\"lnum\">  54:  </span>        <span class=\"kwrd\">public</span> IList GetCurrentData()</pre><pre><span class=\"lnum\">  55:  </span>        {</pre><pre><span class=\"lnum\">  56:  </span>            var profiler = GetProfiler();</pre><pre><span class=\"lnum\">  57:  </span>            Type profilerType = profiler.GetType();</pre><pre><span class=\"lnum\">  58:  </span>            MethodInfo method = profilerType.GetMethod(<span class=\"str\">\"GetData\"</span>, BindingFlags.Instance | BindingFlags.NonPublic);</pre><pre><span class=\"lnum\">  59:  </span>            <span class=\"kwrd\">return</span> data = (IList) method.Invoke(profiler, <span class=\"kwrd\">null</span>);</pre><pre><span class=\"lnum\">  60:  </span>        }</pre><pre><span class=\"lnum\">  61:  </span> </pre><pre><span class=\"lnum\">  62:  </span>        <span class=\"rem\">/// <summary></summary></span></pre><pre><span class=\"lnum\">  63:  </span>        <span class=\"rem\">/// Use reflection to get the Profiler instance.</span></pre><pre><span class=\"lnum\">  64:  </span>        <span class=\"rem\">/// </span></pre><pre><span class=\"lnum\">  65:  </span>        <span class=\"rem\">/// <returns></returns></span></pre><pre><span class=\"lnum\">  66:  </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">object</span> GetProfiler()</pre><pre><span class=\"lnum\">  67:  </span>        {</pre><pre><span class=\"lnum\">  68:  </span>            Type runtimeType = <span class=\"kwrd\">typeof</span> (HttpRuntime);</pre><pre><span class=\"lnum\">  69:  </span>            PropertyInfo profileProperty = runtimeType.GetProperty(<span class=\"str\">\"Profile\"</span>,</pre><pre><span class=\"lnum\">  70:  </span>                                                                   BindingFlags.NonPublic | BindingFlags.Static);</pre><pre><span class=\"lnum\">  71:  </span>            <span class=\"kwrd\">if</span> (profileProperty != <span class=\"kwrd\">null</span>)</pre><pre><span class=\"lnum\">  72:  </span>            {</pre><pre><span class=\"lnum\">  73:  </span>                <span class=\"kwrd\">return</span> profileProperty.GetValue(<span class=\"kwrd\">null</span>, <span class=\"kwrd\">null</span>);</pre><pre><span class=\"lnum\">  74:  </span>            }</pre><pre><span class=\"lnum\">  75:  </span> </pre><pre><span class=\"lnum\">  76:  </span>            <span class=\"kwrd\">throw</span> <span class=\"kwrd\">new</span> ApplicationException(<span class=\"str\">\"Reflection to get profiler instance failed.\"</span>);</pre><pre><span class=\"lnum\">  77:  </span>        }</pre><pre><span class=\"lnum\">  78:  </span>    }</pre><pre><span class=\"lnum\">  79:  </span>}</pre></div>\n<p>I have yet to decide what I am going to use the trace data for. But an obvious way to use it would be to represent some of the performance data that is collected, as a graph.&nbsp;For now, I&nbsp;have added a property, <span style=\"FONT-SIZE: 10pt\"><em>RequestResponseTimes,</em> </span>that returns a list of the total time taken for each request stored in the trace data.</p>\n<p>&nbsp;</p>\n<p>And, please remember to disable tracing when putting your site into production ;-) </p>","Author":"Dennis Riis","Published":"2008-04-01T22:25:59.0000000Z","IsPublished":true,"Comments":[],"Tags":["ASP .NET",".NET"],"Created":"2008-04-01T22:25:59.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":26,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":66,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/25","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9169315Z","@etag":"00000001-0000-0800-0000-00000000001a","Non-Authoritative-Information":false}},{"Title":"Got one of those RSS thingys","UrlName":"Got-one-of-those-RSS-thingys","BodyHtml":"\n\t\t<p>Someone pointed out that there was no RSS feed on my blog - i forgot to add it.</p>\n<p>It has been fixed now, and you should be able to read my blog in your favourite&nbsp;RSS aggregator.</p>","Body":"\n\t\t<p>Someone pointed out that there was no RSS feed on my blog - i forgot to add it.</p>\n<p>It has been fixed now, and you should be able to read my blog in your favourite&nbsp;RSS aggregator.</p>","Author":"Dennis Riis","Published":"2008-02-13T21:02:39.0000000Z","IsPublished":true,"Comments":[],"Tags":[".NET"],"Created":"2008-02-13T21:02:39.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":28,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":68,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/27","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9349361Z","@etag":"00000001-0000-0800-0000-00000000001c","Non-Authoritative-Information":false}},{"Title":"Debugging ASP .NET memory leak - watch for static references","UrlName":"Debugging-ASP-.NET-memory-leak---watch-for-static-references","BodyHtml":"\t\t<p>A while ago, I needed to debug an ASP .NET website, which was eating more and more memory the longer it was running, and never seemed to release the memory again. Even though the number of concurrent users was more or less constant, the memory usage seemed to be proportional to the total number of sessions since last application restart.</p>\n<p>What was happening here ? Could it be session-state elements that never got garbage collected ? To find out,&nbsp;I simulated load on a test version of the website, let the sessions time out and&nbsp;used <a title=\"WinDbg on Wikipedia\" href=\"http://en.wikipedia.org/wiki/WinDbg\" target=\"_blank\">WinDbg</a>&nbsp;and the <a title=\"SOS.dll\" href=\"http://msdn2.microsoft.com/en-us/library/bb190764(VS.80).aspx\" target=\"_blank\">Son of Strike dll extension</a>&nbsp;command \"gcroot\" to find out which objects was stll alive and why they could not be collected by the garbage collector. First I forced a few garbage collections by calling GC.Collect() to make sure that the garbage collector had actually run. </p>\n<p>I found out that some objects, that we keep in Session was rooted to an object array, which, it turned out, represented static references.<br />After some investigation, I found the problem in the code: A developer had created a static event, and had the objects in session subscribe to this event. This meant that the session objects could not be collected, since there were still reachable references to the objects.</p>\n<p>It turned out that the event did not need to be static, so the fix was rather easy to implement. The debugging of the issue, however, took some time.</p>\n<p>The morale of this is, that even though we have managed code with memory management, you should still keep an eye on memory usage during development. And with ASP .NET, you should be very careful with static references, since they could root your objects so that they can't be garbage collected. </p>\n<p>You should also be aware, that static objects are shared for all users. This should not come as a surprise, if you know just a bit about the ASP .NET process model, but it is my experience that it is easy to forget, even for experienced developers. Because the static objects are shared, you should treat them as such, and remember to use proper synchronization methods when accessing them..</p>\n<p>I might blog more in the future about this kind of issues.</p>","Body":"\t\t<p>A while ago, I needed to debug an ASP .NET website, which was eating more and more memory the longer it was running, and never seemed to release the memory again. Even though the number of concurrent users was more or less constant, the memory usage seemed to be proportional to the total number of sessions since last application restart.</p>\n<p>What was happening here ? Could it be session-state elements that never got garbage collected ? To find out,&nbsp;I simulated load on a test version of the website, let the sessions time out and&nbsp;used <a title=\"WinDbg on Wikipedia\" href=\"http://en.wikipedia.org/wiki/WinDbg\" target=\"_blank\">WinDbg</a>&nbsp;and the <a title=\"SOS.dll\" href=\"http://msdn2.microsoft.com/en-us/library/bb190764(VS.80).aspx\" target=\"_blank\">Son of Strike dll extension</a>&nbsp;command \"gcroot\" to find out which objects was stll alive and why they could not be collected by the garbage collector. First I forced a few garbage collections by calling GC.Collect() to make sure that the garbage collector had actually run. </p>\n<p>I found out that some objects, that we keep in Session was rooted to an object array, which, it turned out, represented static references.<br />After some investigation, I found the problem in the code: A developer had created a static event, and had the objects in session subscribe to this event. This meant that the session objects could not be collected, since there were still reachable references to the objects.</p>\n<p>It turned out that the event did not need to be static, so the fix was rather easy to implement. The debugging of the issue, however, took some time.</p>\n<p>The morale of this is, that even though we have managed code with memory management, you should still keep an eye on memory usage during development. And with ASP .NET, you should be very careful with static references, since they could root your objects so that they can't be garbage collected. </p>\n<p>You should also be aware, that static objects are shared for all users. This should not come as a surprise, if you know just a bit about the ASP .NET process model, but it is my experience that it is easy to forget, even for experienced developers. Because the static objects are shared, you should treat them as such, and remember to use proper synchronization methods when accessing them..</p>\n<p>I might blog more in the future about this kind of issues.</p>","Author":"Dennis Riis","Published":"2008-02-10T21:42:14.0000000Z","IsPublished":true,"Comments":[{"Email":"","Approved":true,"Body":"Very interresting, but I don't really understand the problem:<br /><br />\"A developer had created a static event, and had the objects in session subscribe to this event. This meant that the session objects could not be collected, since there were still reachable references to the objects.\"<br /><br />Could you explain this in more details?<br />Thanks","Author":"koger","Created":"2008-02-29T11:01:08.0000000Z"},{"Email":"sureshuniv@yahoo.co.in","Approved":true,"Body":"sadaf","Author":"suresh","Created":"2008-07-19T12:42:18.0000000Z"},{"Email":"sureshuniv@yahoo.co.in","Approved":true,"Body":"sadaf","Author":"suresh","Created":"2008-07-19T12:42:29.0000000Z"}],"Tags":["ASP .NET",".NET"],"Created":"2008-02-10T21:42:14.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":29,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":69,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/28","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9359374Z","@etag":"00000001-0000-0800-0000-00000000001d","Non-Authoritative-Information":false}},{"Title":"Built on Sitecore Xpress","UrlName":"Built-on-Sitecore-Xpress","BodyHtml":"\t\t<p>As from today, this blog runs on <a title=\"Sitecore Xpress\" href=\"http://xpress.sitecore.net/\" target=\"_blank\">Sitecore Xpress</a>. I have spent the day setting it up.</p>\n<p>So, what is Sitecore Xpress ? Sitecore Xpress is a personal edition of the professional Sitecore CMS product, which just recently was released and made <strong>free of charge</strong> for developers. This is really cool, since Sitecore is a very good, mature and professional CMS, that has loads of features and is built on .NET. It also has a lot of extension points, which makes it a realy nice development platform for large enterprise websites. The free Xpress edition has almost all the features of the full product, though it is restricred to one user and can only be used for personal, non-commercial sites (<a title=\"Xpress feature details\" href=\"http://xpress.sitecore.net/AboutXpress.aspx\" target=\"_blank\">details here</a>).</p>\n<p>Since we use Sitecore a lot at work, and it is so developer-friendly, the decition to use Sitecore Xpress for my personal website, was really easy to make. It will make a good platform for the various features I would like to add to my web site in the feature.</p>\n<p>A nice example on how easy use and setup Sitecore is, that although there are no built-in blogging application in Sitecore, it took me just a day to setup the entire website, including the blog and migration of content from the old platform. The blog is actually a tree of so-called Sitecore content Items. Items is the cornerstone of Sitecore. Using a few XSLT renderings, the blog page, archives and individual posts and comments can be displayed. No additional code was written to achieve this. The only code I have written for this website so far, is a small User Control ( &lt; 30 lines of code ) that allows users to add comments to the articles.</p>\n<p>I am probably going to be blogging a bit more about Sitecore and ASP .NET related subjects in the future. I also hope that this change of platform will increase&nbsp;my motivation for writing more posts, so&nbsp;the frequency of new posts should increase.</p>","Body":"\t\t<p>As from today, this blog runs on <a title=\"Sitecore Xpress\" href=\"http://xpress.sitecore.net/\" target=\"_blank\">Sitecore Xpress</a>. I have spent the day setting it up.</p>\n<p>So, what is Sitecore Xpress ? Sitecore Xpress is a personal edition of the professional Sitecore CMS product, which just recently was released and made <strong>free of charge</strong> for developers. This is really cool, since Sitecore is a very good, mature and professional CMS, that has loads of features and is built on .NET. It also has a lot of extension points, which makes it a realy nice development platform for large enterprise websites. The free Xpress edition has almost all the features of the full product, though it is restricred to one user and can only be used for personal, non-commercial sites (<a title=\"Xpress feature details\" href=\"http://xpress.sitecore.net/AboutXpress.aspx\" target=\"_blank\">details here</a>).</p>\n<p>Since we use Sitecore a lot at work, and it is so developer-friendly, the decition to use Sitecore Xpress for my personal website, was really easy to make. It will make a good platform for the various features I would like to add to my web site in the feature.</p>\n<p>A nice example on how easy use and setup Sitecore is, that although there are no built-in blogging application in Sitecore, it took me just a day to setup the entire website, including the blog and migration of content from the old platform. The blog is actually a tree of so-called Sitecore content Items. Items is the cornerstone of Sitecore. Using a few XSLT renderings, the blog page, archives and individual posts and comments can be displayed. No additional code was written to achieve this. The only code I have written for this website so far, is a small User Control ( &lt; 30 lines of code ) that allows users to add comments to the articles.</p>\n<p>I am probably going to be blogging a bit more about Sitecore and ASP .NET related subjects in the future. I also hope that this change of platform will increase&nbsp;my motivation for writing more posts, so&nbsp;the frequency of new posts should increase.</p>","Author":"Dennis Riis","Published":"2008-02-10T21:11:42.0000000Z","IsPublished":true,"Comments":[{"Email":"nlb@holion.dk","Approved":true,"Body":"But where is the RSS feed? RSS Bandit cann't find it, IE cann't display feeds with a DTD and it doesn't work in Opera either :-(","Author":"Niels Ladegaard Beck","Created":"2008-02-11T09:51:44.0000000Z"},{"Email":"","Approved":true,"Body":"Rss feed is coming soon... I think I might have \"forgot\" to add it :-)","Author":"Dennis","Created":"2008-02-11T11:47:50.0000000Z"}],"Tags":["ASP .NET","General technology",".NET"],"Created":"2008-02-10T21:11:42.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":30,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":70,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/29","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9359374Z","@etag":"00000001-0000-0800-0000-00000000001e","Non-Authoritative-Information":false}},{"Title":"NEF file reader update","UrlName":"NEF-file-reader-update","BodyHtml":"\t\t<div class=\"entry\">\n<p>Progress on the NEF / RAW file reader is slow, since i only work on it occasionally when I feel like coding in my spare time. However, I made some progress tonight, that I would like to update you about. </p>\n<p>First, NEF files are really TIFF files. So I need to parse them as a TIFF file to get some useful information out of them. TIFF files consists of so-called IFD tags, which in parts contains metadata about the image as well as the actual image data. Currently I have developed a basic IFD tag parser, that parses all of the IFD tags in a NEF file. </p>\n<p>Furthermore I have found, by looking at the IFD tags, that there are at least 3 embedded images in each NEF files. These are a small, low-quality 160x120 thumbnail represented as RGB data, a nearly full size JPG in low quality, as well as the actual NEF image data. While implementing the IFD parser, I had a lot of help from this <a title=\"TIFF FAQ\" href=\"http://www.awaresystems.be/imaging/tiff/faq.html\" target=\"_blank\">TIFF FAQ</a>, as well as from the official <a title=\"TIFF specification\" href=\"http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf\" target=\"_blank\">Adobe TIFF specification version 6</a>. </p>\n<p>Of course, the NEF image data is the interesting part. I have studied the file format, and made these conclusions; mostly based on what I can tell from the dcraw source code: </p>\n<ul>\n<li>The NEF file consists of Width * Height samples. <br /></li>\n<li>The data is represented as a Color Filter Array, that is each sample represents the intensity of a single color (<a title=\"CFA\" href=\"http://en.wikipedia.org/wiki/Color_filter_array\" target=\"_blank\">since this is what the camera shoots, as many other digital cameras</a>); </li>\n<li>therefore, I must interpolate 2 of the colors for each sample, to get a full-color, full-scale image. </li>\n<li>Each sample is 12 bits. </li></ul>\n<p>But this is not all; it is not so simple as to just read 12 bits per sample. The data is compressed. As far as I can tell currently; the following is the compression scheme. </p>\n<ul>\n<li>A µ-law type compression curve is used to limit the number of possible sample values to 634 (and consequently companding the 12 bit values to log<sub>2</sub>(634) = 9.4 bits of actual accuray; while preserving the 12 bits dynamic range). </li>\n<li>The curve values are embedded in the file. </li>\n<li>Samples are indices to values in the curve. </li></ul>\n<p>Samples are encoded (compressed) like this: </p>\n<ul>\n<li>A simple predictor is used, so each value read is actually the difference between a previous sample value and the current. This keeps values stored in the file low and keeps differences between each value needed to be stored, low. </li>\n<li>Each value is&nbsp; stored as a run-length encoded length (in bits) of the value, and immediately thereafter, the actual value. </li>\n<li>Run length encoding is accomplished by using a classic Huffman table. </li></ul>\n<p>So, now I need to implement the reading of the actual sample values and interpolate the values to come up with a full color image. After that, I probably need to implement the reading or approximation of white balance of the image, so that the program will be able to produce actually usable images. </p></div>\n","Body":"\t\t<div class=\"entry\">\n<p>Progress on the NEF / RAW file reader is slow, since i only work on it occasionally when I feel like coding in my spare time. However, I made some progress tonight, that I would like to update you about. </p>\n<p>First, NEF files are really TIFF files. So I need to parse them as a TIFF file to get some useful information out of them. TIFF files consists of so-called IFD tags, which in parts contains metadata about the image as well as the actual image data. Currently I have developed a basic IFD tag parser, that parses all of the IFD tags in a NEF file. </p>\n<p>Furthermore I have found, by looking at the IFD tags, that there are at least 3 embedded images in each NEF files. These are a small, low-quality 160x120 thumbnail represented as RGB data, a nearly full size JPG in low quality, as well as the actual NEF image data. While implementing the IFD parser, I had a lot of help from this <a title=\"TIFF FAQ\" href=\"http://www.awaresystems.be/imaging/tiff/faq.html\" target=\"_blank\">TIFF FAQ</a>, as well as from the official <a title=\"TIFF specification\" href=\"http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf\" target=\"_blank\">Adobe TIFF specification version 6</a>. </p>\n<p>Of course, the NEF image data is the interesting part. I have studied the file format, and made these conclusions; mostly based on what I can tell from the dcraw source code: </p>\n<ul>\n<li>The NEF file consists of Width * Height samples. <br /></li>\n<li>The data is represented as a Color Filter Array, that is each sample represents the intensity of a single color (<a title=\"CFA\" href=\"http://en.wikipedia.org/wiki/Color_filter_array\" target=\"_blank\">since this is what the camera shoots, as many other digital cameras</a>); </li>\n<li>therefore, I must interpolate 2 of the colors for each sample, to get a full-color, full-scale image. </li>\n<li>Each sample is 12 bits. </li></ul>\n<p>But this is not all; it is not so simple as to just read 12 bits per sample. The data is compressed. As far as I can tell currently; the following is the compression scheme. </p>\n<ul>\n<li>A µ-law type compression curve is used to limit the number of possible sample values to 634 (and consequently companding the 12 bit values to log<sub>2</sub>(634) = 9.4 bits of actual accuray; while preserving the 12 bits dynamic range). </li>\n<li>The curve values are embedded in the file. </li>\n<li>Samples are indices to values in the curve. </li></ul>\n<p>Samples are encoded (compressed) like this: </p>\n<ul>\n<li>A simple predictor is used, so each value read is actually the difference between a previous sample value and the current. This keeps values stored in the file low and keeps differences between each value needed to be stored, low. </li>\n<li>Each value is&nbsp; stored as a run-length encoded length (in bits) of the value, and immediately thereafter, the actual value. </li>\n<li>Run length encoding is accomplished by using a classic Huffman table. </li></ul>\n<p>So, now I need to implement the reading of the actual sample values and interpolate the values to come up with a full color image. After that, I probably need to implement the reading or approximation of white balance of the image, so that the program will be able to produce actually usable images. </p></div>\n","Author":"Dennis Riis","Published":"2007-08-09T21:44:20.0000000Z","IsPublished":true,"Comments":[{"Email":"dana9000@msn.com","Approved":true,"Body":"After backing up I have several NEF Files, I can see the image as it is not in jpg. The Camera was NIKON. This happen once be fore ans I was able to see the pictures. Any help would be great","Author":"Dana Thomas","Created":"2008-10-14T20:13:29.0000000Z"}],"Tags":["Digital photography","General technology",".NET"],"Created":"2007-08-09T21:44:20.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":31,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":71,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/32","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9489383Z","@etag":"00000001-0000-0800-0000-00000000001f","Non-Authoritative-Information":false}},{"Title":"Hobby project - Nikon NEF file reader","UrlName":"Hobby-project---Nikon-NEF-file-reader","BodyHtml":"\t\t<p>So, my new hobby is digital photography. I have bought a slightly used Nikon D50 camera, and has already taken a lot of pictures. </p>\n<p>If you're into digital photography, you will know that most cameras can produce both JPG and RAW output, where the JPG images are compressed by the camera firmware before being written to the flash card. The RAW files are uncompressed data as it was sampled by the camera CMOS (typically).&nbsp; Remembe, JPG is a lossy compression format, so detail will be lost if you just save the JPG's. Therefore, if you are serious about photography, you will want to shoot in RAW. </p>\n<p>However, as RAW files are essentially untouched image data, a RAW file needs to be processed by some image processing software before it can be used. This can be a cumbersome process, loading up the camera manufacturers software and maybe Photoshop or another image processing utility, processing each image, perhaps adjusting colors and saving the file into a more common format. </p>\n<p>Therefore I have decided to try and create a .NET program that does the conversion for me. For \"version 1\", it will probably only support the NEF file format that my Nikon produces (Nikon's proprietary RAW format), but perhaps I will add support for others along the way. This program will not be a replacement for professional photo processing software, but is meant to be an easy to use tool, that can be used when one simply needs to convert a NEF file to a JPEG or bitmap representation quickly. </p>\n<p>The NEF file format is not documented anywhere that I have been able to find on the web. But, looking at the files, they seem to be based on the TIFF image format, and they carry the TIFF file header. </p>\n<p>Also, I have found that <a title=\"Dave Coffin's home page\" href=\"http://cybercom.net/~dcoffin/\" target=\"_blank\">Dave Coffin</a> has created an excellent utility for doing just what I want, <a title=\"dcraw\" href=\"http://cybercom.net/~dcoffin/dcraw/\" target=\"_blank\">dcraw</a>. I could just as well just use that, but I think that it will be an interesting challenge to try to implement it myself. But I am quite sure that digging in to the <a title=\"dcraw\" href=\"http://cybercom.net/~dcoffin/dcraw/\" target=\"_blank\">dcraw</a> source code will provide me with most of the details that I need to decode the format.&nbsp; </p>","Body":"\t\t<p>So, my new hobby is digital photography. I have bought a slightly used Nikon D50 camera, and has already taken a lot of pictures. </p>\n<p>If you're into digital photography, you will know that most cameras can produce both JPG and RAW output, where the JPG images are compressed by the camera firmware before being written to the flash card. The RAW files are uncompressed data as it was sampled by the camera CMOS (typically).&nbsp; Remembe, JPG is a lossy compression format, so detail will be lost if you just save the JPG's. Therefore, if you are serious about photography, you will want to shoot in RAW. </p>\n<p>However, as RAW files are essentially untouched image data, a RAW file needs to be processed by some image processing software before it can be used. This can be a cumbersome process, loading up the camera manufacturers software and maybe Photoshop or another image processing utility, processing each image, perhaps adjusting colors and saving the file into a more common format. </p>\n<p>Therefore I have decided to try and create a .NET program that does the conversion for me. For \"version 1\", it will probably only support the NEF file format that my Nikon produces (Nikon's proprietary RAW format), but perhaps I will add support for others along the way. This program will not be a replacement for professional photo processing software, but is meant to be an easy to use tool, that can be used when one simply needs to convert a NEF file to a JPEG or bitmap representation quickly. </p>\n<p>The NEF file format is not documented anywhere that I have been able to find on the web. But, looking at the files, they seem to be based on the TIFF image format, and they carry the TIFF file header. </p>\n<p>Also, I have found that <a title=\"Dave Coffin's home page\" href=\"http://cybercom.net/~dcoffin/\" target=\"_blank\">Dave Coffin</a> has created an excellent utility for doing just what I want, <a title=\"dcraw\" href=\"http://cybercom.net/~dcoffin/dcraw/\" target=\"_blank\">dcraw</a>. I could just as well just use that, but I think that it will be an interesting challenge to try to implement it myself. But I am quite sure that digging in to the <a title=\"dcraw\" href=\"http://cybercom.net/~dcoffin/dcraw/\" target=\"_blank\">dcraw</a> source code will provide me with most of the details that I need to decode the format.&nbsp; </p>","Author":"Dennis Riis","Published":"2007-07-24T21:40:33.0000000Z","IsPublished":true,"Comments":[],"Tags":["Digital photography","General technology",".NET"],"Created":"2007-07-24T21:40:33.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":32,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":72,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/33","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9499374Z","@etag":"00000001-0000-0800-0000-000000000020","Non-Authoritative-Information":false}},{"Title":"Using a HTTP module to enforce a single domain","UrlName":"Using-a-HTTP-module-to-enforce-a-single-domain","BodyHtml":"\t\t<div class=\"entry\">\n<p>When I first setup this blog, you could access it on both \"driis.dk\" and \"www.driis.dk\". For various reasons, it is best practice to have a single url for the same content (it makes analyzing the site traffic easier, and avoids ambiguous URLs), so I wanted to setup the site to just use the www version of the domain name. </p>\n<p>Now, there is a couple of ways you could do this. The easiest way would be to just setup IIS to redirect incoming requests to <a title=\"Home\" href=\"http://www.driis.dk/\">http://www.driis.dk</a>. However, this site is hosted by a hosting company, where I do not have access to the IIS manager.&nbsp; </p>\n<p>Instead, I decided to write a <a title=\"HTTP module explanation\" href=\"http://support.microsoft.com/default.aspx/kb/307996\" target=\"_blank\">custom HTTP module</a> to do the redirecting. HTTP modules are great, as they allow you to hook into the ASP .NET application pipeline using the evens of the HttpApplication object. This makes it is a very strong tool to build advanced functionality. In this case, I decided to handle the BeginRequest event to check if the domain name is correct. If not, I issue a HTTP Redirect and ends the request. This way, all of the work associated with rendering the page is avoided if we just want to redirect anyway. The code is really simple, and basically goes like this: </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// Handles the BeginRequest event.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=\"sender\"&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=\"e\"&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void HandleBeginRequest(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HttpApplication app = (HttpApplication) sender;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string currentDomain = app.Context.Request.Url.DnsSafeHost.ToLower();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( currentDomain != TargetDomain )<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string newUrl = String.Format(\"http://{0}/{1}\", TargetDomain, app.Request.Url.PathAndQuery);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; app.Response.Redirect(newUrl);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; app.CompleteRequest();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </p>\n<p>&nbsp;Another advantage of this method, is that once it is configured in web.config, it always works. If you had used the IIS method, you would have to remember to configure IIS correctly again if the site switches server. </p>\n<p>You can download the code as well as the compiled assembly here: <a href=\"http://www.driis.dk/file.axd?file=dr.BlogEngine.DomainEnforcement.zip\">dr.BlogEngine.DomainEnforcement.zip (19,18 kb)</a> </p>\n<p>This is a domain enforcement module in its simplest form. It simply looks at all incoming requests, and if they don't match the specified domain, the request is redirected to the corresponding url on the correct domain. Feel free to use the module, expand it or use it as inspiration. Just don't blame me if it kills a kitten. </p>\n<p>To use the module, simply add it to the &lt;httpModules&gt; section in web.config: </p>\n<p>&lt;add name=\"DomainEnforcement\" type=\"dr.BlogEngine.DomainEnforcement.DomainEnforcementModule,dr.BlogEngine.DomainEnforcement\"/&gt; </p>\n<p>Then add an appSetting specifying the domain you would like to use as the primary domain: </p>\n<p>&lt;appSettings&gt;<br />&nbsp; &lt;add key=\"EnforceDomain\" value=\"www.driis.dk\" /&gt;<br />&lt;/appSettings&gt; </p>\n<p>That's all there is to it. </p></div>\n","Body":"\t\t<div class=\"entry\">\n<p>When I first setup this blog, you could access it on both \"driis.dk\" and \"www.driis.dk\". For various reasons, it is best practice to have a single url for the same content (it makes analyzing the site traffic easier, and avoids ambiguous URLs), so I wanted to setup the site to just use the www version of the domain name. </p>\n<p>Now, there is a couple of ways you could do this. The easiest way would be to just setup IIS to redirect incoming requests to <a title=\"Home\" href=\"http://www.driis.dk/\">http://www.driis.dk</a>. However, this site is hosted by a hosting company, where I do not have access to the IIS manager.&nbsp; </p>\n<p>Instead, I decided to write a <a title=\"HTTP module explanation\" href=\"http://support.microsoft.com/default.aspx/kb/307996\" target=\"_blank\">custom HTTP module</a> to do the redirecting. HTTP modules are great, as they allow you to hook into the ASP .NET application pipeline using the evens of the HttpApplication object. This makes it is a very strong tool to build advanced functionality. In this case, I decided to handle the BeginRequest event to check if the domain name is correct. If not, I issue a HTTP Redirect and ends the request. This way, all of the work associated with rendering the page is avoided if we just want to redirect anyway. The code is really simple, and basically goes like this: </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// Handles the BeginRequest event.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=\"sender\"&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /// &lt;param name=\"e\"&gt;&lt;/param&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private void HandleBeginRequest(object sender, EventArgs e)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HttpApplication app = (HttpApplication) sender;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string currentDomain = app.Context.Request.Url.DnsSafeHost.ToLower();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ( currentDomain != TargetDomain )<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string newUrl = String.Format(\"http://{0}/{1}\", TargetDomain, app.Request.Url.PathAndQuery);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; app.Response.Redirect(newUrl);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; app.CompleteRequest();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </p>\n<p>&nbsp;Another advantage of this method, is that once it is configured in web.config, it always works. If you had used the IIS method, you would have to remember to configure IIS correctly again if the site switches server. </p>\n<p>You can download the code as well as the compiled assembly here: <a href=\"http://www.driis.dk/file.axd?file=dr.BlogEngine.DomainEnforcement.zip\">dr.BlogEngine.DomainEnforcement.zip (19,18 kb)</a> </p>\n<p>This is a domain enforcement module in its simplest form. It simply looks at all incoming requests, and if they don't match the specified domain, the request is redirected to the corresponding url on the correct domain. Feel free to use the module, expand it or use it as inspiration. Just don't blame me if it kills a kitten. </p>\n<p>To use the module, simply add it to the &lt;httpModules&gt; section in web.config: </p>\n<p>&lt;add name=\"DomainEnforcement\" type=\"dr.BlogEngine.DomainEnforcement.DomainEnforcementModule,dr.BlogEngine.DomainEnforcement\"/&gt; </p>\n<p>Then add an appSetting specifying the domain you would like to use as the primary domain: </p>\n<p>&lt;appSettings&gt;<br />&nbsp; &lt;add key=\"EnforceDomain\" value=\"www.driis.dk\" /&gt;<br />&lt;/appSettings&gt; </p>\n<p>That's all there is to it. </p></div>\n","Author":"Dennis Riis","Published":"2007-07-09T21:35:55.0000000Z","IsPublished":true,"Comments":[],"Tags":[".NET"],"Created":"2007-07-09T21:35:55.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":33,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":73,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/34","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9509382Z","@etag":"00000001-0000-0800-0000-000000000021","Non-Authoritative-Information":false}},{"Title":"Setting up BlogEngine.NET","UrlName":"Setting-up-BlogEngine.NET","BodyHtml":"\t\t<p>After deciding to get this blog, I needed to find some software to run it on. I briefly considered writing it myself, but decided that it would be too much effort, and that I probably never would be able to finish it, considering work and other projects. </p>\n<p>So I started hunting around for some open source blogging software, and after an hour of googling, I decided on <a title=\"BlogEngine.NET\" href=\"http://www.dotnetblogengine.net/\" target=\"_blank\">BlogEngine.NET</a>. My main considerations where that it needed to be open source .NET (so I can fix stuff if it breaks), highly customizable and easy to extend. It was also important that it would work without a database, since my current web host only provides access to a sluggish and unreliable MySQL server (but hey, it's cheap ;-) </p>\n<p>I also considered <a title=\"dasBlog\" href=\"http://www.dasblog.info/\" target=\"_blank\">dasBlog</a>, but <a title=\"BlogEngine.NET\" href=\"http://www.dotnetblogengine.net/\" target=\"_blank\">BlogEngine.NET</a> seemed simpler and more suitable for my simple needs.&nbsp; </p>\n<p>Setting stuff up was simpler than expected.&nbsp; <a title=\"BlogEngine.NET\" href=\"http://www.dotnetblogengine.net/\" target=\"_blank\">BlogEngine.NET</a> target audience is developers, according to their web page, so I was prepared to be hand-editing a myriad of obscure configuration files - But after downloading the source and creating a virtual directory on my local machine for the application, it just ran. I actually started editing the settings.xml file before I found out that a UI was provided for it. So i customized some settings, and did a bit of changes to one of the default templates, before I was ready to go online. I actually think that setting it up for debugging in Visual Studio took longer than the actual customizations (My home machine runs Vista, and I had some problems with ASP .NET and IIS7, which I was able to resolve by using the \"Classic ASP.NET pipelining\" mode). </p>\n<p>I downloaded the source, so that I could try to compile it for myself and poke a bit around, before ultimately deciding to base my blog on this application. I haven't spent too much time looking at the code, but it seems to be well designed and thought-through. </p>\n<p>Anyways, uploading the site via FTP to my web host was no problem. I used Visual Studio to make a precompiled copy of the web site first. </p>\n<p>Setting up the blog, customizing it and publishing it took less than 2 hours. I did not get stuck at all, and everything behaved as expected; overall it was a nice experience. So thumbs up to the <a title=\"BlogEngine.NET\" href=\"http://www.dotnetblogengine.net/\" target=\"_blank\">BlogEngine.NET</a> developers ! </p>","Body":"\t\t<p>After deciding to get this blog, I needed to find some software to run it on. I briefly considered writing it myself, but decided that it would be too much effort, and that I probably never would be able to finish it, considering work and other projects. </p>\n<p>So I started hunting around for some open source blogging software, and after an hour of googling, I decided on <a title=\"BlogEngine.NET\" href=\"http://www.dotnetblogengine.net/\" target=\"_blank\">BlogEngine.NET</a>. My main considerations where that it needed to be open source .NET (so I can fix stuff if it breaks), highly customizable and easy to extend. It was also important that it would work without a database, since my current web host only provides access to a sluggish and unreliable MySQL server (but hey, it's cheap ;-) </p>\n<p>I also considered <a title=\"dasBlog\" href=\"http://www.dasblog.info/\" target=\"_blank\">dasBlog</a>, but <a title=\"BlogEngine.NET\" href=\"http://www.dotnetblogengine.net/\" target=\"_blank\">BlogEngine.NET</a> seemed simpler and more suitable for my simple needs.&nbsp; </p>\n<p>Setting stuff up was simpler than expected.&nbsp; <a title=\"BlogEngine.NET\" href=\"http://www.dotnetblogengine.net/\" target=\"_blank\">BlogEngine.NET</a> target audience is developers, according to their web page, so I was prepared to be hand-editing a myriad of obscure configuration files - But after downloading the source and creating a virtual directory on my local machine for the application, it just ran. I actually started editing the settings.xml file before I found out that a UI was provided for it. So i customized some settings, and did a bit of changes to one of the default templates, before I was ready to go online. I actually think that setting it up for debugging in Visual Studio took longer than the actual customizations (My home machine runs Vista, and I had some problems with ASP .NET and IIS7, which I was able to resolve by using the \"Classic ASP.NET pipelining\" mode). </p>\n<p>I downloaded the source, so that I could try to compile it for myself and poke a bit around, before ultimately deciding to base my blog on this application. I haven't spent too much time looking at the code, but it seems to be well designed and thought-through. </p>\n<p>Anyways, uploading the site via FTP to my web host was no problem. I used Visual Studio to make a precompiled copy of the web site first. </p>\n<p>Setting up the blog, customizing it and publishing it took less than 2 hours. I did not get stuck at all, and everything behaved as expected; overall it was a nice experience. So thumbs up to the <a title=\"BlogEngine.NET\" href=\"http://www.dotnetblogengine.net/\" target=\"_blank\">BlogEngine.NET</a> developers ! </p>","Author":"Dennis Riis","Published":"2007-07-09T21:33:43.0000000Z","IsPublished":true,"Comments":[],"Tags":[".NET"],"Created":"2007-07-09T21:33:43.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":34,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":74,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/35","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9509382Z","@etag":"00000001-0000-0800-0000-000000000022","Non-Authoritative-Information":false}},{"Title":"NEF File reader is on hold ...","UrlName":"NEF-File-reader-is-on-hold","BodyHtml":"I&nbsp;have not had very much time to blog nor work on my NEF file reader project for a while. It has been turbulent and busy times at work, lately. \n<p>This post is just to let you know, that the project is curently on hold. Perhaps I will resume it later, when I have more free time at hand. If anyone is interested in a peek at the source code as it looks now (incomplete and raw), please let me know; and I can mail it to you. There is not too much functionality, however. The largest obstacle in getting further with the project, is the need to decode the Huffman-encoded sample bit lengths embedded in the file - I have not resolved this yet. </p>","Body":"I&nbsp;have not had very much time to blog nor work on my NEF file reader project for a while. It has been turbulent and busy times at work, lately. \n<p>This post is just to let you know, that the project is curently on hold. Perhaps I will resume it later, when I have more free time at hand. If anyone is interested in a peek at the source code as it looks now (incomplete and raw), please let me know; and I can mail it to you. There is not too much functionality, however. The largest obstacle in getting further with the project, is the need to decode the Huffman-encoded sample bit lengths embedded in the file - I have not resolved this yet. </p>","Author":"Dennis Riis","Published":"2007-09-26T21:47:20.0000000Z","IsPublished":true,"Comments":[{"Email":"jonash1986@gmail.com","Approved":true,"Body":"Hi!<br /><br />I am very interested in your source code, if you haven't thrown it away (the post is after all from 2007). I was able to successfully (more or less) decode Canon's CR2 format and am now working on doing decoding the nef format. But my programming skills aren't that hot, so understanding what dcraw actually does is very difficult to me.","Author":"Jonas Hakansson","Created":"2010-11-12T15:01:00.0000000Z"}],"Tags":["Digital photography","General technology",".NET"],"Created":"2007-09-26T21:47:20.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Origin":"http://localhost:8080","Raven-Entity-Name":"Posts","Content-Encoding":"gzip","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":35,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":75,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/31","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9519380Z","@etag":"00000001-0000-0800-0000-000000000023","Non-Authoritative-Information":false}},{"Title":"Clever use of C# 3.0 LINQ Expressions","UrlName":"Clever-use-of-CSharp-3-LINQ-Expressions","BodyHtml":"\n\t\t<p>\n\t\t\t\t<a href=\"http://themechanicalbride.blogspot.com/\">Jafar Husain</a> shows us a quite clever way to <a href=\"http://themechanicalbride.blogspot.com/2007/03/symbols-on-steroids-in-c.html\" target=\"_blank\">use a C# 3.0 LINQ expression to get a symbol name</a>. I think this is a really good idea to use in cases when you need the name of a symbol as a string, since it avoids using hard-coded strings and gives us the option to use automatic refactorings without breaking stuff. And since it is implemented as an extension method; it does not pollute the interface of your classes. There might be a slight performance penalty when using this method; but I think it will be neglible for all but some extreme cases. But if you need to use it in a tight loop, you should propably make some performance measurements in advance ;-)</p>\n<p>Now, if only C# 3.0 had been available a couple of years ago, when I wrote a lot of statically typed datasets (automatically generated from the database schema using <a href=\"http://www.codesmithtools.com/\">CodeSmith</a>, of course). The bulk of the code in those datasets where properties that would generally retrieve a value from a DataRow in a column named the same as the property. If I could have used the approach mentioned above, I am sure it would have saved me some sweat during later refactorings of the code in question.</p>\n<p>It is a Good Thing our tools and languages continually evolves.</p>","Body":"\n\t\t<p>\n\t\t\t\t<a href=\"http://themechanicalbride.blogspot.com/\">Jafar Husain</a> shows us a quite clever way to <a href=\"http://themechanicalbride.blogspot.com/2007/03/symbols-on-steroids-in-c.html\" target=\"_blank\">use a C# 3.0 LINQ expression to get a symbol name</a>. I think this is a really good idea to use in cases when you need the name of a symbol as a string, since it avoids using hard-coded strings and gives us the option to use automatic refactorings without breaking stuff. And since it is implemented as an extension method; it does not pollute the interface of your classes. There might be a slight performance penalty when using this method; but I think it will be neglible for all but some extreme cases. But if you need to use it in a tight loop, you should propably make some performance measurements in advance ;-)</p>\n<p>Now, if only C# 3.0 had been available a couple of years ago, when I wrote a lot of statically typed datasets (automatically generated from the database schema using <a href=\"http://www.codesmithtools.com/\">CodeSmith</a>, of course). The bulk of the code in those datasets where properties that would generally retrieve a value from a DataRow in a column named the same as the property. If I could have used the approach mentioned above, I am sure it would have saved me some sweat during later refactorings of the code in question.</p>\n<p>It is a Good Thing our tools and languages continually evolves.</p>","Author":"Dennis Riis","Published":"2008-06-11T19:09:16.0000000Z","IsPublished":true,"Comments":[],"Tags":["LINQ",".NET"],"Created":"2008-06-11T19:09:16.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Origin":"http://localhost:8080","Raven-Entity-Name":"Posts","Content-Encoding":"gzip","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":36,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":76,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/22","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9629397Z","@etag":"00000001-0000-0800-0000-000000000024","Non-Authoritative-Information":false}},{"Title":"Parsing XML with PowerShell","UrlName":"Parsing-XML-with-PowerShell","BodyHtml":"\n\t\t<p>I'm addicted to <a title=\"Windows PowerShell\" href=\"http://www.microsoft.com/windowsserver2003/technologies/management/powershell/default.mspx\">PowerShell</a>. This cool scripting environment is simple to use, and with very few lines of script; it is possible to accomplish tasks that otherwise often would be a lot of tedious work. (If we didn't have PowerShell, I would propably wip up a C# program to do the same, but PowerShell is really lightweight, is interactive and is generally very forgiving for small tasks where you just \"want the job done\".</p>\n<p>As an example, today I needed to look at a log files generated by Visual Studio to figure out why the environment wouldn't start on my home PC. As it turns out, these log files are actually XML files. Of course I could have just started reading through the XML, but all the angle brackets confuses my brain; when I'm actually mostly interested in the text content of the log file.</p>\n<p>So, five minutes later, this 3-line script; parse-vslog.ps1 was born:<!-- code formatted by http://manoli.net/csharpformat/ --></p>\n<div class=\"csharpcode\"><pre class=\"alt\"><span class=\"lnum\">1: </span><span class=\"kwrd\">param</span>( [string]$file = $(<span class=\"kwrd\">throw</span> <span class=\"str\">\"required parameter\"</span> ) )</pre><pre><span class=\"lnum\">2: </span>$log = [xml](get-content $file)</pre><pre class=\"alt\"><span class=\"lnum\">3: </span>$log.activity.entry | select record,type,description | format-table -wrap -auto</pre></div>\n<p>\n<p>This is what happens in the script:</p>\n<p>On line 1, we declare that we need a $file parameter (variables and parameters is prefixed with $ in PowerShell), that should be required. </p>\n<p>On line 2 we use the <em>get-content </em>cmdlet to get the contents of a file. PowerShell has a lot of XML helping features, one of which is the ability to \"cast\" the content to XML using the<em> [xml] </em>construct. What really happens behind the scenes, is that PowerShell instantiates an XmlDocument and loads the text content of the file in that.</p>\n<p>Last, on line 3, we take advantage of the fact that PowerShell let's us select XML nodes by using simple dotted notation. Here we are interested in all the the /activity/entry nodes. We pass the result along the pipeline and selects the 3 most important values using the <em>select </em>cmdlet. And, lastly, we format the output nicely with <em>format-table, </em>specifying that we would like the cmdlet to auto-select the column widths (-auto) and that text output should be wrapped on multiple lines (-wrap).</p>\n<p>So insted of having to look at XML that goes on like this:</p>\n<p><!-- code formatted by http://manoli.net/csharpformat/ --></p>\n<div class=\"csharpcode\"><pre class=\"alt\"><span class=\"lnum\">1: </span><span class=\"kwrd\"><span class=\"html\">xml-stylesheet</span> <span class=\"attr\">type</span><span class=\"kwrd\">=\"text/xsl\"</span> <span class=\"attr\">href</span><span class=\"kwrd\">=\"ActivityLog.xsl\"</span>?<span class=\"kwrd\">&gt;</span><pre><span class=\"lnum\">2: </span><span class=\"kwrd\"></span><span class=\"html\">activity</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">3: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">4: </span>    <span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span>1<span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">5: </span>    <span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span>2008/06/15 15:44:18.220<span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">6: </span>    <span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span>Information<span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">7: </span>    <span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span>Microsoft Visual Studio<span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">8: </span>    <span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span>Visual Studio Version: 9.0.21022.8<span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">9: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">10: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">11: </span>    <span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span>2<span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">12: </span>    <span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span>2008/06/15 15:44:18.221<span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">13: </span>    <span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span>Information<span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">14: </span>    <span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span>Microsoft Visual Studio<span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">15: </span>    <span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span>Running in User Groups: Administrators Users<span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">16: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">17: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">18: </span>    <span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span>3<span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">19: </span>    <span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span>2008/06/15 15:44:18.221<span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">20: </span>    <span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span>Information<span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">21: </span>    <span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span>Microsoft Visual Studio<span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">22: </span>    <span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span>ProductID: 91904-270-0003722-60402<span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">23: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">24: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">25: </span>    <span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span>19<span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">26: </span>    <span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span>2008/06/15 15:44:19.094<span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">27: </span>    <span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">28: </span>    <span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span>Microsoft Visual Studio<span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">29: </span>    <span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span>Destroying Main Window<span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">30: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">31: </span><span class=\"kwrd\"></span><span class=\"html\">activity</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">32: </span> </pre></span></pre></div>\n<p>\n<p>Now, I can get this much nicer output in the console (note that the XML above has been shortened for the blog. It was actually around 150 lines):</p>\n<p><pre>record type        description\n------ ----        -----------\n1      Information Visual Studio Version: 9.0.21022.8\n2      Information Running in User Groups: Administrators Users\n3      Information ProductID: 91904-270-0003722-60402\n4      Information Available Drive Space: C:\\ drive has 42128211968 bytes; D:\\ drive has 38531145728 bytes; E:\\ drive h\n                   as 127050969088 bytes; F:\\ drive has 117087354880 bytes\n5      Information Internet Explorer Version: 7.0.6001.18063\n6      Information Microsoft Data Access Version: 6.0.6001.18000\n7      Information .NET Framework Version: 2.0.50727.1434\n8      Information MSXML Version: 6.20.1076.0\n9      Information Loading UI library\n10     Information Entering function CVsPackageInfo::HrInstantiatePackage\n11     Information Begin package load [Visual Studio Source Control Integration Package]\n12     Information Entering function CVsPackageInfo::HrInstantiatePackage\n13     Information Begin package load [team foundation server provider stub package]\n14     Information End package load [team foundation server provider stub package]\n15     Information End package load [Visual Studio Source Control Integration Package]\n16     Information Entering function VBDispatch::GetTypeLib\n17     Information Entering function LoadDTETypeLib\n18     Error       Leaving function LoadDTETypeLib\n19                 Destroying Main Window\n</pre>  \n<p>\n<p>I think this is a good representative of the strength of PowerShell. Using only a few lines of script and a minimum of time, I created a reusable script, that will probaply save a lot of time in the future.</p></p></p></p></p>","Body":"\n\t\t<p>I'm addicted to <a title=\"Windows PowerShell\" href=\"http://www.microsoft.com/windowsserver2003/technologies/management/powershell/default.mspx\">PowerShell</a>. This cool scripting environment is simple to use, and with very few lines of script; it is possible to accomplish tasks that otherwise often would be a lot of tedious work. (If we didn't have PowerShell, I would propably wip up a C# program to do the same, but PowerShell is really lightweight, is interactive and is generally very forgiving for small tasks where you just \"want the job done\".</p>\n<p>As an example, today I needed to look at a log files generated by Visual Studio to figure out why the environment wouldn't start on my home PC. As it turns out, these log files are actually XML files. Of course I could have just started reading through the XML, but all the angle brackets confuses my brain; when I'm actually mostly interested in the text content of the log file.</p>\n<p>So, five minutes later, this 3-line script; parse-vslog.ps1 was born:<!-- code formatted by http://manoli.net/csharpformat/ --></p>\n<div class=\"csharpcode\"><pre class=\"alt\"><span class=\"lnum\">1: </span><span class=\"kwrd\">param</span>( [string]$file = $(<span class=\"kwrd\">throw</span> <span class=\"str\">\"required parameter\"</span> ) )</pre><pre><span class=\"lnum\">2: </span>$log = [xml](get-content $file)</pre><pre class=\"alt\"><span class=\"lnum\">3: </span>$log.activity.entry | select record,type,description | format-table -wrap -auto</pre></div>\n<p>\n<p>This is what happens in the script:</p>\n<p>On line 1, we declare that we need a $file parameter (variables and parameters is prefixed with $ in PowerShell), that should be required. </p>\n<p>On line 2 we use the <em>get-content </em>cmdlet to get the contents of a file. PowerShell has a lot of XML helping features, one of which is the ability to \"cast\" the content to XML using the<em> [xml] </em>construct. What really happens behind the scenes, is that PowerShell instantiates an XmlDocument and loads the text content of the file in that.</p>\n<p>Last, on line 3, we take advantage of the fact that PowerShell let's us select XML nodes by using simple dotted notation. Here we are interested in all the the /activity/entry nodes. We pass the result along the pipeline and selects the 3 most important values using the <em>select </em>cmdlet. And, lastly, we format the output nicely with <em>format-table, </em>specifying that we would like the cmdlet to auto-select the column widths (-auto) and that text output should be wrapped on multiple lines (-wrap).</p>\n<p>So insted of having to look at XML that goes on like this:</p>\n<p><!-- code formatted by http://manoli.net/csharpformat/ --></p>\n<div class=\"csharpcode\"><pre class=\"alt\"><span class=\"lnum\">1: </span><span class=\"kwrd\"><span class=\"html\">xml-stylesheet</span> <span class=\"attr\">type</span><span class=\"kwrd\">=\"text/xsl\"</span> <span class=\"attr\">href</span><span class=\"kwrd\">=\"ActivityLog.xsl\"</span>?<span class=\"kwrd\">&gt;</span><pre><span class=\"lnum\">2: </span><span class=\"kwrd\"></span><span class=\"html\">activity</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">3: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">4: </span>    <span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span>1<span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">5: </span>    <span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span>2008/06/15 15:44:18.220<span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">6: </span>    <span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span>Information<span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">7: </span>    <span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span>Microsoft Visual Studio<span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">8: </span>    <span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span>Visual Studio Version: 9.0.21022.8<span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">9: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">10: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">11: </span>    <span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span>2<span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">12: </span>    <span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span>2008/06/15 15:44:18.221<span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">13: </span>    <span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span>Information<span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">14: </span>    <span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span>Microsoft Visual Studio<span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">15: </span>    <span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span>Running in User Groups: Administrators Users<span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">16: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">17: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">18: </span>    <span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span>3<span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">19: </span>    <span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span>2008/06/15 15:44:18.221<span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">20: </span>    <span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span>Information<span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">21: </span>    <span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span>Microsoft Visual Studio<span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">22: </span>    <span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span>ProductID: 91904-270-0003722-60402<span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">23: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">24: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">25: </span>    <span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span>19<span class=\"kwrd\"></span><span class=\"html\">record</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">26: </span>    <span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span>2008/06/15 15:44:19.094<span class=\"kwrd\"></span><span class=\"html\">time</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">27: </span>    <span class=\"kwrd\"></span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span><span class=\"html\">type</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">28: </span>    <span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span>Microsoft Visual Studio<span class=\"kwrd\"></span><span class=\"html\">source</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">29: </span>    <span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span>Destroying Main Window<span class=\"kwrd\"></span><span class=\"html\">description</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">30: </span>  <span class=\"kwrd\"></span><span class=\"html\">entry</span><span class=\"kwrd\">&gt;</span></pre><pre class=\"alt\"><span class=\"lnum\">31: </span><span class=\"kwrd\"></span><span class=\"html\">activity</span><span class=\"kwrd\">&gt;</span></pre><pre><span class=\"lnum\">32: </span> </pre></span></pre></div>\n<p>\n<p>Now, I can get this much nicer output in the console (note that the XML above has been shortened for the blog. It was actually around 150 lines):</p>\n<p><pre>record type        description\n------ ----        -----------\n1      Information Visual Studio Version: 9.0.21022.8\n2      Information Running in User Groups: Administrators Users\n3      Information ProductID: 91904-270-0003722-60402\n4      Information Available Drive Space: C:\\ drive has 42128211968 bytes; D:\\ drive has 38531145728 bytes; E:\\ drive h\n                   as 127050969088 bytes; F:\\ drive has 117087354880 bytes\n5      Information Internet Explorer Version: 7.0.6001.18063\n6      Information Microsoft Data Access Version: 6.0.6001.18000\n7      Information .NET Framework Version: 2.0.50727.1434\n8      Information MSXML Version: 6.20.1076.0\n9      Information Loading UI library\n10     Information Entering function CVsPackageInfo::HrInstantiatePackage\n11     Information Begin package load [Visual Studio Source Control Integration Package]\n12     Information Entering function CVsPackageInfo::HrInstantiatePackage\n13     Information Begin package load [team foundation server provider stub package]\n14     Information End package load [team foundation server provider stub package]\n15     Information End package load [Visual Studio Source Control Integration Package]\n16     Information Entering function VBDispatch::GetTypeLib\n17     Information Entering function LoadDTETypeLib\n18     Error       Leaving function LoadDTETypeLib\n19                 Destroying Main Window\n</pre>  \n<p>\n<p>I think this is a good representative of the strength of PowerShell. Using only a few lines of script and a minimum of time, I created a reusable script, that will probaply save a lot of time in the future.</p></p></p></p></p>","Author":"Dennis Riis","Published":"2008-06-15T18:02:09.0000000Z","IsPublished":true,"Comments":[{"Email":"john.ruth@gmail.com","Approved":true,"Body":"Did you ever figure out why it was visual studio was crashing at LoadDTETypeLib?","Author":"John","Created":"2011-03-21T22:12:25.7000000Z"},{"Email":"dr@driis.dk","Approved":true,"Body":"John, as far as I can remember it was fixed when reinstalling Team Explorer. (I might be wrong, though).","Author":"Dennis Riis","Created":"2011-03-21T22:33:08.1910000Z"}],"Tags":["General technology","PowerShell",".NET"],"Created":"2008-06-15T18:02:09.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":38,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":78,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/20","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9749404Z","@etag":"00000001-0000-0800-0000-000000000026","Non-Authoritative-Information":false}},{"Title":"A new home for the Chrome Password Recovery Tool","UrlName":"new-home-for-chrome-password-recovery-tool","BodyHtml":"<p>In 2008, I created the <a href=\"http://www.driis.dk/2008/12/Introducing-The-Google-Chrome-Password-Recovery-Tool\">Chrome Password Recovery Tool</a>. However, the download links on that page have been lost in a server migration. </p>\n\n<p>Since I have been getting some email about the absence of a download of the tool, I decided to release it as open source on CodePlex. So <a href=\"http://cprecover.codeplex.com/\">go get it from here</a>, if you need it.</p>\n\n<p>This latest version supports the latest Chrome version (10), and enables reading the passwords while Chrome is running.</p>\n","Body":"In 2008, I created the [Chrome Password Recovery Tool][2]. However, the download links on that page have been lost in a server migration. \r\n\r\nSince I have been getting some email about the absence of a download of the tool, I decided to release it as open source on CodePlex. So [go get it from here][1], if you need it.\r\n\r\nThis latest version supports the latest Chrome version (10), and enables reading the passwords while Chrome is running.\r\n\r\n  [1]: http://cprecover.codeplex.com/\r\n  [2]: http://www.driis.dk/2008/12/Introducing-The-Google-Chrome-Password-Recovery-Tool","Author":null,"Published":"2011-04-13T20:46:24.0000000Z","IsPublished":true,"Comments":[],"Tags":[".NET"],"Created":"2011-04-13T20:51:22.0430000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":false,"Raven-Replication-History":[{"Raven-Replication-Version":39,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":79,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"posts/2049","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9759415Z","@etag":"00000001-0000-0800-0000-000000000027","Non-Authoritative-Information":false}},{"Title":"What is TypeScript and why should I care ? ","UrlName":"what-is-typescript","BodyHtml":"<p>This tuesday, I watched Anders Hejlsberg present Microsoft's new language bet, <a href=\"http://www.typescriptlang.org/\">TypeScript</a>. This is basically JavaScript with types. It compiles to JavaScript, so, at runtime, it <em>is</em> JavaScript, nothing else. And therefore, it will run whereever JavaScript can run: In any browser, on node.js and so on.</p>\n\n<p>TypeScript adds types as a first class citizen to JavaScript. This means you can use classes and interfaces in your code, and have the compiler do type checking. TypeScript is compiled to the idiomatic JavaScript, we would have to write ourselves, if we want to do object oriented programming in JavaScript. It also adds modules, and a bit nicer anonymous function syntax. Already available is some really nice tooling for Visual Studio 2012. </p>\n\n<p>This is an example of how a snippet of TypeScript looks:</p>\n\n<pre><code class=\"prettyprint\">class Greeter {\n    greeting: string;\n    constructor (message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}   \n\nvar greeter = new Greeter(\"world\");\nvar greeting = greeter.greet();\n</code></pre>\n\n<h1>Why should I care ?</h1>\n\n<p>We are building larger and larger applications in JavaScript. This is true both to support great user experiences on the web, but JavaScript is also used more and more for many other purposes: You can create standalone applications or servers in node.js, you can use HTML+JavaScript for Windows 8 programs and other platforms. The lack of types in JavaScript means that development and debugging time can be slowed down, and bugs can be hard to find.</p>\n\n<p>You might not agree with this, but consider: </p>\n\n<ul>\n<li>Have you ever misspelled a method in JavaScript, and not found out until that exact method ? This does not happen with TypeScript.</li>\n<li>Ever had to look some method signature up in the jQuery documentation, then spending time on Google to find the right one - with the TypeScript tools, you get auto completion right in the editor (Visual Studio for now).</li>\n</ul>\n\n<p>Basically you get all the safety nets of a statically typed language, while still having all the benefits from JavaScript. The static typing also allows for features like auto-completion and refactoring support. One of the core benefits from using TypeScript is added tool support, and in turn, developer productivity.  </p>\n\n<h1>Is this not just a rip-off of CoffeeScript ?</h1>\n\n<p>No, I don't think so. CoffeeScript is about fixing the syntax of JavaScript, but it does not touch the type system. This is the core difference betweeen the two. You might like or dislike the CoffeeScript syntax, but the CoffeeScript compiler is not aware of types.</p>\n\n<p>I think TypeScript does a good job of keeping a familiar syntax, while reducing the amount of typing needed to create, for instance, a class. TypeScript also does automatic capture of the <code class=\"prettyprint\">this</code> variable for anonymous functions, which is very neat.</p>\n\n<h1>Go try it out</h1>\n\n<p>You can download the bits for VS or node.js <a href=\"http://www.typescriptlang.org/#Download\">here</a>, and there is also an <a href=\"http://www.typescriptlang.org/Playground/\">online playground</a>, where you can run TypeScript directly in your browser. It's a preview, but is seems pretty stable to me.</p>\n\n<p>Maybe it is not for you, maybe you are the dynamic language type of guy - But, I am excited about this and for fans of static typing, this is great news. </p>\n\n<p>I might even get excited about the prospect of building a node.js app now.</p>\n","Body":"This tuesday, I watched Anders Hejlsberg present Microsoft's new language bet, [TypeScript][1]. This is basically JavaScript with types. It compiles to JavaScript, so, at runtime, it _is_ JavaScript, nothing else. And therefore, it will run whereever JavaScript can run: In any browser, on node.js and so on.\r\n\r\nTypeScript adds types as a first class citizen to JavaScript. This means you can use classes and interfaces in your code, and have the compiler do type checking. TypeScript is compiled to the idiomatic JavaScript, we would have to write ourselves, if we want to do object oriented programming in JavaScript. It also adds modules, and a bit nicer anonymous function syntax. Already available is some really nice tooling for Visual Studio 2012. \r\n\r\nThis is an example of how a snippet of TypeScript looks:\r\n\r\n    class Greeter {\r\n    \tgreeting: string;\r\n    \tconstructor (message: string) {\r\n    \t\tthis.greeting = message;\r\n    \t}\r\n    \tgreet() {\r\n    \t\treturn \"Hello, \" + this.greeting;\r\n    \t}\r\n    }   \r\n    \r\n    var greeter = new Greeter(\"world\");\r\n    var greeting = greeter.greet();\r\n\r\n\r\n\r\n\r\nWhy should I care ?\r\n==\r\n\r\nWe are building larger and larger applications in JavaScript. This is true both to support great user experiences on the web, but JavaScript is also used more and more for many other purposes: You can create standalone applications or servers in node.js, you can use HTML+JavaScript for Windows 8 programs and other platforms. The lack of types in JavaScript means that development and debugging time can be slowed down, and bugs can be hard to find.\r\n\r\nYou might not agree with this, but consider: \r\n\r\n* Have you ever misspelled a method in JavaScript, and not found out until that exact method ? This does not happen with TypeScript.\r\n* Ever had to look some method signature up in the jQuery documentation, then spending time on Google to find the right one - with the TypeScript tools, you get auto completion right in the editor (Visual Studio for now).\r\n\r\nBasically you get all the safety nets of a statically typed language, while still having all the benefits from JavaScript. The static typing also allows for features like auto-completion and refactoring support. One of the core benefits from using TypeScript is added tool support, and in turn, developer productivity.  \r\n\r\nIs this not just a rip-off of CoffeeScript ? \r\n==\r\nNo, I don't think so. CoffeeScript is about fixing the syntax of JavaScript, but it does not touch the type system. This is the core difference betweeen the two. You might like or dislike the CoffeeScript syntax, but the CoffeeScript compiler is not aware of types.\r\n\r\nI think TypeScript does a good job of keeping a familiar syntax, while reducing the amount of typing needed to create, for instance, a class. TypeScript also does automatic capture of the `this` variable for anonymous functions, which is very neat.\r\n\r\nGo try it out\r\n==\r\nYou can download the bits for VS or node.js [here][2], and there is also an [online playground][3], where you can run TypeScript directly in your browser. It's a preview, but is seems pretty stable to me.\r\n\r\nMaybe it is not for you, maybe you are the dynamic language type of guy - But, I am excited about this and for fans of static typing, this is great news. \r\n\r\nI might even get excited about the prospect of building a node.js app now.\r\n\r\n\r\n  [1]: http://www.typescriptlang.org/\r\n  [2]: http://www.typescriptlang.org/#Download\r\n  [3]: http://www.typescriptlang.org/Playground/","Author":null,"Published":"2012-10-05T17:05:10.0641430","IsPublished":true,"Comments":[],"Tags":["TypeScript",".NET"],"Created":"2012-10-05T17:05:09.9705394","Modified":"2012-10-06T09:10:26.4624879","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Raven-Replication-History":[{"Raven-Replication-Version":40,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":80,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af","@id":"45bd30c68e704c56911fae67be26cdc4","Temp-Index-Score":1.0,"Last-Modified":"2014-01-30T23:13:25.9759415Z","@etag":"00000001-0000-0800-0000-000000000028","Non-Authoritative-Information":false}},{"Title":"Getting your public IP from a PowerShell script","UrlName":"Getting-your-public-IP-from-a-PowerShell-script","BodyHtml":"\n\t\t<p>I often work on computers at different locations, and often, I need to know what public IP I am using to connect to the internet. Of course, this is easy to find out - I can just go to a website that tells me my IP, such as <a href=\"http://myip.dk/\">http://myip.dk/</a>.</p>\n    <p>But I find this to be suboptimal. If I am configuring something, finding the IP involves firing up a browser, going to the site, and copying the IP displayed. It is a speed bump when I am trying to be productive - and the display-my-ip sites are often covered in commercials, which I dislike.</p>\n    <p>So today, I decided to write a PowerShell script that can tell me my current public IP address. First, I needed a reliable way of finding it. Of course, I could just screen-scrape off a site such as <a href=\"http://myip.dk/\">http://myip.dk/</a>, but it has some disadvantages. I can't know if the html structure will change - and it would mean that I would have to download all of the HTML just to get a few bytes of IP address. Furthermore, I don't know whether it would be legal at all.</p>\n    <p>Therefore, I started by writing a small ASP .NET HTTP handler, that could tell me my IP. I put the following simple code in the ProcessRequest method:</p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre><span class=\"lnum\"> 1: </span>    <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> ProcessRequest (HttpContext context) {</pre>\n      <pre><span class=\"lnum\"> 2: </span>        context.Response.ContentType = <span class=\"str\">\"text/plain\"</span>;</pre>\n      <pre><span class=\"lnum\"> 3: </span>        context.Response.AddHeader(<span class=\"str\">\"X-RemoteIP\"</span>, HttpContext.Current.Request.UserHostAddress);</pre>\n      <pre><span class=\"lnum\"> 4: </span>        context.Response.Write(HttpContext.Current.Request.UserHostAddress);        </pre>\n      <pre><span class=\"lnum\"> 5: </span>    }</pre>\n    </div><p></p>\n    <p>This simply writes the IP address the handler is accessed with, to the response as well as to a custom http header. I then deployed this handler to my website.</p>\n    <p>Next, writing the PowerShell script, was equally simple; we can simply use the handy System.Net.WebClient class:</p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre><span class=\"lnum\"> 1: </span>$ipFinderHost = <span class=\"str\">\"http://www.somedomain.org/GetIP.ashx\"</span></pre>\n      <pre><span class=\"lnum\"> 2: </span>$c = new-object System.Net.WebClient</pre>\n      <pre><span class=\"lnum\"> 3: </span>$c.DownloadString($ipFinderHost)</pre>\n    </div><p></p>\n    <p>\nAnd voila, I have a PowerShell script that displays my public IP address. And, since I have the <a title=\"PSCX on CodePlex\" href=\"http://www.codeplex.com/PowerShellCX\">PowerShell Community Extensions</a> installed, I can use the set-clipboard cmdlet to copy it to the clipboard. </p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre><span class=\"lnum\"> 1: </span>get-myip | set-clipboard</pre>\n    </div><p></p>\n    <p>\nMuch nicer than manually copying from the text in a browser :-) If you decide to use this script yourself, obviously you will need to change the URL in the script to where you have deployed the GetIP.ashx handler.</p>","Body":"\n\t\t<p>I often work on computers at different locations, and often, I need to know what public IP I am using to connect to the internet. Of course, this is easy to find out - I can just go to a website that tells me my IP, such as <a href=\"http://myip.dk/\">http://myip.dk/</a>.</p>\n    <p>But I find this to be suboptimal. If I am configuring something, finding the IP involves firing up a browser, going to the site, and copying the IP displayed. It is a speed bump when I am trying to be productive - and the display-my-ip sites are often covered in commercials, which I dislike.</p>\n    <p>So today, I decided to write a PowerShell script that can tell me my current public IP address. First, I needed a reliable way of finding it. Of course, I could just screen-scrape off a site such as <a href=\"http://myip.dk/\">http://myip.dk/</a>, but it has some disadvantages. I can't know if the html structure will change - and it would mean that I would have to download all of the HTML just to get a few bytes of IP address. Furthermore, I don't know whether it would be legal at all.</p>\n    <p>Therefore, I started by writing a small ASP .NET HTTP handler, that could tell me my IP. I put the following simple code in the ProcessRequest method:</p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre><span class=\"lnum\"> 1: </span>    <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> ProcessRequest (HttpContext context) {</pre>\n      <pre><span class=\"lnum\"> 2: </span>        context.Response.ContentType = <span class=\"str\">\"text/plain\"</span>;</pre>\n      <pre><span class=\"lnum\"> 3: </span>        context.Response.AddHeader(<span class=\"str\">\"X-RemoteIP\"</span>, HttpContext.Current.Request.UserHostAddress);</pre>\n      <pre><span class=\"lnum\"> 4: </span>        context.Response.Write(HttpContext.Current.Request.UserHostAddress);        </pre>\n      <pre><span class=\"lnum\"> 5: </span>    }</pre>\n    </div><p></p>\n    <p>This simply writes the IP address the handler is accessed with, to the response as well as to a custom http header. I then deployed this handler to my website.</p>\n    <p>Next, writing the PowerShell script, was equally simple; we can simply use the handy System.Net.WebClient class:</p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre><span class=\"lnum\"> 1: </span>$ipFinderHost = <span class=\"str\">\"http://www.somedomain.org/GetIP.ashx\"</span></pre>\n      <pre><span class=\"lnum\"> 2: </span>$c = new-object System.Net.WebClient</pre>\n      <pre><span class=\"lnum\"> 3: </span>$c.DownloadString($ipFinderHost)</pre>\n    </div><p></p>\n    <p>\nAnd voila, I have a PowerShell script that displays my public IP address. And, since I have the <a title=\"PSCX on CodePlex\" href=\"http://www.codeplex.com/PowerShellCX\">PowerShell Community Extensions</a> installed, I can use the set-clipboard cmdlet to copy it to the clipboard. </p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre><span class=\"lnum\"> 1: </span>get-myip | set-clipboard</pre>\n    </div><p></p>\n    <p>\nMuch nicer than manually copying from the text in a browser :-) If you decide to use this script yourself, obviously you will need to change the URL in the script to where you have deployed the GetIP.ashx handler.</p>","Author":"Dennis Riis","Published":"2009-01-14T18:00:00.0000000Z","IsPublished":true,"Comments":[{"Email":"jonas@bytopia.dk","Approved":true,"Body":"Excellent solution sir!\n\nWill give this a try","Author":"Jonas Mellquist","Created":"2012-10-04T11:39:56.5464129"},{"Email":"jamesWem@gmail.com","Approved":true,"Body":"In fact when someone doesn’t understand after that its up to other users that they will help, so here it happens.","Author":"Cialis 20 mg","Created":"2018-03-26T04:26:43.5609968"}],"Tags":["PowerShell","General technology","ASP .NET",".NET"],"Created":"2009-01-14T18:00:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":"false","Raven-Replication-History":[{"Raven-Replication-Version":8,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"},{"Raven-Replication-Version":48,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":1282,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15","@id":"posts/10","Temp-Index-Score":1.0,"Last-Modified":"2018-03-26T04:26:44.5197065Z","@etag":"00000001-0000-c500-0000-000000000002","Non-Authoritative-Information":false}},{"Title":"A Relative Path Facility For Castle Windsor","UrlName":"A-Relative-Path-Facility-For-Castle-Windsor","BodyHtml":"\n\t\t<p>At work, we use <a title=\"Castle Project\" href=\"http://www.castleproject.org/container/index.html\" target=\"_blank\">Castle Windsor</a> for <a title=\"DI on Wikipedia\" href=\"http://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\">Dependency Injection</a>. In Castle Windsor, as with any dependency injection framework, you can configure components identified by an interface, that can be resolved at runtime using the dependency injection framework. Components can have dependencies, which can be yet other components and so on. In this way, you can have your dependency injection framework create a whole graph of objects for you.</p>\n    <p>One limitation we run into now and then, is with components, that depend on a file path to work. Typically, we need to know the full path of the file to load it. But hardcoding the full path in the configuration file is generally a bad idea, it will create problems when you move your web application between environments. Also, we cannot just pass the path as a virtual path to the component and then have the component call Server.MapPath to map the path - since that would mean changing the interface of the component just to accomodate the injection framework, which is not a good idea. And, what is worse, you would create a dependency on System.Web in a place where it probably isn't needed.</p>\n    <p>Now, one way to get around this would be to create a wrapper interface, IFilePath, which only should exist in order to be passed into the component and being able to convert the path. This also involves changing the component and generally feels like a bad idea.</p>\n    <p>Luckily, the Windsor IoC container offers a large variety of extension points - one being <a href=\"http://www.castleproject.org/container/documentation/trunk/concepts/facility.html\">facilities</a>. So I wrote a facility, that allows paths configured in Castle Windsor to be relative. The way this works is by registering an <em>ISubDependencyResolver </em>in the <em>IKernel </em>instance. When resolving a dependency, Windsor will ask the <em>ISubDependencyResolver </em>whether it can resolve the dependency using the <em>CanResolve </em>method. By examining the passed ComponentModel and in particular it's configuration node, I look for a custom attribute on the dependency, pathType. If found (and the dependency is of type string), then we can easily resolve the dependency by taking the relative path in the configuration tag and making it absolute.</p>\n    <p>This will allow you to have your Windsor configuration look like this (notice the one-line facility registration - this is what registers the custom facility in Windsor, and makes us able to register the <em>path </em>dependency as a virtual path):</p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre class=\"alt\">        <span class=\"lnum\"> 1: </span>  <span class=\"kwrd\">&lt;</span><span class=\"html\">castle</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 2: </span>    <span class=\"kwrd\">&lt;</span><span class=\"html\">facilities</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre class=\"alt\">        <span class=\"lnum\"> 3: </span>      <span class=\"kwrd\">&lt;</span><span class=\"html\">facility</span> <span class=\"attr\">id</span><span class=\"kwrd\">=\"pathResolver\"</span> <span class=\"attr\">type</span><span class=\"kwrd\">=\"dr.Castle.WebPathFacility.RelativePathSupportFacility, dr.Castle.WebPathFacility\"</span> <span class=\"kwrd\">/&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 4: </span>    <span class=\"kwrd\">&lt;/</span><span class=\"html\">facilities</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre class=\"alt\">        <span class=\"lnum\"> 5: </span>    <span class=\"kwrd\">&lt;</span><span class=\"html\">components</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 6: </span>      <span class=\"kwrd\">&lt;</span><span class=\"html\">component</span> <span class=\"attr\">id</span><span class=\"kwrd\">=\"dummy\"</span></pre>\n      <pre class=\"alt\">        <span class=\"lnum\"> 7: </span>                 <span class=\"attr\">service</span><span class=\"kwrd\">=\"dr.Castle.WebPathFacility.Test.IDummy, dr.Castle.WebPathFacility.Test\"</span></pre>\n      <pre>        <span class=\"lnum\"> 8: </span>                 <span class=\"attr\">type</span><span class=\"kwrd\">=\"dr.Castle.WebPathFacility.Test.Dummy, dr.Castle.WebPathFacility.Test\"</span> <span class=\"kwrd\">&gt;</span></pre>\n      <pre class=\"alt\">        <span class=\"lnum\"> 9: </span>        <span class=\"kwrd\">&lt;</span><span class=\"html\">parameters</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 10: </span>          <span class=\"kwrd\">&lt;</span><span class=\"html\">path</span> <span class=\"attr\">pathType</span><span class=\"kwrd\">=\"Relative\"</span><span class=\"kwrd\">&gt;</span>App_Data/test.xml<span class=\"kwrd\">&lt;/</span><span class=\"html\">path</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre class=\"alt\">        <span class=\"lnum\"> 11: </span>        <span class=\"kwrd\">&lt;/</span><span class=\"html\">parameters</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 12: </span>      <span class=\"kwrd\">&lt;/</span><span class=\"html\">component</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre class=\"alt\">        <span class=\"lnum\"> 13: </span>    <span class=\"kwrd\">&lt;/</span><span class=\"html\">components</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 14: </span>  <span class=\"kwrd\">&lt;/</span><span class=\"html\">castle</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre> </pre>\n    </div>\n    <p>The valid values for pathType are: </p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 1: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">enum</span> PathType</pre>\n      <pre>\n        <span class=\"lnum\"> 2: </span>        {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 3: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 4: </span>            <span class=\"rem\">/// The path is absolute (we will do nothing to it).</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 5: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 6: </span>            Absolute = 0,</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 7: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 8: </span>            <span class=\"rem\">/// The path is a virtual path to a web application resource.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 9: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 10: </span>            Virtual,</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 11: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 12: </span>            <span class=\"rem\">/// The path is relative to the current directory.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 13: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 14: </span>            Relative</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 15: </span>        }</pre>\n    </div>\n    <p>The code for the facility it self is really simple, since it simply registers our dependency resolver to the Kernel. The advantage of using a facility, is that it can be declared in the config, and Windsor will automatically initialize for all containers you create: </p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 1: </span>\n        <span class=\"kwrd\">using</span> Castle.MicroKernel.Facilities;</pre>\n      <pre>\n        <span class=\"lnum\"> 2: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 3: </span>\n        <span class=\"kwrd\">namespace</span> dr.Castle.WebPathFacility</pre>\n      <pre>\n        <span class=\"lnum\"> 4: </span>{</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 5: </span>    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> RelativePathSupportFacility : AbstractFacility</pre>\n      <pre>\n        <span class=\"lnum\"> 6: </span>    {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 7: </span>        <span class=\"kwrd\">protected</span> <span class=\"kwrd\">override</span> <span class=\"kwrd\">void</span> Init()</pre>\n      <pre>\n        <span class=\"lnum\"> 8: </span>        {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 9: </span>            Kernel.Resolver.AddSubResolver(<span class=\"kwrd\">new</span> PathParameterDependencyResolver());            </pre>\n      <pre>\n        <span class=\"lnum\"> 10: </span>        }</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 11: </span>    }</pre>\n      <pre>\n        <span class=\"lnum\"> 12: </span>}</pre>\n    </div>\n    <p>Finally, the implementation of ISubDependencyResolver, that makes this possible:</p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 1: </span>\n        <span class=\"kwrd\">using</span> System;</pre>\n      <pre>\n        <span class=\"lnum\"> 2: </span>\n        <span class=\"kwrd\">using</span> System.Collections.Generic;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 3: </span>\n        <span class=\"kwrd\">using</span> System.IO;</pre>\n      <pre>\n        <span class=\"lnum\"> 4: </span>\n        <span class=\"kwrd\">using</span> System.Linq;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 5: </span>\n        <span class=\"kwrd\">using</span> System.Web;</pre>\n      <pre>\n        <span class=\"lnum\"> 6: </span>\n        <span class=\"kwrd\">using</span> Castle.Core;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 7: </span>\n        <span class=\"kwrd\">using</span> Castle.MicroKernel;</pre>\n      <pre>\n        <span class=\"lnum\"> 8: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 9: </span>\n        <span class=\"kwrd\">namespace</span> dr.Castle.WebPathFacility</pre>\n      <pre>\n        <span class=\"lnum\"> 10: </span>{</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 11: </span>    <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 12: </span>    <span class=\"rem\">/// Custom dependency resolver, that will inspect the parameters collection for the pathType attribute, and, if found, convert the dependency to </span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 13: </span>    <span class=\"rem\">/// a absolute path based on the path type.</span></pre>\n      <pre>\n        <span class=\"lnum\"> 14: </span>    <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 15: </span>    <span class=\"kwrd\">class</span> PathParameterDependencyResolver : ISubDependencyResolver</pre>\n      <pre>\n        <span class=\"lnum\"> 16: </span>    {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 17: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 18: </span>        <span class=\"rem\">/// Holds the supported conversion operations.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 19: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 20: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">readonly</span> Dictionary&lt;PathType,Func&lt;<span class=\"kwrd\">string</span>, <span class=\"kwrd\">string</span>&gt;&gt; conversions = <span class=\"kwrd\">new</span> Dictionary&lt;PathType, Func&lt;<span class=\"kwrd\">string</span>, <span class=\"kwrd\">string</span>&gt;&gt;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 21: </span>                                                                                           {</pre>\n      <pre>\n        <span class=\"lnum\"> 22: </span>                                                                                               {PathType.Absolute, path =&gt; path},</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 23: </span>                                                                                               {PathType.Relative, path =&gt; Path.Combine(Environment.CurrentDirectory,path) },</pre>\n      <pre>\n        <span class=\"lnum\"> 24: </span>                                                                                               {PathType.Virtual,  path =&gt; HttpContext.Current.Server.MapPath(path)}</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 25: </span>                                                                                           };</pre>\n      <pre>\n        <span class=\"lnum\"> 26: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 27: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 28: </span>        <span class=\"rem\">/// Cache of the type path parameters.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 29: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 30: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Dictionary&lt;<span class=\"kwrd\">string</span>,PathParameter&gt; typePathParameters = <span class=\"kwrd\">new</span> Dictionary&lt;<span class=\"kwrd\">string</span>, PathParameter&gt;();</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 31: </span> </pre>\n      <pre>\n        <span class=\"lnum\"> 32: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 33: </span>        <span class=\"rem\">/// Resolves the specified dependency.</span></pre>\n      <pre>\n        <span class=\"lnum\"> 34: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 35: </span>        <span class=\"rem\">/// &lt;param name=\"context\"&gt;Creation context&lt;/param&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 36: </span>        <span class=\"rem\">/// &lt;param name=\"contextHandlerResolver\"&gt;Parent resolver&lt;/param&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 37: </span>        <span class=\"rem\">/// &lt;param name=\"model\"&gt;Model of the component that is requesting the dependency&lt;/param&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 38: </span>        <span class=\"rem\">/// &lt;param name=\"dependency\"&gt;The dependcy to satisfy&lt;/param&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 39: </span>        <span class=\"rem\">/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the dependency can be satsfied by this resolver, else &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 40: </span>        <span class=\"rem\">/// &lt;returns&gt;The resolved dependency&lt;/returns&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 41: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">object</span> Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</pre>\n      <pre>\n        <span class=\"lnum\"> 42: </span>        {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 43: </span>            PathParameter parameter = GetPathParameter(model, dependency);</pre>\n      <pre>\n        <span class=\"lnum\"> 44: </span>            <span class=\"kwrd\">if</span> (parameter == <span class=\"kwrd\">null</span>) </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 45: </span>                <span class=\"kwrd\">throw</span> <span class=\"kwrd\">new</span> ApplicationException(String.Format(<span class=\"str\">\"Cannot resolve dependency {0}\"</span>, dependency));</pre>\n      <pre>\n        <span class=\"lnum\"> 46: </span>            <span class=\"kwrd\">if</span> (!conversions.ContainsKey(parameter.Type))</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 47: </span>                <span class=\"kwrd\">return</span> parameter.Value;     <span class=\"rem\">// Unknown conversion</span></pre>\n      <pre>\n        <span class=\"lnum\"> 48: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 49: </span>            <span class=\"kwrd\">return</span> conversions[parameter.Type](parameter.Value);</pre>\n      <pre>\n        <span class=\"lnum\"> 50: </span>        }</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 51: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 52: </span>        <span class=\"rem\">/// Determines whether this sub dependency resolver can resolve the specified dependency.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 53: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 54: </span>        <span class=\"rem\">/// &lt;param name=\"context\"&gt;Creation context&lt;/param&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 55: </span>        <span class=\"rem\">/// &lt;param name=\"contextHandlerResolver\"&gt;Parent resolver&lt;/param&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 56: </span>        <span class=\"rem\">/// &lt;param name=\"model\"&gt;Model of the component that is requesting the dependency&lt;/param&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 57: </span>        <span class=\"rem\">/// &lt;param name=\"dependency\"&gt;The dependcy to satisfy&lt;/param&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 58: </span>        <span class=\"rem\">/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the dependency can be satsfied by this resolver, else &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 59: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">bool</span> CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</pre>\n      <pre>\n        <span class=\"lnum\"> 60: </span>        {            </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 61: </span>            <span class=\"kwrd\">if</span> ( dependency.DependencyType == DependencyType.Parameter &amp;&amp; dependency.TargetType.Equals(<span class=\"kwrd\">typeof</span>(<span class=\"kwrd\">string</span>)) )</pre>\n      <pre>\n        <span class=\"lnum\"> 62: </span>            {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 63: </span>                PathParameter parameter = GetPathParameter(model, dependency);</pre>\n      <pre>\n        <span class=\"lnum\"> 64: </span>                <span class=\"kwrd\">return</span> parameter != <span class=\"kwrd\">null</span>;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 65: </span>            }</pre>\n      <pre>\n        <span class=\"lnum\"> 66: </span>            <span class=\"kwrd\">return</span> <span class=\"kwrd\">false</span>;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 67: </span>        }</pre>\n      <pre>\n        <span class=\"lnum\"> 68: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 69: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 70: </span>        <span class=\"rem\">/// Finds the parameter by looking at the cache, then in the model configuration.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 71: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 72: </span>        <span class=\"rem\">/// &lt;param name=\"model\"&gt;&lt;/param&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 73: </span>        <span class=\"rem\">/// &lt;param name=\"dependency\"&gt;&lt;/param&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 74: </span>        <span class=\"rem\">/// &lt;returns&gt;&lt;/returns&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 75: </span>        <span class=\"kwrd\">private</span> PathParameter GetPathParameter(ComponentModel model, DependencyModel dependency)</pre>\n      <pre>\n        <span class=\"lnum\"> 76: </span>        {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 77: </span>            <span class=\"kwrd\">if</span> (!typePathParameters.ContainsKey(model.Name))</pre>\n      <pre>\n        <span class=\"lnum\"> 78: </span>                typePathParameters.Add(model.Name, GetPathParameterInternal(model, dependency));</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 79: </span> </pre>\n      <pre>\n        <span class=\"lnum\"> 80: </span>            <span class=\"kwrd\">return</span> typePathParameters[model.Name];</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 81: </span>        }</pre>\n      <pre>\n        <span class=\"lnum\"> 82: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 83: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 84: </span>        <span class=\"rem\">/// Finds the parameter by looking at the model configuration.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 85: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 86: </span>        <span class=\"rem\">/// &lt;param name=\"model\"&gt;&lt;/param&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 87: </span>        <span class=\"rem\">/// &lt;param name=\"dependency\"&gt;&lt;/param&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 88: </span>        <span class=\"rem\">/// &lt;returns&gt;&lt;/returns&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 89: </span>        <span class=\"kwrd\">private</span> PathParameter GetPathParameterInternal(ComponentModel model, DependencyModel dependency)</pre>\n      <pre>\n        <span class=\"lnum\"> 90: </span>        {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 91: </span>            var parametersContainer = model.Configuration.Children.SingleOrDefault(n =&gt; n.Name == <span class=\"str\">\"parameters\"</span>);</pre>\n      <pre>\n        <span class=\"lnum\"> 92: </span>            <span class=\"kwrd\">if</span> ( parametersContainer != <span class=\"kwrd\">null</span> )</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 93: </span>            {</pre>\n      <pre>\n        <span class=\"lnum\"> 94: </span>                var parameterNode = parametersContainer.Children.SingleOrDefault(n =&gt; n.Name == dependency.DependencyKey);</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 95: </span>                <span class=\"kwrd\">string</span> pathType = parameterNode.Attributes[<span class=\"str\">\"pathType\"</span>];</pre>\n      <pre>\n        <span class=\"lnum\"> 96: </span>                <span class=\"kwrd\">if</span> (pathType != <span class=\"kwrd\">null</span>)</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 97: </span>                {</pre>\n      <pre>\n        <span class=\"lnum\"> 98: </span>                    PathType type;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 99: </span>                    <span class=\"kwrd\">if</span> (!Enum.TryParse(pathType, <span class=\"kwrd\">true</span>, <span class=\"kwrd\">out</span> type))</pre>\n      <pre>\n        <span class=\"lnum\"> 100: </span>                        <span class=\"kwrd\">throw</span> <span class=\"kwrd\">new</span> ApplicationException(</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 101: </span>                            String.Format(<span class=\"str\">\"Configuration error: Invalid pathType value '{0}'\"</span>, pathType));</pre>\n      <pre>\n        <span class=\"lnum\"> 102: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 103: </span>                    <span class=\"kwrd\">return</span> <span class=\"kwrd\">new</span> PathParameter {Type = type, Value = parameterNode.Value};</pre>\n      <pre>\n        <span class=\"lnum\"> 104: </span>                }</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 105: </span>            }</pre>\n      <pre>\n        <span class=\"lnum\"> 106: </span>            <span class=\"kwrd\">return</span> <span class=\"kwrd\">null</span>;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 107: </span>        }</pre>\n      <pre>\n        <span class=\"lnum\"> 108: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 109: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 110: </span>        <span class=\"rem\">/// Holds a path parameter</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 111: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 112: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">class</span> PathParameter</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 113: </span>        {</pre>\n      <pre>\n        <span class=\"lnum\"> 114: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 115: </span>            <span class=\"rem\">/// Value as entered in config</span></pre>\n      <pre>\n        <span class=\"lnum\"> 116: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 117: </span>            <span class=\"kwrd\">public</span> <span class=\"kwrd\">string</span> Value { get; set; }</pre>\n      <pre>\n        <span class=\"lnum\"> 118: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 119: </span>            <span class=\"rem\">/// Type of path.</span></pre>\n      <pre>\n        <span class=\"lnum\"> 120: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 121: </span>            <span class=\"kwrd\">public</span> PathType Type { get; set;}</pre>\n      <pre>\n        <span class=\"lnum\"> 122: </span>        }</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 123: </span> </pre>\n      <pre>\n        <span class=\"lnum\"> 124: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 125: </span>        <span class=\"rem\">/// Defines the types of paths supported by &lt;see cref=\"PathParameterDependencyResolver\" /&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 126: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 127: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">enum</span> PathType</pre>\n      <pre>\n        <span class=\"lnum\"> 128: </span>        {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 129: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 130: </span>            <span class=\"rem\">/// The path is absolute (we will do nothing to it).</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 131: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 132: </span>            Absolute = 0,</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 133: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 134: </span>            <span class=\"rem\">/// The path is a virtual path to a web application resource.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 135: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 136: </span>            Virtual,</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 137: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 138: </span>            <span class=\"rem\">/// The path is relative to the current directory.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 139: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 140: </span>            Relative</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 141: </span>        }</pre>\n      <pre>\n        <span class=\"lnum\"> 142: </span>    }</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 143: </span>}</pre>\n    </div>\n    <p>Now, I am finally able to use virtual paths in my configuration files, with a minimum of noise. Great. Please notice, that the \"Relative\" path type might not make sense for a real application (since it uses Environment.CurrentDirectory as base), but it can be really helpful in test configurations. The primary reason for creating this is pathType=\"virtual\", which maps to <a title=\"MSDN HttpServerUtility.MapPath\" href=\"http://msdn.microsoft.com/en-us/library/ms524632.aspx\" target=\"_blank\">Server.MapPath</a>.</p>","Body":"\n\t\t<p>At work, we use <a title=\"Castle Project\" href=\"http://www.castleproject.org/container/index.html\" target=\"_blank\">Castle Windsor</a> for <a title=\"DI on Wikipedia\" href=\"http://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\">Dependency Injection</a>. In Castle Windsor, as with any dependency injection framework, you can configure components identified by an interface, that can be resolved at runtime using the dependency injection framework. Components can have dependencies, which can be yet other components and so on. In this way, you can have your dependency injection framework create a whole graph of objects for you.</p>\n    <p>One limitation we run into now and then, is with components, that depend on a file path to work. Typically, we need to know the full path of the file to load it. But hardcoding the full path in the configuration file is generally a bad idea, it will create problems when you move your web application between environments. Also, we cannot just pass the path as a virtual path to the component and then have the component call Server.MapPath to map the path - since that would mean changing the interface of the component just to accomodate the injection framework, which is not a good idea. And, what is worse, you would create a dependency on System.Web in a place where it probably isn't needed.</p>\n    <p>Now, one way to get around this would be to create a wrapper interface, IFilePath, which only should exist in order to be passed into the component and being able to convert the path. This also involves changing the component and generally feels like a bad idea.</p>\n    <p>Luckily, the Windsor IoC container offers a large variety of extension points - one being <a href=\"http://www.castleproject.org/container/documentation/trunk/concepts/facility.html\">facilities</a>. So I wrote a facility, that allows paths configured in Castle Windsor to be relative. The way this works is by registering an <em>ISubDependencyResolver </em>in the <em>IKernel </em>instance. When resolving a dependency, Windsor will ask the <em>ISubDependencyResolver </em>whether it can resolve the dependency using the <em>CanResolve </em>method. By examining the passed ComponentModel and in particular it's configuration node, I look for a custom attribute on the dependency, pathType. If found (and the dependency is of type string), then we can easily resolve the dependency by taking the relative path in the configuration tag and making it absolute.</p>\n    <p>This will allow you to have your Windsor configuration look like this (notice the one-line facility registration - this is what registers the custom facility in Windsor, and makes us able to register the <em>path </em>dependency as a virtual path):</p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre class=\"alt\">        <span class=\"lnum\"> 1: </span>  <span class=\"kwrd\">&lt;</span><span class=\"html\">castle</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 2: </span>    <span class=\"kwrd\">&lt;</span><span class=\"html\">facilities</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre class=\"alt\">        <span class=\"lnum\"> 3: </span>      <span class=\"kwrd\">&lt;</span><span class=\"html\">facility</span> <span class=\"attr\">id</span><span class=\"kwrd\">=\"pathResolver\"</span> <span class=\"attr\">type</span><span class=\"kwrd\">=\"dr.Castle.WebPathFacility.RelativePathSupportFacility, dr.Castle.WebPathFacility\"</span> <span class=\"kwrd\">/&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 4: </span>    <span class=\"kwrd\">&lt;/</span><span class=\"html\">facilities</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre class=\"alt\">        <span class=\"lnum\"> 5: </span>    <span class=\"kwrd\">&lt;</span><span class=\"html\">components</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 6: </span>      <span class=\"kwrd\">&lt;</span><span class=\"html\">component</span> <span class=\"attr\">id</span><span class=\"kwrd\">=\"dummy\"</span></pre>\n      <pre class=\"alt\">        <span class=\"lnum\"> 7: </span>                 <span class=\"attr\">service</span><span class=\"kwrd\">=\"dr.Castle.WebPathFacility.Test.IDummy, dr.Castle.WebPathFacility.Test\"</span></pre>\n      <pre>        <span class=\"lnum\"> 8: </span>                 <span class=\"attr\">type</span><span class=\"kwrd\">=\"dr.Castle.WebPathFacility.Test.Dummy, dr.Castle.WebPathFacility.Test\"</span> <span class=\"kwrd\">&gt;</span></pre>\n      <pre class=\"alt\">        <span class=\"lnum\"> 9: </span>        <span class=\"kwrd\">&lt;</span><span class=\"html\">parameters</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 10: </span>          <span class=\"kwrd\">&lt;</span><span class=\"html\">path</span> <span class=\"attr\">pathType</span><span class=\"kwrd\">=\"Relative\"</span><span class=\"kwrd\">&gt;</span>App_Data/test.xml<span class=\"kwrd\">&lt;/</span><span class=\"html\">path</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre class=\"alt\">        <span class=\"lnum\"> 11: </span>        <span class=\"kwrd\">&lt;/</span><span class=\"html\">parameters</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 12: </span>      <span class=\"kwrd\">&lt;/</span><span class=\"html\">component</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre class=\"alt\">        <span class=\"lnum\"> 13: </span>    <span class=\"kwrd\">&lt;/</span><span class=\"html\">components</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 14: </span>  <span class=\"kwrd\">&lt;/</span><span class=\"html\">castle</span><span class=\"kwrd\">&gt;</span></pre>\n      <pre> </pre>\n    </div>\n    <p>The valid values for pathType are: </p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 1: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">enum</span> PathType</pre>\n      <pre>\n        <span class=\"lnum\"> 2: </span>        {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 3: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 4: </span>            <span class=\"rem\">/// The path is absolute (we will do nothing to it).</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 5: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 6: </span>            Absolute = 0,</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 7: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 8: </span>            <span class=\"rem\">/// The path is a virtual path to a web application resource.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 9: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 10: </span>            Virtual,</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 11: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 12: </span>            <span class=\"rem\">/// The path is relative to the current directory.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 13: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 14: </span>            Relative</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 15: </span>        }</pre>\n    </div>\n    <p>The code for the facility it self is really simple, since it simply registers our dependency resolver to the Kernel. The advantage of using a facility, is that it can be declared in the config, and Windsor will automatically initialize for all containers you create: </p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 1: </span>\n        <span class=\"kwrd\">using</span> Castle.MicroKernel.Facilities;</pre>\n      <pre>\n        <span class=\"lnum\"> 2: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 3: </span>\n        <span class=\"kwrd\">namespace</span> dr.Castle.WebPathFacility</pre>\n      <pre>\n        <span class=\"lnum\"> 4: </span>{</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 5: </span>    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> RelativePathSupportFacility : AbstractFacility</pre>\n      <pre>\n        <span class=\"lnum\"> 6: </span>    {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 7: </span>        <span class=\"kwrd\">protected</span> <span class=\"kwrd\">override</span> <span class=\"kwrd\">void</span> Init()</pre>\n      <pre>\n        <span class=\"lnum\"> 8: </span>        {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 9: </span>            Kernel.Resolver.AddSubResolver(<span class=\"kwrd\">new</span> PathParameterDependencyResolver());            </pre>\n      <pre>\n        <span class=\"lnum\"> 10: </span>        }</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 11: </span>    }</pre>\n      <pre>\n        <span class=\"lnum\"> 12: </span>}</pre>\n    </div>\n    <p>Finally, the implementation of ISubDependencyResolver, that makes this possible:</p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <div class=\"csharpcode\">\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 1: </span>\n        <span class=\"kwrd\">using</span> System;</pre>\n      <pre>\n        <span class=\"lnum\"> 2: </span>\n        <span class=\"kwrd\">using</span> System.Collections.Generic;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 3: </span>\n        <span class=\"kwrd\">using</span> System.IO;</pre>\n      <pre>\n        <span class=\"lnum\"> 4: </span>\n        <span class=\"kwrd\">using</span> System.Linq;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 5: </span>\n        <span class=\"kwrd\">using</span> System.Web;</pre>\n      <pre>\n        <span class=\"lnum\"> 6: </span>\n        <span class=\"kwrd\">using</span> Castle.Core;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 7: </span>\n        <span class=\"kwrd\">using</span> Castle.MicroKernel;</pre>\n      <pre>\n        <span class=\"lnum\"> 8: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 9: </span>\n        <span class=\"kwrd\">namespace</span> dr.Castle.WebPathFacility</pre>\n      <pre>\n        <span class=\"lnum\"> 10: </span>{</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 11: </span>    <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 12: </span>    <span class=\"rem\">/// Custom dependency resolver, that will inspect the parameters collection for the pathType attribute, and, if found, convert the dependency to </span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 13: </span>    <span class=\"rem\">/// a absolute path based on the path type.</span></pre>\n      <pre>\n        <span class=\"lnum\"> 14: </span>    <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 15: </span>    <span class=\"kwrd\">class</span> PathParameterDependencyResolver : ISubDependencyResolver</pre>\n      <pre>\n        <span class=\"lnum\"> 16: </span>    {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 17: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 18: </span>        <span class=\"rem\">/// Holds the supported conversion operations.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 19: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 20: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">readonly</span> Dictionary&lt;PathType,Func&lt;<span class=\"kwrd\">string</span>, <span class=\"kwrd\">string</span>&gt;&gt; conversions = <span class=\"kwrd\">new</span> Dictionary&lt;PathType, Func&lt;<span class=\"kwrd\">string</span>, <span class=\"kwrd\">string</span>&gt;&gt;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 21: </span>                                                                                           {</pre>\n      <pre>\n        <span class=\"lnum\"> 22: </span>                                                                                               {PathType.Absolute, path =&gt; path},</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 23: </span>                                                                                               {PathType.Relative, path =&gt; Path.Combine(Environment.CurrentDirectory,path) },</pre>\n      <pre>\n        <span class=\"lnum\"> 24: </span>                                                                                               {PathType.Virtual,  path =&gt; HttpContext.Current.Server.MapPath(path)}</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 25: </span>                                                                                           };</pre>\n      <pre>\n        <span class=\"lnum\"> 26: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 27: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 28: </span>        <span class=\"rem\">/// Cache of the type path parameters.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 29: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 30: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Dictionary&lt;<span class=\"kwrd\">string</span>,PathParameter&gt; typePathParameters = <span class=\"kwrd\">new</span> Dictionary&lt;<span class=\"kwrd\">string</span>, PathParameter&gt;();</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 31: </span> </pre>\n      <pre>\n        <span class=\"lnum\"> 32: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 33: </span>        <span class=\"rem\">/// Resolves the specified dependency.</span></pre>\n      <pre>\n        <span class=\"lnum\"> 34: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 35: </span>        <span class=\"rem\">/// &lt;param name=\"context\"&gt;Creation context&lt;/param&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 36: </span>        <span class=\"rem\">/// &lt;param name=\"contextHandlerResolver\"&gt;Parent resolver&lt;/param&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 37: </span>        <span class=\"rem\">/// &lt;param name=\"model\"&gt;Model of the component that is requesting the dependency&lt;/param&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 38: </span>        <span class=\"rem\">/// &lt;param name=\"dependency\"&gt;The dependcy to satisfy&lt;/param&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 39: </span>        <span class=\"rem\">/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the dependency can be satsfied by this resolver, else &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 40: </span>        <span class=\"rem\">/// &lt;returns&gt;The resolved dependency&lt;/returns&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 41: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">object</span> Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</pre>\n      <pre>\n        <span class=\"lnum\"> 42: </span>        {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 43: </span>            PathParameter parameter = GetPathParameter(model, dependency);</pre>\n      <pre>\n        <span class=\"lnum\"> 44: </span>            <span class=\"kwrd\">if</span> (parameter == <span class=\"kwrd\">null</span>) </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 45: </span>                <span class=\"kwrd\">throw</span> <span class=\"kwrd\">new</span> ApplicationException(String.Format(<span class=\"str\">\"Cannot resolve dependency {0}\"</span>, dependency));</pre>\n      <pre>\n        <span class=\"lnum\"> 46: </span>            <span class=\"kwrd\">if</span> (!conversions.ContainsKey(parameter.Type))</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 47: </span>                <span class=\"kwrd\">return</span> parameter.Value;     <span class=\"rem\">// Unknown conversion</span></pre>\n      <pre>\n        <span class=\"lnum\"> 48: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 49: </span>            <span class=\"kwrd\">return</span> conversions[parameter.Type](parameter.Value);</pre>\n      <pre>\n        <span class=\"lnum\"> 50: </span>        }</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 51: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 52: </span>        <span class=\"rem\">/// Determines whether this sub dependency resolver can resolve the specified dependency.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 53: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 54: </span>        <span class=\"rem\">/// &lt;param name=\"context\"&gt;Creation context&lt;/param&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 55: </span>        <span class=\"rem\">/// &lt;param name=\"contextHandlerResolver\"&gt;Parent resolver&lt;/param&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 56: </span>        <span class=\"rem\">/// &lt;param name=\"model\"&gt;Model of the component that is requesting the dependency&lt;/param&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 57: </span>        <span class=\"rem\">/// &lt;param name=\"dependency\"&gt;The dependcy to satisfy&lt;/param&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 58: </span>        <span class=\"rem\">/// &lt;returns&gt;&lt;c&gt;true&lt;/c&gt; if the dependency can be satsfied by this resolver, else &lt;c&gt;false&lt;/c&gt;.&lt;/returns&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 59: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">bool</span> CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model, DependencyModel dependency)</pre>\n      <pre>\n        <span class=\"lnum\"> 60: </span>        {            </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 61: </span>            <span class=\"kwrd\">if</span> ( dependency.DependencyType == DependencyType.Parameter &amp;&amp; dependency.TargetType.Equals(<span class=\"kwrd\">typeof</span>(<span class=\"kwrd\">string</span>)) )</pre>\n      <pre>\n        <span class=\"lnum\"> 62: </span>            {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 63: </span>                PathParameter parameter = GetPathParameter(model, dependency);</pre>\n      <pre>\n        <span class=\"lnum\"> 64: </span>                <span class=\"kwrd\">return</span> parameter != <span class=\"kwrd\">null</span>;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 65: </span>            }</pre>\n      <pre>\n        <span class=\"lnum\"> 66: </span>            <span class=\"kwrd\">return</span> <span class=\"kwrd\">false</span>;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 67: </span>        }</pre>\n      <pre>\n        <span class=\"lnum\"> 68: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 69: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 70: </span>        <span class=\"rem\">/// Finds the parameter by looking at the cache, then in the model configuration.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 71: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 72: </span>        <span class=\"rem\">/// &lt;param name=\"model\"&gt;&lt;/param&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 73: </span>        <span class=\"rem\">/// &lt;param name=\"dependency\"&gt;&lt;/param&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 74: </span>        <span class=\"rem\">/// &lt;returns&gt;&lt;/returns&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 75: </span>        <span class=\"kwrd\">private</span> PathParameter GetPathParameter(ComponentModel model, DependencyModel dependency)</pre>\n      <pre>\n        <span class=\"lnum\"> 76: </span>        {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 77: </span>            <span class=\"kwrd\">if</span> (!typePathParameters.ContainsKey(model.Name))</pre>\n      <pre>\n        <span class=\"lnum\"> 78: </span>                typePathParameters.Add(model.Name, GetPathParameterInternal(model, dependency));</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 79: </span> </pre>\n      <pre>\n        <span class=\"lnum\"> 80: </span>            <span class=\"kwrd\">return</span> typePathParameters[model.Name];</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 81: </span>        }</pre>\n      <pre>\n        <span class=\"lnum\"> 82: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 83: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 84: </span>        <span class=\"rem\">/// Finds the parameter by looking at the model configuration.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 85: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 86: </span>        <span class=\"rem\">/// &lt;param name=\"model\"&gt;&lt;/param&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 87: </span>        <span class=\"rem\">/// &lt;param name=\"dependency\"&gt;&lt;/param&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 88: </span>        <span class=\"rem\">/// &lt;returns&gt;&lt;/returns&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 89: </span>        <span class=\"kwrd\">private</span> PathParameter GetPathParameterInternal(ComponentModel model, DependencyModel dependency)</pre>\n      <pre>\n        <span class=\"lnum\"> 90: </span>        {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 91: </span>            var parametersContainer = model.Configuration.Children.SingleOrDefault(n =&gt; n.Name == <span class=\"str\">\"parameters\"</span>);</pre>\n      <pre>\n        <span class=\"lnum\"> 92: </span>            <span class=\"kwrd\">if</span> ( parametersContainer != <span class=\"kwrd\">null</span> )</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 93: </span>            {</pre>\n      <pre>\n        <span class=\"lnum\"> 94: </span>                var parameterNode = parametersContainer.Children.SingleOrDefault(n =&gt; n.Name == dependency.DependencyKey);</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 95: </span>                <span class=\"kwrd\">string</span> pathType = parameterNode.Attributes[<span class=\"str\">\"pathType\"</span>];</pre>\n      <pre>\n        <span class=\"lnum\"> 96: </span>                <span class=\"kwrd\">if</span> (pathType != <span class=\"kwrd\">null</span>)</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 97: </span>                {</pre>\n      <pre>\n        <span class=\"lnum\"> 98: </span>                    PathType type;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 99: </span>                    <span class=\"kwrd\">if</span> (!Enum.TryParse(pathType, <span class=\"kwrd\">true</span>, <span class=\"kwrd\">out</span> type))</pre>\n      <pre>\n        <span class=\"lnum\"> 100: </span>                        <span class=\"kwrd\">throw</span> <span class=\"kwrd\">new</span> ApplicationException(</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 101: </span>                            String.Format(<span class=\"str\">\"Configuration error: Invalid pathType value '{0}'\"</span>, pathType));</pre>\n      <pre>\n        <span class=\"lnum\"> 102: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 103: </span>                    <span class=\"kwrd\">return</span> <span class=\"kwrd\">new</span> PathParameter {Type = type, Value = parameterNode.Value};</pre>\n      <pre>\n        <span class=\"lnum\"> 104: </span>                }</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 105: </span>            }</pre>\n      <pre>\n        <span class=\"lnum\"> 106: </span>            <span class=\"kwrd\">return</span> <span class=\"kwrd\">null</span>;</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 107: </span>        }</pre>\n      <pre>\n        <span class=\"lnum\"> 108: </span> </pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 109: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 110: </span>        <span class=\"rem\">/// Holds a path parameter</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 111: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 112: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">class</span> PathParameter</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 113: </span>        {</pre>\n      <pre>\n        <span class=\"lnum\"> 114: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 115: </span>            <span class=\"rem\">/// Value as entered in config</span></pre>\n      <pre>\n        <span class=\"lnum\"> 116: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 117: </span>            <span class=\"kwrd\">public</span> <span class=\"kwrd\">string</span> Value { get; set; }</pre>\n      <pre>\n        <span class=\"lnum\"> 118: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 119: </span>            <span class=\"rem\">/// Type of path.</span></pre>\n      <pre>\n        <span class=\"lnum\"> 120: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 121: </span>            <span class=\"kwrd\">public</span> PathType Type { get; set;}</pre>\n      <pre>\n        <span class=\"lnum\"> 122: </span>        }</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 123: </span> </pre>\n      <pre>\n        <span class=\"lnum\"> 124: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 125: </span>        <span class=\"rem\">/// Defines the types of paths supported by &lt;see cref=\"PathParameterDependencyResolver\" /&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 126: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 127: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">enum</span> PathType</pre>\n      <pre>\n        <span class=\"lnum\"> 128: </span>        {</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 129: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 130: </span>            <span class=\"rem\">/// The path is absolute (we will do nothing to it).</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 131: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 132: </span>            Absolute = 0,</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 133: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 134: </span>            <span class=\"rem\">/// The path is a virtual path to a web application resource.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 135: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 136: </span>            Virtual,</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 137: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 138: </span>            <span class=\"rem\">/// The path is relative to the current directory.</span></pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 139: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>\n        <span class=\"lnum\"> 140: </span>            Relative</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 141: </span>        }</pre>\n      <pre>\n        <span class=\"lnum\"> 142: </span>    }</pre>\n      <pre class=\"alt\">\n        <span class=\"lnum\"> 143: </span>}</pre>\n    </div>\n    <p>Now, I am finally able to use virtual paths in my configuration files, with a minimum of noise. Great. Please notice, that the \"Relative\" path type might not make sense for a real application (since it uses Environment.CurrentDirectory as base), but it can be really helpful in test configurations. The primary reason for creating this is pathType=\"virtual\", which maps to <a title=\"MSDN HttpServerUtility.MapPath\" href=\"http://msdn.microsoft.com/en-us/library/ms524632.aspx\" target=\"_blank\">Server.MapPath</a>.</p>","Author":"Dennis Riis","Published":"2010-02-22T22:25:00.0000000Z","IsPublished":true,"Comments":[{"Email":"me@meandmycode.com","Approved":true,"Body":"This is an awesome idea, I've googled a few times about this 'impedance' issue with paths in configuration files.<br /><br />One suggestion I had was using HostingEnvironment.MapPath instead of HttpContext.Current.Server.MapPath, technically this would allow mapping the path outside of a HttpContext (such as slave), bit of an edge case though ;)","Author":"Stephen Taylor","Created":"2010-09-01T16:47:47.0000000Z"},{"Email":"stacyTah@topazpro.xyz","Approved":true,"Body":"глянцевые двери межкомнатные купить \r\nкупить двери от производителя \r\nhttp://zasov-zavesaglazok.icu \r\nпокраска входной двери \r\nгармошка фурнитура \r\nhttp://roomdoorhome.icu \r\nметаллические входные двери \r\nкак правильно выбрать металлическую дверь \r\nhttp://domashpingaletdver.icu \r\nвходные двери эльбор \r\nручки защелки для межкомнатных дверей \r\nhttp://glazokzasov-zavesa.icu \r\nустановка межкомнатных дверей полоцк \r\nзамок для раздвижных дверей \r\nhttp://shpingalet-domadver.icu","Author":"StacyAcecT","Created":"2019-03-18T23:38:36.7853704"}],"Tags":["General technology","ASP .NET",".NET"],"Created":"2010-02-22T22:25:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":"false","Raven-Replication-History":[{"Raven-Replication-Version":10,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"},{"Raven-Replication-Version":50,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":1794,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15","@id":"posts/1","Temp-Index-Score":1.0,"Last-Modified":"2019-03-18T23:38:37.7958704Z","@etag":"00000001-0000-c800-0000-000000000002","Non-Authoritative-Information":false}},{"Title":"Introducing: The Google Chrome Password Recovery Tool","UrlName":"Introducing-The-Google-Chrome-Password-Recovery-Tool","BodyHtml":"\n\t\t<p>Today, I wanted to backup all my passwords stored in Google Chrome. I thought that would be an easy task, but it turns out, that this is not supported, at least as far as I can tell. There is an option to view the shared passwords one-by-one, but that was not really an option for me.</p>\n    <p>So,Â I decided to write a small program to extract the passwords from Chrome. Since Chrome (or Chromium, to be exact), is open source, I pulled the source from <a href=\"http://dev.chromium.org/getting-involved\">http://dev.chromium.org/getting-involved</a>, compiled it, and starting looking around trying to figure out how passwords are stored. The setup and build experience was much nicer than what I have tried with other open source projects I have looked at; there are detailed build instructions with only a few steps available, and after setting up, it just works, in a Visual Studio 2008 solution. A full recompile does take some time however (45 minutes on my machine).</p>\n    <p>I quickly found out that Chrome stores most of its user and configuration data in small SQLite databases stored on disk in the AppData/Local/Google/Chrome/User Data directory. So, reading the data was no problem after grabbing a copy of the <a href=\"http://sourceforge.net/projects/sqlite-dotnet2\">ADO .NET Provider for SQLite</a>, as well as the sqlite3.dll binary from <a href=\"http://www.sqlite.org/\">http://www.sqlite.org/</a>. The data I was after (user names and passwords) is stored in the file named <strong>Web Data</strong>. This contains a table named <strong>logins</strong>, which contains the URL for which the login is valid, some details about the html form where the password has been used (in order to allow Chrome to auto-fill password boxes for you), and the username and password. It also contains a \"preferred\" and \"blacklisted_by_user\" column. </p>\n    <p>\n      <strong>\n        <span style=\"FONT-SIZE: 14pt\">Decrypting the passwords</span> </strong>\n    </p>\n    <p>The passwords is, obviously for security reasons, not stored in plain text. Rather, they are encrypted, so I needed to figure out how they are encrypted and how to decrypt them. The answer lies in the Chromium source, where the Encryptor class contains the following method:</p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <pre class=\"csharpcode\"><span class=\"kwrd\">bool</span> Encryptor::EncryptString(<span class=\"kwrd\">const</span> std::<span class=\"kwrd\">string</span>&amp; plaintext,\n                              std::<span class=\"kwrd\">string</span>* ciphertext) {\n  DATA_BLOB input;\n  input.pbData = const_cast&lt;BYTE*&gt;(\n    reinterpret_cast&lt;<span class=\"kwrd\">const</span> BYTE*&gt;(plaintext.data()));\n  input.cbData = static_cast&lt;DWORD&gt;(plaintext.length());\n\n  DATA_BLOB output;\n  BOOL result = CryptProtectData(&amp;input, L<span class=\"str\">\"\"</span>, NULL, NULL, NULL,\n                                 0, &amp;output);\n  <span class=\"kwrd\">if</span> (!result)\n    <span class=\"kwrd\">return</span> <span class=\"kwrd\">false</span>;\n\n  <span class=\"rem\">// this does a copy</span>\n  ciphertext-&gt;assign(reinterpret_cast&lt;std::<span class=\"kwrd\">string</span>::value_type*&gt;(output.pbData),\n                     output.cbData);\n\n  LocalFree(output.pbData);\n  <span class=\"kwrd\">return</span> <span class=\"kwrd\">true</span>;\n}</pre>\n    <p>As it turns out,Â the <a title=\"DPAPI on MSDN\" target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/ms995355.aspx\">Windows Data Protection (DPAPI)</a>Â is used to encrypt the data, namely the CryptProtectData function as shown above. Therefore, I can relatively easy decrypt the data, using the <a title=\"CryptUnprotectData on MSDN\" target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/aa380882.aspx\">CryptUnprotectData</a> function, as long as I do not try to decrypt the password of other users - the DPAPI encrypts with a key based on the current user's login credentials. I first tried to do the decrypting in C# using P/Invoke the the CryptUnprotect function, but for some reason, I could not get that to work. I kept getting a credentials dialog from Windows when trying it, which is not what i want. Luckily, after googling a bit, I found out that there already exist a managed wrapper for doing this, namely the <a title=\"ProtectedData on MSDN\" target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx\">ProtectedData</a>Â class. After switching to using this, there were no problems decrypting the passwords.</p>\n    <p>\n      <strong>\n        <span style=\"FONT-SIZE: 14pt\">The password recovery tool</span> </strong>\n    </p>\n    <p>I wrote a tiny C# console program to dump the passwords. They can be dumped to the console (default) or to an XML file. Running the program without parameters will try to dump all the passwords to the console. You might need to have Chrome closed while doing this. Run the program with the -help switch to display a short usage information message.</p>\n    <p>I am including the program for download here - both in a precompiled form and the C# source. It requires .NET Framework 3.5. The program as well as it's source is free for use non-commercially and is provided without any warranty or obligations for me, neither explicit or implied. It probably won't kill your cat, but don't come to me crying about it if it does ;-). If you wish to use the source or derivate thereof in a commercial product, contact me for permission first.</p>\n    <p>\n      <strong>\n        <span style=\"FONT-SIZE: 14pt\">Download:</span> </strong>\n    </p>\n    <ul>\n      <li>\n        <a href=\"~/media/B07CCDB309B14456B1DF8DE9DE0025AA.ashx\">ChromePasswordRecover (binary package - unzip and run cprecover.exe in a console window)</a> <a href=\"~/media/358B8B553CCE4E88B3788338E4FE787E.ashx\"></a></li>\n      <li>\n        <a href=\"~/media/358B8B553CCE4E88B3788338E4FE787E.ashx\">ChromePasswordRecover - C# source.</a> </li>\n    </ul>\n    <p>\n      <strong>\n        <span style=\"FONT-SIZE: 14pt\">What is missing ?</span> <br /></strong>It would be nice to have an option to import the exported passwords into a new Chrome installation on another computer. I am considering adding it, but don't really need it at this time. It should be relatively easy - if you happen to develop the feature based on my work, please email me the source.</p>","Body":"\n\t\t<p>Today, I wanted to backup all my passwords stored in Google Chrome. I thought that would be an easy task, but it turns out, that this is not supported, at least as far as I can tell. There is an option to view the shared passwords one-by-one, but that was not really an option for me.</p>\n    <p>So,Â I decided to write a small program to extract the passwords from Chrome. Since Chrome (or Chromium, to be exact), is open source, I pulled the source from <a href=\"http://dev.chromium.org/getting-involved\">http://dev.chromium.org/getting-involved</a>, compiled it, and starting looking around trying to figure out how passwords are stored. The setup and build experience was much nicer than what I have tried with other open source projects I have looked at; there are detailed build instructions with only a few steps available, and after setting up, it just works, in a Visual Studio 2008 solution. A full recompile does take some time however (45 minutes on my machine).</p>\n    <p>I quickly found out that Chrome stores most of its user and configuration data in small SQLite databases stored on disk in the AppData/Local/Google/Chrome/User Data directory. So, reading the data was no problem after grabbing a copy of the <a href=\"http://sourceforge.net/projects/sqlite-dotnet2\">ADO .NET Provider for SQLite</a>, as well as the sqlite3.dll binary from <a href=\"http://www.sqlite.org/\">http://www.sqlite.org/</a>. The data I was after (user names and passwords) is stored in the file named <strong>Web Data</strong>. This contains a table named <strong>logins</strong>, which contains the URL for which the login is valid, some details about the html form where the password has been used (in order to allow Chrome to auto-fill password boxes for you), and the username and password. It also contains a \"preferred\" and \"blacklisted_by_user\" column. </p>\n    <p>\n      <strong>\n        <span style=\"FONT-SIZE: 14pt\">Decrypting the passwords</span> </strong>\n    </p>\n    <p>The passwords is, obviously for security reasons, not stored in plain text. Rather, they are encrypted, so I needed to figure out how they are encrypted and how to decrypt them. The answer lies in the Chromium source, where the Encryptor class contains the following method:</p>\n    <!-- code formatted by http://manoli.net/csharpformat/ -->\n    <pre class=\"csharpcode\"><span class=\"kwrd\">bool</span> Encryptor::EncryptString(<span class=\"kwrd\">const</span> std::<span class=\"kwrd\">string</span>&amp; plaintext,\n                              std::<span class=\"kwrd\">string</span>* ciphertext) {\n  DATA_BLOB input;\n  input.pbData = const_cast&lt;BYTE*&gt;(\n    reinterpret_cast&lt;<span class=\"kwrd\">const</span> BYTE*&gt;(plaintext.data()));\n  input.cbData = static_cast&lt;DWORD&gt;(plaintext.length());\n\n  DATA_BLOB output;\n  BOOL result = CryptProtectData(&amp;input, L<span class=\"str\">\"\"</span>, NULL, NULL, NULL,\n                                 0, &amp;output);\n  <span class=\"kwrd\">if</span> (!result)\n    <span class=\"kwrd\">return</span> <span class=\"kwrd\">false</span>;\n\n  <span class=\"rem\">// this does a copy</span>\n  ciphertext-&gt;assign(reinterpret_cast&lt;std::<span class=\"kwrd\">string</span>::value_type*&gt;(output.pbData),\n                     output.cbData);\n\n  LocalFree(output.pbData);\n  <span class=\"kwrd\">return</span> <span class=\"kwrd\">true</span>;\n}</pre>\n    <p>As it turns out,Â the <a title=\"DPAPI on MSDN\" target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/ms995355.aspx\">Windows Data Protection (DPAPI)</a>Â is used to encrypt the data, namely the CryptProtectData function as shown above. Therefore, I can relatively easy decrypt the data, using the <a title=\"CryptUnprotectData on MSDN\" target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/aa380882.aspx\">CryptUnprotectData</a> function, as long as I do not try to decrypt the password of other users - the DPAPI encrypts with a key based on the current user's login credentials. I first tried to do the decrypting in C# using P/Invoke the the CryptUnprotect function, but for some reason, I could not get that to work. I kept getting a credentials dialog from Windows when trying it, which is not what i want. Luckily, after googling a bit, I found out that there already exist a managed wrapper for doing this, namely the <a title=\"ProtectedData on MSDN\" target=\"_blank\" href=\"http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx\">ProtectedData</a>Â class. After switching to using this, there were no problems decrypting the passwords.</p>\n    <p>\n      <strong>\n        <span style=\"FONT-SIZE: 14pt\">The password recovery tool</span> </strong>\n    </p>\n    <p>I wrote a tiny C# console program to dump the passwords. They can be dumped to the console (default) or to an XML file. Running the program without parameters will try to dump all the passwords to the console. You might need to have Chrome closed while doing this. Run the program with the -help switch to display a short usage information message.</p>\n    <p>I am including the program for download here - both in a precompiled form and the C# source. It requires .NET Framework 3.5. The program as well as it's source is free for use non-commercially and is provided without any warranty or obligations for me, neither explicit or implied. It probably won't kill your cat, but don't come to me crying about it if it does ;-). If you wish to use the source or derivate thereof in a commercial product, contact me for permission first.</p>\n    <p>\n      <strong>\n        <span style=\"FONT-SIZE: 14pt\">Download:</span> </strong>\n    </p>\n    <ul>\n      <li>\n        <a href=\"~/media/B07CCDB309B14456B1DF8DE9DE0025AA.ashx\">ChromePasswordRecover (binary package - unzip and run cprecover.exe in a console window)</a> <a href=\"~/media/358B8B553CCE4E88B3788338E4FE787E.ashx\"></a></li>\n      <li>\n        <a href=\"~/media/358B8B553CCE4E88B3788338E4FE787E.ashx\">ChromePasswordRecover - C# source.</a> </li>\n    </ul>\n    <p>\n      <strong>\n        <span style=\"FONT-SIZE: 14pt\">What is missing ?</span> <br /></strong>It would be nice to have an option to import the exported passwords into a new Chrome installation on another computer. I am considering adding it, but don't really need it at this time. It should be relatively easy - if you happen to develop the feature based on my work, please email me the source.</p>","Author":"Dennis Riis","Published":"2008-12-28T17:42:00.0000000Z","IsPublished":true,"Comments":[{"Email":"gokulatforum@gmail.com","Approved":true,"Body":"I am unable to get your source working. It's failing in the openconnection method.<br />Pleas help. <br />Thanks<br /><br />Attached Error details for reference<br />Exception occured:<br />ConfigurationErrorsException: Failed to find or load the registered .Net Framework Data Provider.<br />Stack Trace:<br />   at System.Data.Common.DbProviderFactories.GetFactory(DataRow providerRow)<br />   at System.Data.Common.DbProviderFactories.GetFactory(String providerInvariantName)<br />   at dr.ChromePasswordRecover.LoginReader.OpenConnection() in C:\\test\\ChromePasswordRecover\\LoginReader.cs:line 102<br />   at dr.ChromePasswordRecover.LoginReader.GetLogins(String url) in C:\\test\\ChromePasswordRecover\\LoginReader.cs:line 56<br />   at dr.ChromePasswordRecover.Program.RunProgram(String[] args) in C:\\test\\ChromePasswordRecover\\Program.cs:line 49<br />   at dr.Commons.ConsoleUtility.BaseProgram.Main[T](Func`1 constructor, String[] args) in C:\\test\\dr.Commons\\ConsoleUtility\\BaseProgram.cs:line 67<br />","Author":"Gokul","Created":"2009-06-19T20:01:38.0000000Z"},{"Email":"gokulatforum@gmail.com","Approved":true,"Body":"The above issue is resolved. <br />open the properties of \"System.Data.SQLite.dll\" file and set CopyLocal to true. It works like a charm :)","Author":"Gokul","Created":"2009-06-19T20:45:00.0000000Z"},{"Email":"sdblepas@gmail.com","Approved":true,"Body":"Hi<br />Thx for your script but here's what going on<br />any idea?<br />THX<br /><br /><br />Exception occured:<br />SQLiteException: The database file is locked<br />database is locked<br />Stack Trace:<br />   at System.Data.SQLite.SQLite3.Prepare(SQLiteConnection cnn, String strSql, SQ<br />LiteStatement previous, UInt32 timeoutMS, String& strRemain)<br />   at System.Data.SQLite.SQLiteCommand.BuildNextCommand()<br />   at System.Data.SQLite.SQLiteCommand.GetStatement(Int32 index)<br />   at System.Data.SQLite.SQLiteDataReader.NextResult()<br />   at System.Data.SQLite.SQLiteDataReader..ctor(SQLiteCommand cmd, CommandBehavi<br />or behave)<br />   at System.Data.SQLite.SQLiteCommand.ExecuteReader(CommandBehavior behavior)<br />   at System.Data.SQLite.SQLiteCommand.ExecuteNonQuery()<br />   at System.Data.SQLite.SQLiteConnection.Open()<br />   at dr.ChromePasswordRecover.LoginReader.OpenConnection()<br />   at dr.ChromePasswordRecover.LoginReader.GetLogins(String url)<br />   at dr.ChromePasswordRecover.Program.RunProgram(String[] args)<br />   at dr.Commons.ConsoleUtility.BaseProgram.Main[T](Func`1 constructor, String[]<br /> args)","Author":"sdblepas","Created":"2009-07-29T06:59:31.0000000Z"},{"Email":"cotfas@gmail.com","Approved":true,"Body":"this tool doesn`t work with \"web data\" files from another machine :( how can i decrypt if is from another machine...","Author":"rilley","Created":"2009-08-12T12:27:14.0000000Z"},{"Email":"dr@driis.dk","Approved":true,"Body":"You cannot decrypt passwords from a file obtained from another machine, this is by design.","Author":"Dennis Riis","Created":"2009-08-12T12:40:45.0000000Z"},{"Email":"themephistophelian@yahoo.com","Approved":true,"Body":"awesome stuff.. thanx... <br /><br />@ sdblepas <br /><br />Close chrome and then try to run the exe.. if u r running chrome the db will be locked... ","Author":"Akhil Sakpal","Created":"2009-09-13T20:29:15.0000000Z"},{"Email":"","Approved":true,"Body":"Hi! great stuff<br />in command line if u type so:<br />cprecover.exe -> pass.txt<br />it saves them to a txt file named pass","Author":"grim","Created":"2009-12-09T13:31:36.0000000Z"},{"Email":"","Approved":true,"Body":"Where does it save the passwords to? I run cprecover.exe and everything seems to work (it runs through some stuff and then exits automatically), but now I don't know where they are!","Author":"autumn","Created":"2010-01-11T01:55:55.0000000Z"},{"Email":"","Approved":true,"Body":"okay, I figured it out and thought I would post just in case anyone finds themselves in the same predicament:<br /><br />1) Open Command Prompt<br />2) Type the complete path to cprecover.exe (for example, my file is saved to the desktop so I type \"Desktop\\cprecover.exe\")<br />3) This should return a list of URLs, usernames, and passwords<br />4) If you want to save all these files in a document, type \"Desktop\\cprecover.exe > passwords.txt\"<br />5) You will find the passwords.txt file in your personal folder (the file where you access your documents, music, photos, etc.)<br /><br />YAY for Dennis Riis!","Author":"autumn","Created":"2010-01-11T02:37:41.0000000Z"},{"Email":"vladimir.dimitrov@gmail.com","Approved":true,"Body":"Thanks a lot!<br />works perfect on win7 64bit.<br />this tool saved me a lot of screenshots ;)<br /><br />Tnx again<br /><br />;)","Author":"Vladi ","Created":"2010-08-25T13:34:08.0000000Z"},{"Email":"srouquette@gmail.com","Approved":true,"Body":"Doesn't seem to work with Chrome 6.0.472.51 beta.<br />It seems to read the right file (because I have an error if Chrome is running), but after closing Chrome and running cprecover again, it displays an empty list. The xml dump is also empty.","Author":"Syl","Created":"2010-08-28T11:16:41.0000000Z"},{"Email":"srouquette@gmail.com","Approved":true,"Body":"yup, could make it work 2 sec later  ^^;<br />Copy \"Login Data\" from C:\\Users\\[USER]\\AppData\\Local\\Google\\Chrome\\User Data\\Default in you cprecover directory, then run \"cprecover.exe -file:\"Login Data\" -dump:password.xml\"","Author":"Syl","Created":"2010-08-28T11:21:21.0000000Z"},{"Email":"sumit500@gmail.com","Approved":true,"Body":"Great tool <br />thanks for your hard work <br />worked perfectly","Author":"Sumit","Created":"2010-09-03T17:31:26.0000000Z"},{"Email":"meetneps@gmail.com","Approved":true,"Body":"This one has a problem of dotnet framework to be installed. rather can we write a plugin for chrome that does this job of exporting all the password. would that sounds simple. I m thinking of writing if you guys say that.<br /><br />Prince Of Code","Author":"Prince Of Code","Created":"2010-09-26T08:29:54.0000000Z"},{"Email":"","Approved":true,"Body":"Thanks to program author for writing it, and thanks to Syl for comment about how to use it on newer Chrome versions. It worked and saved me at least an hour :)","Author":"freelancer","Created":"2010-11-03T13:52:17.0000000Z"},{"Email":"frankvb80@gmail.com","Approved":true,"Body":"Link is broken. Please fix! I'm glad you took the time to figure this out.","Author":"Frank","Created":"2014-04-24T19:48:10.4891236"},{"Email":"commander.keith+kk39@outlook.com","Approved":true,"Body":"Please make available OSX binaries  :)   for 10.9 or newer for chromium 35 or newer\r\n\r\nI am very-not-interested in using a google account to export my private/secret site account information\r\n\r\n\r\n\r\n\r\n","Author":"keith is best","Created":"2014-06-04T07:53:08.8058605"},{"Email":"zen@yahoo.com","Approved":true,"Body":"this is the new link\r\nhttp://cprecover.codeplex.com/releases/view/81306","Author":"zen","Created":"2014-08-12T02:54:22.4054279"},{"Email":"Carlosj.lopez19@Gmail.com","Approved":true,"Body":"I just set up this email i need add the verification code .","Author":"Carlos","Created":"2016-02-13T07:02:42.4090266"},{"Email":"igetorix@yahoo.co.uk","Approved":true,"Body":"Thanks for Yours gift :)\r\nHow use this tool under Linux->Ubuntu ?\r\nI will try to compile Yours source under mono. Did you tried that ?","Author":"Marian","Created":"2016-11-04T05:14:21.5838145"},{"Email":"nhbdh5ujr@papillomadelete.info","Approved":true,"Body":"You will forfeit weight faster by eating anything oodles of flab . once 7 days because this &quot;pig out&quot; day will actually give your own a &quot;calorie spike&quot; which keeps your metabolism running on high. That is a great advantage for the diet plan over other diets which put program into starvation mode come up with it harder to drop. Theres also the great psychological advantage becoming able in  \r\nhttp://magdalenabus.tk/page/burning-tongue/ ","Author":"BernSoary","Created":"2019-05-12T14:06:46.3072445"}],"Tags":["General technology",".NET"],"Created":"2008-12-28T17:42:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Origin":"http://localhost:8080","Raven-Entity-Name":"Posts","Non-Authoritive-Information":"false","Raven-Replication-History":[{"Raven-Replication-Version":37,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"},{"Raven-Replication-Version":77,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"},{"Raven-Replication-Version":2,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":258,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":514,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":770,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1026,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"}],"Raven-Replication-Version":1798,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15","@id":"posts/11","Temp-Index-Score":1.0,"Last-Modified":"2019-05-12T14:06:57.7534732Z","@etag":"00000001-0000-c800-0000-000000000006","Non-Authoritative-Information":false}},{"Title":"Sitecore Dictionary gotcha when using the master database","UrlName":"Sitecore-Dictionary-gotcha-when-using-the-master-database","BodyHtml":"\n\t\t<p>During some projects at work, we were having a real weird problem with the Sitecore Dictionary feature. This is the built in feature in Sitecore that lets you localize short texts, such as what to put in the \"Read more\" or \"Next page\" links on a web page. Of course, there are many ways to do this, but since Dictionary items is a supported Sitecore feature, and they can be edited from within the Sitecore environment, it seems reasonable to use this for Sitecore sites.</p>\n    <p>This is how it works: You put dictionary items under /sitecore/system/Dictionary. Each dictionary item consists of a shared key and a localized phrase field. That is, the key is the same for all languages, the phrase varies by language. To get a phrase at runtime, you use the static <strong>Translate.Text</strong> method and pass the key as a parameter, and it will return the correct phrase in the current context language (or you can explicitly pass a Language). This is also described <a title=\"Globalization article on Sitecore Developer Network\" href=\"http://sdn5.sitecore.net/SDN5/FAQ/Archive/Administration/How%20is%20localization%20done%20in%20Sitecore.aspx\" target=\"_blank\">on SDN here</a> (you will need an SDN account to access the article). There even is an XSLT extension function for the Translate methods. Very nice.</p>\n    <p>The problem we were facing started to occur when we moved some of our front-end developers (who does most of the localization texts) away from working on a test-server, and instead having their own development version on their own workstation, working there (the way it really should be done - also gives you a better chance of running <a title=\"Continuous Integration article\" href=\"http://www.martinfowler.com/articles/continuousIntegration.html\" target=\"_blank\">CI</a>). The problem was, that on one developer's workstation you would see one set of Dictionary items on the website, on another workstation there would be a different set. Sometimes all dictionary phrases was completely missing. Inside the Sitecore Content Editor, the data seemed to be correct.</p>\n    <p>So I started digging around to find an explanation. I started using <a title=\".NET Reflector\" href=\"http://www.red-gate.com/products/reflector/\" target=\"_blank\">Reflector</a> to determine what was really going on in the Sitecore.Globalization.Translate class. I quickly found out, that the class internally keeps a Hashtable containing the languages, and in that a Hashtable for each language's texts, in memory. Great for quick lookups. So when and how is the Hashtable filled with data ? This is where it gets tricky. When a phrase is first requested (after a application restart), Sitecore will look for a file called dictionary.dat in the temp directory and try to load it. This is where the Translate class keeps it's persistent cache: Each time a key is added, it will get saved to the file (in addition to being kept in memory); and it will try to load it from there when a phrase is requested, and there is no dictionary data in memory. If reading this file fails, it will rebuild it from the data in the database. Here lies the first problem: You might know that Sitecore operates with a core database (for Sitecore itself), a master database for content and a web database that content is served from. As it turns out, the dictionary will only ever be re-populated with data from the core database. This is hard-coded in the class. And we were adding all our Dictionary items to the master database (since this is really where they should be, it is content). This was my first \"that's funny\" moment - If the dictionary cache only rebuilds from core; how could our setup ever have worked ??</p>\n    <p>Time to research some more. After some more tinkering around, I found the Sitecore.Globalization.ItemSaveEventHandler. This is an event handler, that is hooked up to the ItemSaving event in web.config. What this does, is that whenever an item is saved, if it is of type \"dictionary item\", it will add the key and phrase to the internal language hashtable, which will also trigger a save of the dictionary.dat file. This event handler however, does not care which database is being used. Both master and core (and web for that matter) database saves, will trigger a update of the cache.</p>\n    <p>This explained everything. If Sitecore is being used on the same machine only, dictionary items in the master database, will work. If it is deployed to production, it will work, because we typically copy the entire website folder, including the temp files, and thus the \"correct\" dictionary.dat. However, if Sitecore is used in parallel on different servers, you will start seeing the errors we were seing, inconsistent and/or missing dictionary entries. This could be an issue during development if you setup the environment on different developer workstations, but also in staging environments or in load-balanced environments (depending on your setup). If dictionary items (again, in the master database), is saved in parallel on different environments, it will generate different dictionary.dat files with different phrases, and it is impossible to merge. And if you lose dictionary.dat, you can't restore the master dictionary entries without saving each item again.</p>\n    <p>Revisiting the SDN documentation, though it is quite thin on the subject, it does state that you should add your own dictionary items to the <strong>core</strong> database. It feels wrong to do this, since our own dictionary items would then be mixed with Sitecore's own internal ones; and because I don't think the core database is a place to store customer data. So I guess it is not a bug that storing dictionary items in the master is not supported, but it would be a nice and reasonable feature. But I do think that there is a bug here; in that it is at all possible to use dictionary items stored in master, when it is not supported. It should definitely work consistently; and not be some half-baked feature that works \"occasionally, if you use the right setup\". It should also be noted that the Dictionary node is already in the master database in a clean installation, so there are no alarm clocks going off when the novice Sitecore programmer starts using it.</p>\n    <p>Now, we already have solutions in production using this approach, and time committed on ongoing projects for using it this way. So we needed a way to ensure that dictionary items in the master database would behave consistently and just work. </p>\n    <p>The solution is below. It is basically a class that can rebuild the Sitecore dictionary from both databases. It reuses the Sitecore logic by invoking their Load and Save methods using reflection, and overwriting the static _languages hashtable field in the Translate class. This is really not pretty, it is a ugly hack, and I would definitely prefer not to use reflection to call into methods that were never intended to be used from outside the class. That being said however, it seems to work - but of course there are no guarantees, and if it blows up or kills your kitten; I'm not responsible.</p>\n    <p>To use it, simply call the Rebuild method. I used a custom IHttpHandler for the purpose, so I can call the URL whenever needed (don't deploy the handler it into production however ;-) ). After the cache has been rebuilt, you can share the dictionary.dat with other development machines just by copying it, or you can just rebuild when needed at each developer's discretion.</p>\n    <div class=\"csharpcode\">\n      <pre>        <span class=\"lnum\"> 1: </span><span class=\"kwrd\">using</span> System;</pre>\n      <pre>        <span class=\"lnum\"> 2: </span><span class=\"kwrd\">using</span> System.Reflection;</pre>\n      <pre>        <span class=\"lnum\"> 3: </span><span class=\"kwrd\">using</span> Sitecore.Data;</pre>\n      <pre>        <span class=\"lnum\"> 4: </span><span class=\"kwrd\">using</span> Sitecore.Configuration;</pre>\n      <pre>        <span class=\"lnum\"> 5: </span><span class=\"kwrd\">using</span> System.Collections;</pre>\n      <pre>        <span class=\"lnum\"> 6: </span><span class=\"kwrd\">using</span> Sitecore.Data.Items;</pre>\n      <pre>        <span class=\"lnum\"> 7: </span><span class=\"kwrd\">using</span> Sitecore.SecurityModel;</pre>\n      <pre>        <span class=\"lnum\"> 8: </span></pre>\n      <pre>        <span class=\"lnum\"> 9: </span><span class=\"kwrd\">namespace</span> Webdanmark.SitecoreCMS.Common.Utility</pre>\n      <pre>        <span class=\"lnum\"> 10: </span>{</pre>\n      <pre>        <span class=\"lnum\"> 11: </span>    <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 12: </span>    <span class=\"rem\">/// This class supports rebuilding the Sitecore dictionary from both Core and Master databases.</span></pre>\n      <pre>        <span class=\"lnum\"> 13: </span>    <span class=\"rem\">/// Default implementation from Sitecore can only rebuild from Core, which leads to various issues if</span></pre>\n      <pre>        <span class=\"lnum\"> 14: </span>    <span class=\"rem\">/// the temp dictionary.dat file is lost, or editing happens on multiple servers.</span></pre>\n      <pre>        <span class=\"lnum\"> 15: </span>    <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 16: </span>    <span class=\"rem\">/// &lt;remarks&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 17: </span>    <span class=\"rem\">/// This class tinkers with Sitecore private methods and internal workings. Not pretty.</span></pre>\n      <pre>        <span class=\"lnum\"> 18: </span>    <span class=\"rem\">/// This is a hack to workaround a limitation in Sitecore without re-implementing the whole thing.</span></pre>\n      <pre>        <span class=\"lnum\"> 19: </span>    <span class=\"rem\">/// &lt;/remarks&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 20: </span>    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> DictionaryRebuilder</pre>\n      <pre>        <span class=\"lnum\"> 21: </span>    {</pre>\n      <pre>        <span class=\"lnum\"> 22: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 23: </span>        <span class=\"rem\">/// Event fired when progress in the task occurs.</span></pre>\n      <pre>        <span class=\"lnum\"> 24: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 25: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">event</span> EventHandler&lt;DictionaryRebuilderEventArgs&gt; Progress;</pre>\n      <pre>        <span class=\"lnum\"> 26: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 27: </span>        <span class=\"rem\">/// Databases.</span></pre>\n      <pre>        <span class=\"lnum\"> 28: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 29: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Database[] databases;</pre>\n      <pre>        <span class=\"lnum\"> 30: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 31: </span>        <span class=\"rem\">/// The Translate type.</span></pre>\n      <pre>        <span class=\"lnum\"> 32: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 33: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Type translateType;</pre>\n      <pre>        <span class=\"lnum\"> 34: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 35: </span>        <span class=\"rem\">/// Load method.</span></pre>\n      <pre>        <span class=\"lnum\"> 36: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 37: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Action&lt;Hashtable, Item&gt; loadMethod;</pre>\n      <pre>        <span class=\"lnum\"> 38: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 39: </span>        <span class=\"rem\">/// Binding flags for a private static member.</span></pre>\n      <pre>        <span class=\"lnum\"> 40: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 41: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">readonly</span> BindingFlags privateStatic = BindingFlags.Static | BindingFlags.NonPublic;</pre>\n      <pre>        <span class=\"lnum\"> 42: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 43: </span>        <span class=\"rem\">/// Save method</span></pre>\n      <pre>        <span class=\"lnum\"> 44: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 45: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Action saveMethod;</pre>\n      <pre>        <span class=\"lnum\"> 46: </span> </pre>\n      <pre>        <span class=\"lnum\"> 47: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 48: </span>        <span class=\"rem\">/// Initializes a new instance of the &lt;see cref=\"DictionaryRebuilder\"/&gt; class.</span></pre>\n      <pre>        <span class=\"lnum\"> 49: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 50: </span>        <span class=\"kwrd\">public</span> DictionaryRebuilder()</pre>\n      <pre>        <span class=\"lnum\"> 51: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 52: </span>            databases = <span class=\"kwrd\">new</span>[] { Factory.GetDatabase(<span class=\"str\">\"core\"</span>), Factory.GetDatabase(<span class=\"str\">\"master\"</span>)};</pre>\n      <pre>        <span class=\"lnum\"> 53: </span>            translateType = <span class=\"kwrd\">typeof</span>(Sitecore.Globalization.Translate);</pre>\n      <pre>        <span class=\"lnum\"> 54: </span>            loadMethod = (Action&lt;Hashtable, Item&gt;) FindMethod&lt;Action&lt;Hashtable,Item&gt;&gt;(<span class=\"str\">\"Load\"</span>, privateStatic, <span class=\"kwrd\">typeof</span> (Hashtable), <span class=\"kwrd\">typeof</span> (Item));</pre>\n      <pre>        <span class=\"lnum\"> 55: </span>            saveMethod = (Action) FindMethod&lt;Action&gt;(<span class=\"str\">\"Save\"</span>, privateStatic);</pre>\n      <pre>        <span class=\"lnum\"> 56: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 57: </span> </pre>\n      <pre>        <span class=\"lnum\"> 58: </span> </pre>\n      <pre>        <span class=\"lnum\"> 59: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 60: </span>        <span class=\"rem\">/// Rebuilds the dictionary cache.</span></pre>\n      <pre>        <span class=\"lnum\"> 61: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 62: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> Rebuild()</pre>\n      <pre>        <span class=\"lnum\"> 63: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 64: </span>            Hashtable rootTable = <span class=\"kwrd\">new</span> Hashtable(10);</pre>\n      <pre>        <span class=\"lnum\"> 65: </span>            <span class=\"kwrd\">foreach</span> (var db <span class=\"kwrd\">in</span> databases)</pre>\n      <pre>        <span class=\"lnum\"> 66: </span>            {</pre>\n      <pre>        <span class=\"lnum\"> 67: </span>                var langs = db.Languages;</pre>\n      <pre>        <span class=\"lnum\"> 68: </span>                SendMessage(<span class=\"str\">\"\\nProcessing {0} database, {1} languages.\"</span>, db.Name, langs.Length);</pre>\n      <pre>        <span class=\"lnum\"> 69: </span>                <span class=\"kwrd\">foreach</span> (var language <span class=\"kwrd\">in</span> langs)</pre>\n      <pre>        <span class=\"lnum\"> 70: </span>                {</pre>\n      <pre>        <span class=\"lnum\"> 71: </span>                    <span class=\"kwrd\">string</span> languageKey = language.ToString();</pre>\n      <pre>        <span class=\"lnum\"> 72: </span>                    Hashtable languageTable;</pre>\n      <pre>        <span class=\"lnum\"> 73: </span>                    <span class=\"kwrd\">if</span> (rootTable.ContainsKey(languageKey))</pre>\n      <pre>        <span class=\"lnum\"> 74: </span>                        languageTable = (Hashtable)rootTable[languageKey];</pre>\n      <pre>        <span class=\"lnum\"> 75: </span>                    <span class=\"kwrd\">else</span></pre>\n      <pre>        <span class=\"lnum\"> 76: </span>                        rootTable[languageKey] = languageTable = <span class=\"kwrd\">new</span> Hashtable();</pre>\n      <pre>        <span class=\"lnum\"> 77: </span> </pre>\n      <pre>        <span class=\"lnum\"> 78: </span>                    RebuildLanguage(db, language, languageTable);</pre>\n      <pre>        <span class=\"lnum\"> 79: </span>                }</pre>\n      <pre>        <span class=\"lnum\"> 80: </span>            }</pre>\n      <pre>        <span class=\"lnum\"> 81: </span>            SendMessage(<span class=\"str\">\"\\nLanguages loaded.\"</span>);</pre>\n      <pre>        <span class=\"lnum\"> 82: </span>            ReplaceSitecoreTable(rootTable);</pre>\n      <pre>        <span class=\"lnum\"> 83: </span>            SendMessage(<span class=\"str\">\"Writing data cache to file.\"</span>);</pre>\n      <pre>        <span class=\"lnum\"> 84: </span>            saveMethod();</pre>\n      <pre>        <span class=\"lnum\"> 85: </span>            SendMessage(<span class=\"str\">\"\\nDone.\"</span>);</pre>\n      <pre>        <span class=\"lnum\"> 86: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 87: </span> </pre>\n      <pre>        <span class=\"lnum\"> 88: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 89: </span>        <span class=\"rem\">/// Finds the method.</span></pre>\n      <pre>        <span class=\"lnum\"> 90: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 91: </span>        <span class=\"rem\">/// &lt;typeparam name=\"TDelegate\"&gt;The type of the delegate.&lt;/typeparam&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 92: </span>        <span class=\"rem\">/// &lt;param name=\"name\"&gt;The name.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 93: </span>        <span class=\"rem\">/// &lt;param name=\"bindingFlags\"&gt;The binding flags.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 94: </span>        <span class=\"rem\">/// &lt;param name=\"parameterTypes\"&gt;The parameter types.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 95: </span>        <span class=\"rem\">/// &lt;returns&gt;&lt;/returns&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 96: </span>        <span class=\"kwrd\">private</span> Delegate FindMethod&lt;TDelegate&gt;(<span class=\"kwrd\">string</span> name, BindingFlags bindingFlags, <span class=\"kwrd\">params</span> Type[] parameterTypes)            </pre>\n      <pre>        <span class=\"lnum\"> 97: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 98: </span>            MethodInfo method = translateType.GetMethod(name, bindingFlags, Type.DefaultBinder, parameterTypes, <span class=\"kwrd\">null</span>);</pre>\n      <pre>        <span class=\"lnum\"> 99: </span>            <span class=\"kwrd\">return</span> Delegate.CreateDelegate(<span class=\"kwrd\">typeof</span> (TDelegate), method);</pre>\n      <pre>        <span class=\"lnum\"> 100: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 101: </span> </pre>\n      <pre>        <span class=\"lnum\"> 102: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 103: </span>        <span class=\"rem\">/// Replaces the sitecore table.</span></pre>\n      <pre>        <span class=\"lnum\"> 104: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 105: </span>        <span class=\"rem\">/// &lt;param name=\"hashtable\"&gt;The hashtable.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 106: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> ReplaceSitecoreTable(Hashtable hashtable)</pre>\n      <pre>        <span class=\"lnum\"> 107: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 108: </span>            FieldInfo fi = translateType.GetField(<span class=\"str\">\"_languages\"</span>, privateStatic);</pre>\n      <pre>        <span class=\"lnum\"> 109: </span>            fi.SetValue(<span class=\"kwrd\">null</span>,hashtable);</pre>\n      <pre>        <span class=\"lnum\"> 110: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 111: </span> </pre>\n      <pre>        <span class=\"lnum\"> 112: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 113: </span>        <span class=\"rem\">/// Rebuilds the language.</span></pre>\n      <pre>        <span class=\"lnum\"> 114: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 115: </span>        <span class=\"rem\">/// &lt;param name=\"db\"&gt;The db.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 116: </span>        <span class=\"rem\">/// &lt;param name=\"language\"&gt;The language.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 117: </span>        <span class=\"rem\">/// &lt;param name=\"languageTable\"&gt;The language table.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 118: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> RebuildLanguage(Database db, Sitecore.Globalization.Language language, Hashtable languageTable)</pre>\n      <pre>        <span class=\"lnum\"> 119: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 120: </span>            <span class=\"kwrd\">using</span> (<span class=\"kwrd\">new</span> SecurityDisabler())</pre>\n      <pre>        <span class=\"lnum\"> 121: </span>            {</pre>\n      <pre>        <span class=\"lnum\"> 122: </span>                var dictionaryRoot = db.GetItem(<span class=\"str\">\"/sitecore/system/dictionary\"</span>, language);</pre>\n      <pre>        <span class=\"lnum\"> 123: </span>                <span class=\"kwrd\">if</span> (dictionaryRoot == <span class=\"kwrd\">null</span>)</pre>\n      <pre>        <span class=\"lnum\"> 124: </span>                {</pre>\n      <pre>        <span class=\"lnum\"> 125: </span>                    SendMessage(<span class=\"str\">\"\\tNo dictionary found in {0} for {1}\"</span>, db.Name, language.Name);</pre>\n      <pre>        <span class=\"lnum\"> 126: </span>                    <span class=\"kwrd\">return</span>;</pre>\n      <pre>        <span class=\"lnum\"> 127: </span>                }</pre>\n      <pre>        <span class=\"lnum\"> 128: </span> </pre>\n      <pre>        <span class=\"lnum\"> 129: </span>                SendMessage(<span class=\"str\">\"\\tProcessing {0}\"</span>, language.Name);</pre>\n      <pre>        <span class=\"lnum\"> 130: </span>                loadMethod(languageTable, dictionaryRoot);</pre>\n      <pre>        <span class=\"lnum\"> 131: </span>            }</pre>\n      <pre>        <span class=\"lnum\"> 132: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 133: </span> </pre>\n      <pre>        <span class=\"lnum\"> 134: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 135: </span>        <span class=\"rem\">/// Sends the message.</span></pre>\n      <pre>        <span class=\"lnum\"> 136: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 137: </span>        <span class=\"rem\">/// &lt;param name=\"msg\"&gt;The MSG.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 138: </span>        <span class=\"rem\">/// &lt;param name=\"inserts\"&gt;The inserts.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 139: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> SendMessage(<span class=\"kwrd\">string</span> msg, <span class=\"kwrd\">params</span> <span class=\"kwrd\">object</span> [] inserts)</pre>\n      <pre>        <span class=\"lnum\"> 140: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 141: </span>            <span class=\"kwrd\">if</span> (Progress != <span class=\"kwrd\">null</span>)</pre>\n      <pre>        <span class=\"lnum\"> 142: </span>            {</pre>\n      <pre>        <span class=\"lnum\"> 143: </span>                var args = <span class=\"kwrd\">new</span> DictionaryRebuilderEventArgs {Message = String.Format(msg, inserts)};</pre>\n      <pre>        <span class=\"lnum\"> 144: </span>                Progress(<span class=\"kwrd\">this</span>, args);</pre>\n      <pre>        <span class=\"lnum\"> 145: </span>            }</pre>\n      <pre>        <span class=\"lnum\"> 146: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 147: </span> </pre>\n      <pre>        <span class=\"lnum\"> 148: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 149: </span>        <span class=\"rem\">/// Event arguments</span></pre>\n      <pre>        <span class=\"lnum\"> 150: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 151: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> DictionaryRebuilderEventArgs : EventArgs</pre>\n      <pre>        <span class=\"lnum\"> 152: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 153: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 154: </span>            <span class=\"rem\">/// Gets or sets the message.</span></pre>\n      <pre>        <span class=\"lnum\"> 155: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 156: </span>            <span class=\"rem\">/// &lt;value&gt;The message.&lt;/value&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 157: </span>            <span class=\"kwrd\">public</span> <span class=\"kwrd\">string</span> Message { get; set; }</pre>\n      <pre>        <span class=\"lnum\"> 158: </span>        }        </pre>\n      <pre>        <span class=\"lnum\"> 159: </span>    }</pre>\n      <pre>        <span class=\"lnum\"> 160: </span>}</pre>\n    </div>\n    <p> And you could use it like this:</p>\n    <div class=\"csharpcode\">\n      <pre>        <span class=\"lnum\">1: </span>DictionaryRebuilder builder = <span class=\"kwrd\">new</span> DictionaryRebuilder();</pre>\n      <pre>        <span class=\"lnum\">2: </span>builder.Progress += (s, e) =&gt; Response.WriteLine(e.Message);</pre>\n      <pre>        <span class=\"lnum\">3: </span>builder.Rebuild();</pre>\n    </div>\n    <p>\n    </p>\n    <p>If you want to display progress while rebuilding, hookup the Progress method to some event handler. The one in my example won't compile for you, since Response.WriteLine is an extension method in one of our common libraries.</p>\n    <p>\n      <em>Disclaimer: The contents of this Blog post is my own opinions only. I am not affiliated with Sitecore in any way. Some of the technical details was extracted using <a href=\"http://www.red-gate.com/products/reflector/\" target=\"_blank\">Reflector</a>, and some are educated guesswork. I might be wrong, and Sitecore might very well change the implementation in a later version, so that the information above does no longer apply. This was done on Sitecore 6.0.1. rev 090212, but I suspect that the general idea is the same in previous Sitecore versions.</em> </p>","Body":"\n\t\t<p>During some projects at work, we were having a real weird problem with the Sitecore Dictionary feature. This is the built in feature in Sitecore that lets you localize short texts, such as what to put in the \"Read more\" or \"Next page\" links on a web page. Of course, there are many ways to do this, but since Dictionary items is a supported Sitecore feature, and they can be edited from within the Sitecore environment, it seems reasonable to use this for Sitecore sites.</p>\n    <p>This is how it works: You put dictionary items under /sitecore/system/Dictionary. Each dictionary item consists of a shared key and a localized phrase field. That is, the key is the same for all languages, the phrase varies by language. To get a phrase at runtime, you use the static <strong>Translate.Text</strong> method and pass the key as a parameter, and it will return the correct phrase in the current context language (or you can explicitly pass a Language). This is also described <a title=\"Globalization article on Sitecore Developer Network\" href=\"http://sdn5.sitecore.net/SDN5/FAQ/Archive/Administration/How%20is%20localization%20done%20in%20Sitecore.aspx\" target=\"_blank\">on SDN here</a> (you will need an SDN account to access the article). There even is an XSLT extension function for the Translate methods. Very nice.</p>\n    <p>The problem we were facing started to occur when we moved some of our front-end developers (who does most of the localization texts) away from working on a test-server, and instead having their own development version on their own workstation, working there (the way it really should be done - also gives you a better chance of running <a title=\"Continuous Integration article\" href=\"http://www.martinfowler.com/articles/continuousIntegration.html\" target=\"_blank\">CI</a>). The problem was, that on one developer's workstation you would see one set of Dictionary items on the website, on another workstation there would be a different set. Sometimes all dictionary phrases was completely missing. Inside the Sitecore Content Editor, the data seemed to be correct.</p>\n    <p>So I started digging around to find an explanation. I started using <a title=\".NET Reflector\" href=\"http://www.red-gate.com/products/reflector/\" target=\"_blank\">Reflector</a> to determine what was really going on in the Sitecore.Globalization.Translate class. I quickly found out, that the class internally keeps a Hashtable containing the languages, and in that a Hashtable for each language's texts, in memory. Great for quick lookups. So when and how is the Hashtable filled with data ? This is where it gets tricky. When a phrase is first requested (after a application restart), Sitecore will look for a file called dictionary.dat in the temp directory and try to load it. This is where the Translate class keeps it's persistent cache: Each time a key is added, it will get saved to the file (in addition to being kept in memory); and it will try to load it from there when a phrase is requested, and there is no dictionary data in memory. If reading this file fails, it will rebuild it from the data in the database. Here lies the first problem: You might know that Sitecore operates with a core database (for Sitecore itself), a master database for content and a web database that content is served from. As it turns out, the dictionary will only ever be re-populated with data from the core database. This is hard-coded in the class. And we were adding all our Dictionary items to the master database (since this is really where they should be, it is content). This was my first \"that's funny\" moment - If the dictionary cache only rebuilds from core; how could our setup ever have worked ??</p>\n    <p>Time to research some more. After some more tinkering around, I found the Sitecore.Globalization.ItemSaveEventHandler. This is an event handler, that is hooked up to the ItemSaving event in web.config. What this does, is that whenever an item is saved, if it is of type \"dictionary item\", it will add the key and phrase to the internal language hashtable, which will also trigger a save of the dictionary.dat file. This event handler however, does not care which database is being used. Both master and core (and web for that matter) database saves, will trigger a update of the cache.</p>\n    <p>This explained everything. If Sitecore is being used on the same machine only, dictionary items in the master database, will work. If it is deployed to production, it will work, because we typically copy the entire website folder, including the temp files, and thus the \"correct\" dictionary.dat. However, if Sitecore is used in parallel on different servers, you will start seeing the errors we were seing, inconsistent and/or missing dictionary entries. This could be an issue during development if you setup the environment on different developer workstations, but also in staging environments or in load-balanced environments (depending on your setup). If dictionary items (again, in the master database), is saved in parallel on different environments, it will generate different dictionary.dat files with different phrases, and it is impossible to merge. And if you lose dictionary.dat, you can't restore the master dictionary entries without saving each item again.</p>\n    <p>Revisiting the SDN documentation, though it is quite thin on the subject, it does state that you should add your own dictionary items to the <strong>core</strong> database. It feels wrong to do this, since our own dictionary items would then be mixed with Sitecore's own internal ones; and because I don't think the core database is a place to store customer data. So I guess it is not a bug that storing dictionary items in the master is not supported, but it would be a nice and reasonable feature. But I do think that there is a bug here; in that it is at all possible to use dictionary items stored in master, when it is not supported. It should definitely work consistently; and not be some half-baked feature that works \"occasionally, if you use the right setup\". It should also be noted that the Dictionary node is already in the master database in a clean installation, so there are no alarm clocks going off when the novice Sitecore programmer starts using it.</p>\n    <p>Now, we already have solutions in production using this approach, and time committed on ongoing projects for using it this way. So we needed a way to ensure that dictionary items in the master database would behave consistently and just work. </p>\n    <p>The solution is below. It is basically a class that can rebuild the Sitecore dictionary from both databases. It reuses the Sitecore logic by invoking their Load and Save methods using reflection, and overwriting the static _languages hashtable field in the Translate class. This is really not pretty, it is a ugly hack, and I would definitely prefer not to use reflection to call into methods that were never intended to be used from outside the class. That being said however, it seems to work - but of course there are no guarantees, and if it blows up or kills your kitten; I'm not responsible.</p>\n    <p>To use it, simply call the Rebuild method. I used a custom IHttpHandler for the purpose, so I can call the URL whenever needed (don't deploy the handler it into production however ;-) ). After the cache has been rebuilt, you can share the dictionary.dat with other development machines just by copying it, or you can just rebuild when needed at each developer's discretion.</p>\n    <div class=\"csharpcode\">\n      <pre>        <span class=\"lnum\"> 1: </span><span class=\"kwrd\">using</span> System;</pre>\n      <pre>        <span class=\"lnum\"> 2: </span><span class=\"kwrd\">using</span> System.Reflection;</pre>\n      <pre>        <span class=\"lnum\"> 3: </span><span class=\"kwrd\">using</span> Sitecore.Data;</pre>\n      <pre>        <span class=\"lnum\"> 4: </span><span class=\"kwrd\">using</span> Sitecore.Configuration;</pre>\n      <pre>        <span class=\"lnum\"> 5: </span><span class=\"kwrd\">using</span> System.Collections;</pre>\n      <pre>        <span class=\"lnum\"> 6: </span><span class=\"kwrd\">using</span> Sitecore.Data.Items;</pre>\n      <pre>        <span class=\"lnum\"> 7: </span><span class=\"kwrd\">using</span> Sitecore.SecurityModel;</pre>\n      <pre>        <span class=\"lnum\"> 8: </span></pre>\n      <pre>        <span class=\"lnum\"> 9: </span><span class=\"kwrd\">namespace</span> Webdanmark.SitecoreCMS.Common.Utility</pre>\n      <pre>        <span class=\"lnum\"> 10: </span>{</pre>\n      <pre>        <span class=\"lnum\"> 11: </span>    <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 12: </span>    <span class=\"rem\">/// This class supports rebuilding the Sitecore dictionary from both Core and Master databases.</span></pre>\n      <pre>        <span class=\"lnum\"> 13: </span>    <span class=\"rem\">/// Default implementation from Sitecore can only rebuild from Core, which leads to various issues if</span></pre>\n      <pre>        <span class=\"lnum\"> 14: </span>    <span class=\"rem\">/// the temp dictionary.dat file is lost, or editing happens on multiple servers.</span></pre>\n      <pre>        <span class=\"lnum\"> 15: </span>    <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 16: </span>    <span class=\"rem\">/// &lt;remarks&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 17: </span>    <span class=\"rem\">/// This class tinkers with Sitecore private methods and internal workings. Not pretty.</span></pre>\n      <pre>        <span class=\"lnum\"> 18: </span>    <span class=\"rem\">/// This is a hack to workaround a limitation in Sitecore without re-implementing the whole thing.</span></pre>\n      <pre>        <span class=\"lnum\"> 19: </span>    <span class=\"rem\">/// &lt;/remarks&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 20: </span>    <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> DictionaryRebuilder</pre>\n      <pre>        <span class=\"lnum\"> 21: </span>    {</pre>\n      <pre>        <span class=\"lnum\"> 22: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 23: </span>        <span class=\"rem\">/// Event fired when progress in the task occurs.</span></pre>\n      <pre>        <span class=\"lnum\"> 24: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 25: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">event</span> EventHandler&lt;DictionaryRebuilderEventArgs&gt; Progress;</pre>\n      <pre>        <span class=\"lnum\"> 26: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 27: </span>        <span class=\"rem\">/// Databases.</span></pre>\n      <pre>        <span class=\"lnum\"> 28: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 29: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Database[] databases;</pre>\n      <pre>        <span class=\"lnum\"> 30: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 31: </span>        <span class=\"rem\">/// The Translate type.</span></pre>\n      <pre>        <span class=\"lnum\"> 32: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 33: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Type translateType;</pre>\n      <pre>        <span class=\"lnum\"> 34: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 35: </span>        <span class=\"rem\">/// Load method.</span></pre>\n      <pre>        <span class=\"lnum\"> 36: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 37: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Action&lt;Hashtable, Item&gt; loadMethod;</pre>\n      <pre>        <span class=\"lnum\"> 38: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 39: </span>        <span class=\"rem\">/// Binding flags for a private static member.</span></pre>\n      <pre>        <span class=\"lnum\"> 40: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 41: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">readonly</span> BindingFlags privateStatic = BindingFlags.Static | BindingFlags.NonPublic;</pre>\n      <pre>        <span class=\"lnum\"> 42: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 43: </span>        <span class=\"rem\">/// Save method</span></pre>\n      <pre>        <span class=\"lnum\"> 44: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 45: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">readonly</span> Action saveMethod;</pre>\n      <pre>        <span class=\"lnum\"> 46: </span> </pre>\n      <pre>        <span class=\"lnum\"> 47: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 48: </span>        <span class=\"rem\">/// Initializes a new instance of the &lt;see cref=\"DictionaryRebuilder\"/&gt; class.</span></pre>\n      <pre>        <span class=\"lnum\"> 49: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 50: </span>        <span class=\"kwrd\">public</span> DictionaryRebuilder()</pre>\n      <pre>        <span class=\"lnum\"> 51: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 52: </span>            databases = <span class=\"kwrd\">new</span>[] { Factory.GetDatabase(<span class=\"str\">\"core\"</span>), Factory.GetDatabase(<span class=\"str\">\"master\"</span>)};</pre>\n      <pre>        <span class=\"lnum\"> 53: </span>            translateType = <span class=\"kwrd\">typeof</span>(Sitecore.Globalization.Translate);</pre>\n      <pre>        <span class=\"lnum\"> 54: </span>            loadMethod = (Action&lt;Hashtable, Item&gt;) FindMethod&lt;Action&lt;Hashtable,Item&gt;&gt;(<span class=\"str\">\"Load\"</span>, privateStatic, <span class=\"kwrd\">typeof</span> (Hashtable), <span class=\"kwrd\">typeof</span> (Item));</pre>\n      <pre>        <span class=\"lnum\"> 55: </span>            saveMethod = (Action) FindMethod&lt;Action&gt;(<span class=\"str\">\"Save\"</span>, privateStatic);</pre>\n      <pre>        <span class=\"lnum\"> 56: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 57: </span> </pre>\n      <pre>        <span class=\"lnum\"> 58: </span> </pre>\n      <pre>        <span class=\"lnum\"> 59: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 60: </span>        <span class=\"rem\">/// Rebuilds the dictionary cache.</span></pre>\n      <pre>        <span class=\"lnum\"> 61: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 62: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">void</span> Rebuild()</pre>\n      <pre>        <span class=\"lnum\"> 63: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 64: </span>            Hashtable rootTable = <span class=\"kwrd\">new</span> Hashtable(10);</pre>\n      <pre>        <span class=\"lnum\"> 65: </span>            <span class=\"kwrd\">foreach</span> (var db <span class=\"kwrd\">in</span> databases)</pre>\n      <pre>        <span class=\"lnum\"> 66: </span>            {</pre>\n      <pre>        <span class=\"lnum\"> 67: </span>                var langs = db.Languages;</pre>\n      <pre>        <span class=\"lnum\"> 68: </span>                SendMessage(<span class=\"str\">\"\\nProcessing {0} database, {1} languages.\"</span>, db.Name, langs.Length);</pre>\n      <pre>        <span class=\"lnum\"> 69: </span>                <span class=\"kwrd\">foreach</span> (var language <span class=\"kwrd\">in</span> langs)</pre>\n      <pre>        <span class=\"lnum\"> 70: </span>                {</pre>\n      <pre>        <span class=\"lnum\"> 71: </span>                    <span class=\"kwrd\">string</span> languageKey = language.ToString();</pre>\n      <pre>        <span class=\"lnum\"> 72: </span>                    Hashtable languageTable;</pre>\n      <pre>        <span class=\"lnum\"> 73: </span>                    <span class=\"kwrd\">if</span> (rootTable.ContainsKey(languageKey))</pre>\n      <pre>        <span class=\"lnum\"> 74: </span>                        languageTable = (Hashtable)rootTable[languageKey];</pre>\n      <pre>        <span class=\"lnum\"> 75: </span>                    <span class=\"kwrd\">else</span></pre>\n      <pre>        <span class=\"lnum\"> 76: </span>                        rootTable[languageKey] = languageTable = <span class=\"kwrd\">new</span> Hashtable();</pre>\n      <pre>        <span class=\"lnum\"> 77: </span> </pre>\n      <pre>        <span class=\"lnum\"> 78: </span>                    RebuildLanguage(db, language, languageTable);</pre>\n      <pre>        <span class=\"lnum\"> 79: </span>                }</pre>\n      <pre>        <span class=\"lnum\"> 80: </span>            }</pre>\n      <pre>        <span class=\"lnum\"> 81: </span>            SendMessage(<span class=\"str\">\"\\nLanguages loaded.\"</span>);</pre>\n      <pre>        <span class=\"lnum\"> 82: </span>            ReplaceSitecoreTable(rootTable);</pre>\n      <pre>        <span class=\"lnum\"> 83: </span>            SendMessage(<span class=\"str\">\"Writing data cache to file.\"</span>);</pre>\n      <pre>        <span class=\"lnum\"> 84: </span>            saveMethod();</pre>\n      <pre>        <span class=\"lnum\"> 85: </span>            SendMessage(<span class=\"str\">\"\\nDone.\"</span>);</pre>\n      <pre>        <span class=\"lnum\"> 86: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 87: </span> </pre>\n      <pre>        <span class=\"lnum\"> 88: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 89: </span>        <span class=\"rem\">/// Finds the method.</span></pre>\n      <pre>        <span class=\"lnum\"> 90: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 91: </span>        <span class=\"rem\">/// &lt;typeparam name=\"TDelegate\"&gt;The type of the delegate.&lt;/typeparam&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 92: </span>        <span class=\"rem\">/// &lt;param name=\"name\"&gt;The name.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 93: </span>        <span class=\"rem\">/// &lt;param name=\"bindingFlags\"&gt;The binding flags.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 94: </span>        <span class=\"rem\">/// &lt;param name=\"parameterTypes\"&gt;The parameter types.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 95: </span>        <span class=\"rem\">/// &lt;returns&gt;&lt;/returns&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 96: </span>        <span class=\"kwrd\">private</span> Delegate FindMethod&lt;TDelegate&gt;(<span class=\"kwrd\">string</span> name, BindingFlags bindingFlags, <span class=\"kwrd\">params</span> Type[] parameterTypes)            </pre>\n      <pre>        <span class=\"lnum\"> 97: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 98: </span>            MethodInfo method = translateType.GetMethod(name, bindingFlags, Type.DefaultBinder, parameterTypes, <span class=\"kwrd\">null</span>);</pre>\n      <pre>        <span class=\"lnum\"> 99: </span>            <span class=\"kwrd\">return</span> Delegate.CreateDelegate(<span class=\"kwrd\">typeof</span> (TDelegate), method);</pre>\n      <pre>        <span class=\"lnum\"> 100: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 101: </span> </pre>\n      <pre>        <span class=\"lnum\"> 102: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 103: </span>        <span class=\"rem\">/// Replaces the sitecore table.</span></pre>\n      <pre>        <span class=\"lnum\"> 104: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 105: </span>        <span class=\"rem\">/// &lt;param name=\"hashtable\"&gt;The hashtable.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 106: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> ReplaceSitecoreTable(Hashtable hashtable)</pre>\n      <pre>        <span class=\"lnum\"> 107: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 108: </span>            FieldInfo fi = translateType.GetField(<span class=\"str\">\"_languages\"</span>, privateStatic);</pre>\n      <pre>        <span class=\"lnum\"> 109: </span>            fi.SetValue(<span class=\"kwrd\">null</span>,hashtable);</pre>\n      <pre>        <span class=\"lnum\"> 110: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 111: </span> </pre>\n      <pre>        <span class=\"lnum\"> 112: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 113: </span>        <span class=\"rem\">/// Rebuilds the language.</span></pre>\n      <pre>        <span class=\"lnum\"> 114: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 115: </span>        <span class=\"rem\">/// &lt;param name=\"db\"&gt;The db.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 116: </span>        <span class=\"rem\">/// &lt;param name=\"language\"&gt;The language.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 117: </span>        <span class=\"rem\">/// &lt;param name=\"languageTable\"&gt;The language table.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 118: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> RebuildLanguage(Database db, Sitecore.Globalization.Language language, Hashtable languageTable)</pre>\n      <pre>        <span class=\"lnum\"> 119: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 120: </span>            <span class=\"kwrd\">using</span> (<span class=\"kwrd\">new</span> SecurityDisabler())</pre>\n      <pre>        <span class=\"lnum\"> 121: </span>            {</pre>\n      <pre>        <span class=\"lnum\"> 122: </span>                var dictionaryRoot = db.GetItem(<span class=\"str\">\"/sitecore/system/dictionary\"</span>, language);</pre>\n      <pre>        <span class=\"lnum\"> 123: </span>                <span class=\"kwrd\">if</span> (dictionaryRoot == <span class=\"kwrd\">null</span>)</pre>\n      <pre>        <span class=\"lnum\"> 124: </span>                {</pre>\n      <pre>        <span class=\"lnum\"> 125: </span>                    SendMessage(<span class=\"str\">\"\\tNo dictionary found in {0} for {1}\"</span>, db.Name, language.Name);</pre>\n      <pre>        <span class=\"lnum\"> 126: </span>                    <span class=\"kwrd\">return</span>;</pre>\n      <pre>        <span class=\"lnum\"> 127: </span>                }</pre>\n      <pre>        <span class=\"lnum\"> 128: </span> </pre>\n      <pre>        <span class=\"lnum\"> 129: </span>                SendMessage(<span class=\"str\">\"\\tProcessing {0}\"</span>, language.Name);</pre>\n      <pre>        <span class=\"lnum\"> 130: </span>                loadMethod(languageTable, dictionaryRoot);</pre>\n      <pre>        <span class=\"lnum\"> 131: </span>            }</pre>\n      <pre>        <span class=\"lnum\"> 132: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 133: </span> </pre>\n      <pre>        <span class=\"lnum\"> 134: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 135: </span>        <span class=\"rem\">/// Sends the message.</span></pre>\n      <pre>        <span class=\"lnum\"> 136: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 137: </span>        <span class=\"rem\">/// &lt;param name=\"msg\"&gt;The MSG.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 138: </span>        <span class=\"rem\">/// &lt;param name=\"inserts\"&gt;The inserts.&lt;/param&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 139: </span>        <span class=\"kwrd\">private</span> <span class=\"kwrd\">void</span> SendMessage(<span class=\"kwrd\">string</span> msg, <span class=\"kwrd\">params</span> <span class=\"kwrd\">object</span> [] inserts)</pre>\n      <pre>        <span class=\"lnum\"> 140: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 141: </span>            <span class=\"kwrd\">if</span> (Progress != <span class=\"kwrd\">null</span>)</pre>\n      <pre>        <span class=\"lnum\"> 142: </span>            {</pre>\n      <pre>        <span class=\"lnum\"> 143: </span>                var args = <span class=\"kwrd\">new</span> DictionaryRebuilderEventArgs {Message = String.Format(msg, inserts)};</pre>\n      <pre>        <span class=\"lnum\"> 144: </span>                Progress(<span class=\"kwrd\">this</span>, args);</pre>\n      <pre>        <span class=\"lnum\"> 145: </span>            }</pre>\n      <pre>        <span class=\"lnum\"> 146: </span>        }</pre>\n      <pre>        <span class=\"lnum\"> 147: </span> </pre>\n      <pre>        <span class=\"lnum\"> 148: </span>        <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 149: </span>        <span class=\"rem\">/// Event arguments</span></pre>\n      <pre>        <span class=\"lnum\"> 150: </span>        <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 151: </span>        <span class=\"kwrd\">public</span> <span class=\"kwrd\">class</span> DictionaryRebuilderEventArgs : EventArgs</pre>\n      <pre>        <span class=\"lnum\"> 152: </span>        {</pre>\n      <pre>        <span class=\"lnum\"> 153: </span>            <span class=\"rem\">/// &lt;summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 154: </span>            <span class=\"rem\">/// Gets or sets the message.</span></pre>\n      <pre>        <span class=\"lnum\"> 155: </span>            <span class=\"rem\">/// &lt;/summary&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 156: </span>            <span class=\"rem\">/// &lt;value&gt;The message.&lt;/value&gt;</span></pre>\n      <pre>        <span class=\"lnum\"> 157: </span>            <span class=\"kwrd\">public</span> <span class=\"kwrd\">string</span> Message { get; set; }</pre>\n      <pre>        <span class=\"lnum\"> 158: </span>        }        </pre>\n      <pre>        <span class=\"lnum\"> 159: </span>    }</pre>\n      <pre>        <span class=\"lnum\"> 160: </span>}</pre>\n    </div>\n    <p> And you could use it like this:</p>\n    <div class=\"csharpcode\">\n      <pre>        <span class=\"lnum\">1: </span>DictionaryRebuilder builder = <span class=\"kwrd\">new</span> DictionaryRebuilder();</pre>\n      <pre>        <span class=\"lnum\">2: </span>builder.Progress += (s, e) =&gt; Response.WriteLine(e.Message);</pre>\n      <pre>        <span class=\"lnum\">3: </span>builder.Rebuild();</pre>\n    </div>\n    <p>\n    </p>\n    <p>If you want to display progress while rebuilding, hookup the Progress method to some event handler. The one in my example won't compile for you, since Response.WriteLine is an extension method in one of our common libraries.</p>\n    <p>\n      <em>Disclaimer: The contents of this Blog post is my own opinions only. I am not affiliated with Sitecore in any way. Some of the technical details was extracted using <a href=\"http://www.red-gate.com/products/reflector/\" target=\"_blank\">Reflector</a>, and some are educated guesswork. I might be wrong, and Sitecore might very well change the implementation in a later version, so that the information above does no longer apply. This was done on Sitecore 6.0.1. rev 090212, but I suspect that the general idea is the same in previous Sitecore versions.</em> </p>","Author":"Dennis Riis","Published":"2009-06-14T19:15:00.0000000Z","IsPublished":true,"Comments":[{"Email":"mhovany@reveregroup.com","Approved":true,"Body":"And it's still broken in Sitecore 6.5.  I found the \"core\" issue a while back but was always confused with the \"sometimes this works\" part due to the item saved event.  Thanks for illuminating the problem.","Author":"Matt Hovany","Created":"2012-06-15T23:36:39.8268356"},{"Email":"pmategaonkar@gmail.com","Approved":true,"Body":"Same problem persists in Sitecore 6.5.1 as well. And solution given above works fine for me.\r\nThanks for the writeup.","Author":"Prasanna","Created":"2013-04-02T12:41:18.9373327"},{"Email":"yourmail@gmail.com","Approved":true,"Body":"スーパーコピーブランド専門店 \r\nhttps://www.007kopi.com/product/292.html\r\n \r\nルイヴィトン、シャネル、エルメス、ルチェ＆ガッバ―ナ、 \r\nバレンシアガ、ボッテガ ヴェネタ、ミュウミュウ、クリスチャンディオール \r\nその他の偽物バッグコピー、偽物財布コピー、偽物時計コピー、偽物ベルトコピー、偽物指輪コピー、偽物キーケース、商品は全く写真の通りです。 \r\n高級腕時計（N級品），スーパーコピー時計（N級品），財布（N級品）バッグ（N級品），靴（N品），指輪（N級品），ベルト（N級品），マフラー （N級品） \r\n人気の売れ筋商品を多数取り揃えております。 \r\n全て激安特価でご提供.お願いします. \r\n★100%品質保証！満足保障！リピーター率100％! \r\n★商品数も大幅に増え、品質も大自信です。 \r\n★スタイルが多い、品質がよい、価格が低い！ \r\n★顧客は至上 誠実 信用。 \r\n★歓迎光臨 \r\n★送料無料(日本全国) \r\nホームページ上でのご注文は24時間受け付けております \r\nhttps://www.007kopi.com/product/1398.html\r\n","Author":"ScottRow","Created":"2019-09-27T04:41:39.6156969"}],"Tags":["ASP .NET",".NET"],"Created":"2009-06-14T19:15:00.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":"false","Raven-Replication-History":[{"Raven-Replication-Version":41,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"},{"Raven-Replication-Version":81,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"}],"Raven-Replication-Version":1804,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15","@id":"posts/9","Temp-Index-Score":1.0,"Last-Modified":"2019-09-27T04:42:25.3453938Z","@etag":"00000001-0000-c800-0000-00000000000c","Non-Authoritative-Information":false}},{"Title":"How to create an ASP .NET Captcha Control (part 2)","UrlName":"How-to-create-an-ASP-.NET-Captcha-Control-(part-2)","BodyHtml":"\n\t\t<p>\n\t\t\t\t<a href=\"/2008/4/HowToCreateCaptcha.aspx\">\n\t\t\t\t</a>This is the second in a&nbsp;3 part series on how to create an ASP .NET Captcha control. The <a href=\"/2008/4/HowToCreateCaptcha.aspx\">previous post can be found here</a>. This time we will look at how the CAPTCHA image can be generated using the built-in .NET framework classes.</p>\n<p><strong>Image generation approach<br /></strong>As described in the first post, the idea is to create an image showing a word, and let the user repeat it by typing it into a textbox. The image should be hard to read for OCR software, so that the CAPTCHA is hard to beat for automated bots. The way we will be doing this, is by stretching and warping the text, and adding noise. Luckily, this is easy to accomplish by using the GraphicsPath class to draw the string, and then use the Warp method on the GraphicsPath object.</p>\n<p><strong>Generating the image: Step by step<br /></strong>The first step in generating the image is to create a Bitmap object with the appropiate dimensions. We will also need a Font for the text, and a Brush for painting the text. I also declare a rectangle that is slightly smaller than the actual image, which will be used as the drawing bounds later. This will help to ensure, that the text fits on the image after the transformations:</p>\n<p><!-- code formatted by http://manoli.net/csharpformat/ --></p>\n<div class=\"csharpcode\"><pre class=\"alt\">        <span class=\"rem\">/// <summary></summary><pre>        <span class=\"rem\">/// Generates the CAPTCHA image.</span></pre><pre class=\"alt\">        <span class=\"rem\">/// </span></pre></span></pre><pre>        <span class=\"rem\">/// <returns></returns></span></pre><pre class=\"alt\">        <span class=\"kwrd\">public</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">byte</span>[] GenerateImage()</pre><pre>        {</pre><pre class=\"alt\">            <span class=\"rem\">// Create image.</span></pre><pre>            var image = <span class=\"kwrd\">new</span> Bitmap(size.Width, size.Height, PixelFormat.Format24bppRgb);</pre><pre class=\"alt\">            var imgRectangle = <span class=\"kwrd\">new</span> Rectangle(10, 10, image.Width - 10, image.Height - 10);</pre><pre>            <span class=\"rem\">// Get font and brush.</span></pre><pre class=\"alt\">            var brush = <span class=\"kwrd\">new</span> HatchBrush(HatchStyle.SolidDiamond, Color.Black, Color.FromArgb(rand.Next(160),rand.Next(160),rand.Next(160)));</pre><pre>            var font = <span class=\"kwrd\">new</span> Font(fonts[rand.Next(fonts.Length - 1)], imgRectangle.Height, FontStyle.Italic, GraphicsUnit.Pixel);</pre></div><pre><span style=\"FONT-FAMILY: Arial\"></span> </pre><pre><span style=\"FONT-FAMILY: Arial\">Notice that we use a HatchBrush so that the word will be drawn using a hatch pattern. Ensuring that the text is not solid color, will help defeat OCR attacks. The actual font used is also chosen at random from a predefined list.</span>\n\t\t\t\t</pre><pre><span style=\"FONT-FAMILY: Arial\">The next step is to get a <a title=\"Graphics class on MSDN\" href=\"http://msdn2.microsoft.com/en-us/library/system.drawing.graphics.aspx\">Graphics</a> object from the image, and use it to draw on the image. We'll wrap the code using the <a title=\"Graphics class on MSDN\" href=\"http://msdn2.microsoft.com/en-us/library/system.drawing.graphics.aspx\">Graphics</a> object in a <a title=\"using keyword on MSDN\" href=\"http://msdn.microsoft.com/en-us/library/yh598w02(VS.80).aspx\">using region</a> to ensure that the instance is disposed as soon as we don't need it more. We then fill the background with white color and create a <a title=\"GraphicsPath class on MSDN\" href=\"http://msdn2.microsoft.com/en-us/library/system.drawing.drawing2d.graphicspath.aspx\">GraphicsPath</a> instance, to which the selected Captcha word is added using the <a title=\"GraphicsPath AddString MSDN documentation\" href=\"http://msdn.microsoft.com/en-us/library/system.drawing.drawing2d.graphicspath.addstring.aspx\">AddString</a> method. The path object can now be warped, by stretching the corners a random amount. We also rotate the text a bit (between --10 and 10 degrees):</span></pre><pre><span style=\"FONT-FAMILY: Arial\"></span>\n </pre><!-- code formatted by http://manoli.net/csharpformat/ -->\n<div class=\"csharpcode\"><pre class=\"alt\">            <span class=\"rem\">// draw on the image.</span></pre><pre>            <span class=\"kwrd\">using</span>(Graphics g = Graphics.FromImage(image))</pre><pre class=\"alt\">            {</pre><pre>                g.FillRectangle(Brushes.WhiteSmoke, 0, 0, image.Width, image.Height);</pre><pre class=\"alt\">                var path = <span class=\"kwrd\">new</span> GraphicsPath();</pre><pre>                <span class=\"rem\">// Make sure text fits</span></pre><pre class=\"alt\">                <span class=\"kwrd\">while</span> (g.MeasureString(CaptchaWord, font).Width &gt; imgRectangle.Width)</pre><pre>                    font = <span class=\"kwrd\">new</span> Font(font.FontFamily, font.Size - 1, font.Style);</pre><pre class=\"alt\">                </pre><pre>                path.AddString(CaptchaWord, font.FontFamily, (<span class=\"kwrd\">int</span>)font.Style, font.Size, imgRectangle, StringFormat.GenericDefault);</pre><pre class=\"alt\">                <span class=\"kwrd\">float</span> v = 4;</pre><pre>                var warpPoints = <span class=\"kwrd\">new</span> PointF[]</pre><pre class=\"alt\">                                           {</pre><pre>                                                <span class=\"kwrd\">new</span> PointF(rand.Next(imgRectangle.Width) / v,  rand.Next(imgRectangle.Height) / v),</pre><pre class=\"alt\">                                                <span class=\"kwrd\">new</span> PointF(imgRectangle.Width - rand.Next(imgRectangle.Width) / v,  rand.Next(imgRectangle.Height) / v),</pre><pre>                                                <span class=\"kwrd\">new</span> PointF(rand.Next(imgRectangle.Width)/v, imgRectangle.Height - rand.Next(imgRectangle.Height) / v), </pre><pre class=\"alt\">                                                <span class=\"kwrd\">new</span> PointF(imgRectangle.Width - rand.Next(imgRectangle.Width) / v, imgRectangle.Height - rand.Next(imgRectangle.Height)/ v) </pre><pre>                                            };</pre><pre class=\"alt\">                var warpMatrix = <span class=\"kwrd\">new</span> Matrix();</pre><pre>                warpMatrix.Rotate(rand.Next(20) - 10);</pre><pre class=\"alt\">                path.Warp(warpPoints, imgRectangle, warpMatrix, WarpMode.Perspective);                </pre><pre>                g.FillPath(brush, path);</pre></div><pre> </pre><pre>The next step is to add a bit of noise to the image. This is done by drawing some small elipses (dots) randomly in the image, with a random color. This is implemented with a LINQ query selecting the details for each random dot:</pre><pre> </pre><!-- code formatted by http://manoli.net/csharpformat/ -->\n<div class=\"csharpcode\"><pre class=\"alt\">                <span class=\"rem\">// Add some noise.</span></pre><pre>                var noise = from e <span class=\"kwrd\">in</span> Enumerable.Range(0, NoiseAmount)</pre><pre class=\"alt\">                         select <span class=\"kwrd\">new</span></pre><pre>                                    {</pre><pre class=\"alt\">                                        X = rand.Next(image.Width),</pre><pre>                                        Y = rand.Next(image.Height),</pre><pre class=\"alt\">                                        R = 1f + (<span class=\"kwrd\">float</span>)rand.NextDouble() * 3f,</pre><pre>                                        Brush = <span class=\"kwrd\">new</span> SolidBrush(Color.FromArgb(rand.Next(255), rand.Next(255), rand.Next(255)))</pre><pre class=\"alt\">                                    };</pre><pre> </pre><pre class=\"alt\">                <span class=\"kwrd\">foreach</span> (var p <span class=\"kwrd\">in</span> noise)</pre><pre>                    g.FillEllipse(p.Brush, p.X, p.Y, p.R, p.R);</pre><pre class=\"alt\">            }</pre><pre class=\"alt\"> </pre><pre class=\"alt\">Finally, the resulting image is saved to PNG format in-memory and returned from the method. </pre><pre class=\"alt\"> </pre><pre class=\"alt\">   <span class=\"rem\">// Save to buffer and return raw png image bytes.</span><pre>            <span class=\"kwrd\">using</span>(var buffer = <span class=\"kwrd\">new</span> MemoryStream())</pre><pre class=\"alt\">            {</pre><pre>                image.Save(buffer, ImageFormat.Png);</pre><pre class=\"alt\">                <span class=\"kwrd\">return</span> buffer.GetBuffer();</pre><pre>            }</pre></pre></div><pre class=\"alt\"> </pre><pre class=\"alt\">We will use a <a href=\"http://msdn.microsoft.com/en-us/library/ms228090.aspx\">custom http handler</a> by implementing <a title=\"IHttpHandler on MSDN\" href=\"http://msdn.microsoft.com/en-us/library/system.web.ihttphandler.aspx\">IHttpHandler </a>to send the image to the client. This will be the subject for the next post in the series. </pre>","Body":"\n\t\t<p>\n\t\t\t\t<a href=\"/2008/4/HowToCreateCaptcha.aspx\">\n\t\t\t\t</a>This is the second in a&nbsp;3 part series on how to create an ASP .NET Captcha control. The <a href=\"/2008/4/HowToCreateCaptcha.aspx\">previous post can be found here</a>. This time we will look at how the CAPTCHA image can be generated using the built-in .NET framework classes.</p>\n<p><strong>Image generation approach<br /></strong>As described in the first post, the idea is to create an image showing a word, and let the user repeat it by typing it into a textbox. The image should be hard to read for OCR software, so that the CAPTCHA is hard to beat for automated bots. The way we will be doing this, is by stretching and warping the text, and adding noise. Luckily, this is easy to accomplish by using the GraphicsPath class to draw the string, and then use the Warp method on the GraphicsPath object.</p>\n<p><strong>Generating the image: Step by step<br /></strong>The first step in generating the image is to create a Bitmap object with the appropiate dimensions. We will also need a Font for the text, and a Brush for painting the text. I also declare a rectangle that is slightly smaller than the actual image, which will be used as the drawing bounds later. This will help to ensure, that the text fits on the image after the transformations:</p>\n<p><!-- code formatted by http://manoli.net/csharpformat/ --></p>\n<div class=\"csharpcode\"><pre class=\"alt\">        <span class=\"rem\">/// <summary></summary><pre>        <span class=\"rem\">/// Generates the CAPTCHA image.</span></pre><pre class=\"alt\">        <span class=\"rem\">/// </span></pre></span></pre><pre>        <span class=\"rem\">/// <returns></returns></span></pre><pre class=\"alt\">        <span class=\"kwrd\">public</span> <span class=\"kwrd\">static</span> <span class=\"kwrd\">byte</span>[] GenerateImage()</pre><pre>        {</pre><pre class=\"alt\">            <span class=\"rem\">// Create image.</span></pre><pre>            var image = <span class=\"kwrd\">new</span> Bitmap(size.Width, size.Height, PixelFormat.Format24bppRgb);</pre><pre class=\"alt\">            var imgRectangle = <span class=\"kwrd\">new</span> Rectangle(10, 10, image.Width - 10, image.Height - 10);</pre><pre>            <span class=\"rem\">// Get font and brush.</span></pre><pre class=\"alt\">            var brush = <span class=\"kwrd\">new</span> HatchBrush(HatchStyle.SolidDiamond, Color.Black, Color.FromArgb(rand.Next(160),rand.Next(160),rand.Next(160)));</pre><pre>            var font = <span class=\"kwrd\">new</span> Font(fonts[rand.Next(fonts.Length - 1)], imgRectangle.Height, FontStyle.Italic, GraphicsUnit.Pixel);</pre></div><pre><span style=\"FONT-FAMILY: Arial\"></span> </pre><pre><span style=\"FONT-FAMILY: Arial\">Notice that we use a HatchBrush so that the word will be drawn using a hatch pattern. Ensuring that the text is not solid color, will help defeat OCR attacks. The actual font used is also chosen at random from a predefined list.</span>\n\t\t\t\t</pre><pre><span style=\"FONT-FAMILY: Arial\">The next step is to get a <a title=\"Graphics class on MSDN\" href=\"http://msdn2.microsoft.com/en-us/library/system.drawing.graphics.aspx\">Graphics</a> object from the image, and use it to draw on the image. We'll wrap the code using the <a title=\"Graphics class on MSDN\" href=\"http://msdn2.microsoft.com/en-us/library/system.drawing.graphics.aspx\">Graphics</a> object in a <a title=\"using keyword on MSDN\" href=\"http://msdn.microsoft.com/en-us/library/yh598w02(VS.80).aspx\">using region</a> to ensure that the instance is disposed as soon as we don't need it more. We then fill the background with white color and create a <a title=\"GraphicsPath class on MSDN\" href=\"http://msdn2.microsoft.com/en-us/library/system.drawing.drawing2d.graphicspath.aspx\">GraphicsPath</a> instance, to which the selected Captcha word is added using the <a title=\"GraphicsPath AddString MSDN documentation\" href=\"http://msdn.microsoft.com/en-us/library/system.drawing.drawing2d.graphicspath.addstring.aspx\">AddString</a> method. The path object can now be warped, by stretching the corners a random amount. We also rotate the text a bit (between --10 and 10 degrees):</span></pre><pre><span style=\"FONT-FAMILY: Arial\"></span>\n </pre><!-- code formatted by http://manoli.net/csharpformat/ -->\n<div class=\"csharpcode\"><pre class=\"alt\">            <span class=\"rem\">// draw on the image.</span></pre><pre>            <span class=\"kwrd\">using</span>(Graphics g = Graphics.FromImage(image))</pre><pre class=\"alt\">            {</pre><pre>                g.FillRectangle(Brushes.WhiteSmoke, 0, 0, image.Width, image.Height);</pre><pre class=\"alt\">                var path = <span class=\"kwrd\">new</span> GraphicsPath();</pre><pre>                <span class=\"rem\">// Make sure text fits</span></pre><pre class=\"alt\">                <span class=\"kwrd\">while</span> (g.MeasureString(CaptchaWord, font).Width &gt; imgRectangle.Width)</pre><pre>                    font = <span class=\"kwrd\">new</span> Font(font.FontFamily, font.Size - 1, font.Style);</pre><pre class=\"alt\">                </pre><pre>                path.AddString(CaptchaWord, font.FontFamily, (<span class=\"kwrd\">int</span>)font.Style, font.Size, imgRectangle, StringFormat.GenericDefault);</pre><pre class=\"alt\">                <span class=\"kwrd\">float</span> v = 4;</pre><pre>                var warpPoints = <span class=\"kwrd\">new</span> PointF[]</pre><pre class=\"alt\">                                           {</pre><pre>                                                <span class=\"kwrd\">new</span> PointF(rand.Next(imgRectangle.Width) / v,  rand.Next(imgRectangle.Height) / v),</pre><pre class=\"alt\">                                                <span class=\"kwrd\">new</span> PointF(imgRectangle.Width - rand.Next(imgRectangle.Width) / v,  rand.Next(imgRectangle.Height) / v),</pre><pre>                                                <span class=\"kwrd\">new</span> PointF(rand.Next(imgRectangle.Width)/v, imgRectangle.Height - rand.Next(imgRectangle.Height) / v), </pre><pre class=\"alt\">                                                <span class=\"kwrd\">new</span> PointF(imgRectangle.Width - rand.Next(imgRectangle.Width) / v, imgRectangle.Height - rand.Next(imgRectangle.Height)/ v) </pre><pre>                                            };</pre><pre class=\"alt\">                var warpMatrix = <span class=\"kwrd\">new</span> Matrix();</pre><pre>                warpMatrix.Rotate(rand.Next(20) - 10);</pre><pre class=\"alt\">                path.Warp(warpPoints, imgRectangle, warpMatrix, WarpMode.Perspective);                </pre><pre>                g.FillPath(brush, path);</pre></div><pre> </pre><pre>The next step is to add a bit of noise to the image. This is done by drawing some small elipses (dots) randomly in the image, with a random color. This is implemented with a LINQ query selecting the details for each random dot:</pre><pre> </pre><!-- code formatted by http://manoli.net/csharpformat/ -->\n<div class=\"csharpcode\"><pre class=\"alt\">                <span class=\"rem\">// Add some noise.</span></pre><pre>                var noise = from e <span class=\"kwrd\">in</span> Enumerable.Range(0, NoiseAmount)</pre><pre class=\"alt\">                         select <span class=\"kwrd\">new</span></pre><pre>                                    {</pre><pre class=\"alt\">                                        X = rand.Next(image.Width),</pre><pre>                                        Y = rand.Next(image.Height),</pre><pre class=\"alt\">                                        R = 1f + (<span class=\"kwrd\">float</span>)rand.NextDouble() * 3f,</pre><pre>                                        Brush = <span class=\"kwrd\">new</span> SolidBrush(Color.FromArgb(rand.Next(255), rand.Next(255), rand.Next(255)))</pre><pre class=\"alt\">                                    };</pre><pre> </pre><pre class=\"alt\">                <span class=\"kwrd\">foreach</span> (var p <span class=\"kwrd\">in</span> noise)</pre><pre>                    g.FillEllipse(p.Brush, p.X, p.Y, p.R, p.R);</pre><pre class=\"alt\">            }</pre><pre class=\"alt\"> </pre><pre class=\"alt\">Finally, the resulting image is saved to PNG format in-memory and returned from the method. </pre><pre class=\"alt\"> </pre><pre class=\"alt\">   <span class=\"rem\">// Save to buffer and return raw png image bytes.</span><pre>            <span class=\"kwrd\">using</span>(var buffer = <span class=\"kwrd\">new</span> MemoryStream())</pre><pre class=\"alt\">            {</pre><pre>                image.Save(buffer, ImageFormat.Png);</pre><pre class=\"alt\">                <span class=\"kwrd\">return</span> buffer.GetBuffer();</pre><pre>            }</pre></pre></div><pre class=\"alt\"> </pre><pre class=\"alt\">We will use a <a href=\"http://msdn.microsoft.com/en-us/library/ms228090.aspx\">custom http handler</a> by implementing <a title=\"IHttpHandler on MSDN\" href=\"http://msdn.microsoft.com/en-us/library/system.web.ihttphandler.aspx\">IHttpHandler </a>to send the image to the client. This will be the subject for the next post in the series. </pre>","Author":"Dennis Riis","Published":"2008-05-04T19:28:45.0000000Z","IsPublished":true,"Comments":[{"Email":"tammassey@probbox.com ","Approved":true,"Body":"[url=http://buspar10.com/]buspar[/url] ","Author":"AmyWab","Created":"2019-02-23T00:45:08.6572271"},{"Email":"longshortfund@probbox.com ","Approved":true,"Body":"[url=https://buspar10.com/]buspar[/url] ","Author":"MaryWab","Created":"2019-02-24T04:39:57.6324251"},{"Email":"lesMexuar@cmail.host","Approved":true,"Body":"Propecia Online Pharmacy Xenical Zithromax Azithromycin Dosage Le Viagra Est Il En Vente Libre En Pharmacie  [url=http://cheapvia25mg.com]viagra online[/url] Cialis Prix France Sale Secure Ordering Macrobid 100mg Las Vegas  ","Author":"Lesheelia","Created":"2019-05-09T08:26:57.5943199"},{"Email":"alenfastkovsky@maidservicenyc.pro","Approved":true,"Body":"The cleansing firm carries out cleaning of spaces of various dimensions and configurations. \r\n \r\nThe company's professionals supply cleaning with the help of contemporary technologies, have unique devices, and also have actually certified cleaning agents in their toolbox. Along with the above benefits, red wines supply: beneficial rates; cleansing quickly; high quality results; more than 100 positive reviews. Cleansing workplaces will certainly help keep your work environment in order for the most productive work. Any type of business is extremely crucial environment in the team. Cleaning up solutions that can be purchased cheaply currently can aid to organize it and also provide a comfortable room for labor. \r\n \r\nIf necessary, we leave cleaning up the kitchen 2-3 hrs after placing the order. You obtain cleansing immediately. \r\n \r\nWe supply expert [url=https://maidservicenyc.pro/]room maid service[/url] for personal clients. Utilizing European equipment and licensed devices, we achieve optimal outcomes as well as provide cleansing in a short time. \r\n \r\nWe offer discount rates for those who utilize the solution for the very first time, along with positive regards to cooperation for normal clients. \r\n \r\nOur friendly group uses you to obtain accustomed with positive regards to cooperation for business clients. We responsibly approach our tasks, tidy making use of specialist cleansing products and also specific tools. Our workers are trained, have medical books and also are familiar with the nuances of removing facility as well as hard-to-remove dust from surfaces. \r\n \r\nWe offer high-grade cleaning for huge ventures and small companies of different instructions, with a price cut of as much as 25%.","Author":"PLESTYPEKS","Created":"2019-09-03T14:33:03.2076418"},{"Email":"4wmhgu@maidsmanhattan.club","Approved":true,"Body":"Specialist cleansing today is greater than only cleaning: present day devices, devices as well as approaches of work transform it right into a genuine state-of-the-art process that drastically modifies the conventional understanding of what it suggests to definitely \"tidy\". \r\n \r\nIn property cleaning services - best  \r\n[url=https://maidsmanhattan.club/service-maid/]service maids[/url] \r\n - it is actually very easy, hassle-free as well as budget friendly along with our business. \r\nDepend on the cleanliness leaders to house cleansing Brooklyn! Our company use expert soaps as well as technical devices of worldwide suppliers in our job and also do a great project with cleansing of any kind of complexity. \r\n \r\n[url=https://maidsmanhattan.club/][size=8]Local home cleaners new-york[/size][/url] \r\n \r\nParticipation with the company is actually the backer of a remarkable, lucrative and also effective cleaning of specialist house cleaning and also surrounding regions. Presently, residence cleaning services from our business are used in New Jacket. Cherish and also you the genuine benefits and functional benefits of our organisation proposition. \r\n \r\nThrough authorizing an irreversible service deal with our team, you will definitely have the ability to leave the need to keep a big workers of technical personnel, which, in turn, are going to improve costs. The expense of the facility, daily, standard home cleaning of Staten Island, done through our employees, will consistently be actually less than the cost of salaries for cleaning services, the purchase of cleansing products and also tools. \r\n \r\n[size=6]Detailed house cleaning manhattan[/size] \r\n \r\nLeave behind an ask for on the internet site, define your title or firm name, contact contact number and day of desired cleansing, leave your dreams and also criteria in an information to the supervisor if essential, at that point our expert will definitely call you in the least opportunity as well as specify the time, time as well as work place!","Author":"Normanhal","Created":"2019-09-24T09:25:00.9183237"},{"Email":"kelTwisem@delays.space","Approved":true,"Body":"Pregnancy Category And Cephalexin Viagra Bestellen Deutschland  [url=http://rxbill7.com]cialis for sale[/url] Priligy Cost  ","Author":"Kelcomi","Created":"2019-10-01T17:59:39.7765490"},{"Email":"lisa-fletcher@kitchen-renovation.club","Approved":true,"Body":"We  create  original  interiors , paying   close attention  to conditions   reliability and functionality  .   Work is underway  with customer  on  all, without exception  stages  produce   multilateral  analysis  location rooms ,produce preliminary calculations. your  any questions . \r\nKitchen remodel colonial home considered one of especially labor-intensive cases \r\nIn the firm Limited liability Partnership NDYKF Queens Village involved trained specialists, exactly they all know about Kitchen remodel for less than $5000. \r\nThe  Enterprise   ready to provide   first class Professional kitchen remodel by affordable  tariffs .  Specialists  with great experience  work help  fully   change  in a matter of days . The price depends on  selected style of kitchen. \r\n \r\nAny room apartments, houses, cottages or other housing  Bruckner unique and carries personal functional load. This mostly is related to modern kitchens. \r\n \r\nEasy kitchen renovations Carroll Gardens : [url=https://kitchen-renovation.club]kitchen renovation manhattan[/url]","Author":"KRsheni","Created":"2019-10-12T21:31:32.9383403"},{"Email":"y5qtn0fj@maidsmanhattan.club","Approved":true,"Body":"Expert cleaning today is much more than just cleansing: contemporary devices, tools and also strategies of work switch it into a true state-of-the-art process that substantially alters the conventional understanding of what it suggests to truly \"well-maintained\". \r\n \r\nIn house cleaning company - best  \r\n[url=https://maidsmanhattan.club/maids-downtown/]Maids Downtown[/url] \r\n - it's very easy, hassle-free and also affordable along with our business. \r\nTrust the sanitation leaders to home cleaning Brooklyn! Our company use specialist soaps and technological tools of worldwide makers in our work and also perform an excellent task along with cleaning of any kind of intricacy. \r\n \r\n[url=https://maidsmanhattan.club/][size=8]Home cleaning maid manhattan[/size][/url] \r\n \r\nParticipation along with the firm is the surety of an impressive, profitable as well as reliable cleansing of specialist house cleansing and bordering regions. Presently, residence cleaning services from our company are actually used in New Jersey. Appreciate as well as you the real benefits and useful advantages of our service proposition. \r\n \r\nThrough signing an irreversible company agreement with our team, you will definitely manage to abandon the demand to preserve a large personnel of specialized team, which, in turn, are going to optimize prices. The price of the complicated, daily, overall property cleaning of Staten Isle, carried out by our staff members, are going to always be less than the expense of incomes for cleaners, the acquisition of cleaning items and also tools. \r\n \r\n[size=6]Good housing keeping nyc[/size] \r\n \r\nLeave behind a request on the website, define your label or firm label, call telephone number as well as time of desired cleansing, leave your wishes as well as demands in a notification to the supervisor if important, then our expert will definitely call you in the quickest opportunity and define the date, time as well as workplace!","Author":"Normanhal","Created":"2019-10-22T21:57:11.9458925"},{"Email":"olganadejda-astro@yandex.com","Approved":true,"Body":"Может быть, на родительском собрание учитель заявил вам лично, что у ребенка как правило бывают затруднения с определенными речевыми и языковыми навыками. Или, возможно, во время разговора с ребёнком приметили нечаянное шепелявость? Вы осознали что это ненормально? И если так, что нужно делать? Все ребята развиваются по разному, и для одних трансформация начиная от элементарных слов к хорошо выраженному и грамматически верному предложению потребуется много времени,а другие почти сразу( к 1 году) начинают без умолка болтать. Только к 5 годам дитя должен(на) уметь не только лишь излагать тривиальные предложения, заключающиеся из 2-3 слов, одновременно связно делать длинные фразы. Обследование специалистом логопедом поможет узнать, присутствует ли у малыша проблемы в речи. Kогопедическое занятие  - это в целом помощь для большей части детей с нарушениями речи и / или разговорного языка,или ЗПР. \r\nНашим детям будет нужна помощь специалиста логопеда по разным обстоятельствам, нужно послать малыша к специалисту, если: \" Вам лично либо близким людям достаточно сложно понять ребенка. \" Все думают, что ваш ребёнок младше, чем они, так как он плохо разговаривает. \" Школьника дразнят из-за того момента, как он говорит. \" Ваш ребенок употребляет меньше слов, нежели другие ребята его года. \r\nСАНАТОРИЙ ЛЕЧЕНИЯ ЗАДЕРЖКИ ПСИХИЧЕСКОГО РАЗВИТИЯ призван(а) помогать малышу справиться с задержкой речи. Позвоните нам, приходите на пробное занятие, и мы поможем вашему малышу. \r\n \r\n[url=https://nadejda-centr.ru/]логопед образование[/url]","Author":"Scottgor","Created":"2019-11-09T00:26:19.7098081"},{"Email":"irmenrusanov3498@yandex.com","Approved":true,"Body":"Our  business  presumes all risks and  produces maximum  accountability for the  end results  as well as  top quality of  job to the  client  Inner parts renovators NY. \r\n \r\nThe  look of both residential  as well as  office  properties  is actually of  wonderful  usefulness. For the  structure to maintain its  desirable  appeal and  working  features, it is  required to  frequently  carry out  Premium  restoration  New York City. The  business  supplies a  higher  specialist  degree  helpful in  recovering the  appeal of  properties. NYC  clients  may use our  companies if they  need to have to  bounce back: \r\n \r\n[u][i]Residential buildings of  various floors and year of  building and construction; \r\nOffice centers;[/i] \r\nShopping  as well as  home entertainment complexes; \r\n Service  facilities; \r\nMedical  amenities and  various other social  structures.  location; \r\n[url=https://grandeurhillsgroup.com/]General Contractor [/url]; \r\nIndustrial  properties.[/u] \r\n \r\nThe  complicated  as well as the  operation for  performing work are  figured out  merely after the  examination of the  item. Our  expert leaves for the  location. It collects the  max information  regarding the  structure: the characteristics of the  components  where the  wall structures, load-bearing  establishments, the  groundwork, the  lot of  tales of the building, the condition of the facade are erected.  Based upon the results of the  details  accumulated, the  superior technology is  chosen,  depending on to which  Premium  remodelling NY will  consequently  be actually carried out. \r\n \r\n[b] Our team  have actually  been actually  functioning in the market of  building and  repair for over 16 years,  consequently we  offer  specialist  solutions for the restoration  and also  renovation of the  fronts of  structures for  any sort of  objective.[/b] \r\n Staff members of the  firm have the  ideal  approvals  as well as  enables to carry out  repair work at  any sort of height.  Our experts are ready to  perform  repair services of buildings  as well as  establishments that  reside in  any type of  shape at an  appropriate time  and also  budget-friendly prices. \r\n \r\nIt  ensures  skilled  as well as professional  gratification of its  job, carries out the  development of each object following the  wants of the  consumer,  complying with the principle of an  private  technique.","Author":"Marcusswile","Created":"2019-12-28T07:21:46.5019453"}],"Tags":["ASP .NET",".NET"],"Created":"2008-05-04T19:28:45.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":"false","Raven-Replication-History":[{"Raven-Replication-Version":24,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"},{"Raven-Replication-Version":64,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"},{"Raven-Replication-Version":1538,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1539,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1797,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1801,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1803,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1805,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1806,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1807,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1808,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"}],"Raven-Replication-Version":2050,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15","@id":"posts/23","Temp-Index-Score":1.0,"Last-Modified":"2019-12-28T07:21:47.4786365Z","@etag":"00000001-0000-c900-0000-000000000002","Non-Authoritative-Information":false}},{"Title":"Fighting comment spam","UrlName":"Fighting-comment-spam","BodyHtml":"\n\t\t<p>I've been hit by comment spam. Suddenly, one of the posts on this site had _a lot_ of comments, all with advertisements for some suspect sites. Needless to say, I've removed those comments.</p>\n<p>So, what to do about that ? I decided to implement a <a title=\"CAPTCHA on Wikipedia\" href=\"http://en.wikipedia.org/wiki/Captcha\">CAPTCHA</a> on the site. It is a pretty standard one, requiring you to repeat a word, that is shown as an image and garbled, so that image recognition software has a hard time interpreting it. I could have found a complete control for it in a few minutes just by searching Google; but I implemented it myself as an ASP .NET control, just for fun. Also, I believe that the security in a unique CAPTCHA algorithm is much better. If spammers develop software to defeat CAPTCHA's, naturally they are only going to target big sites to maximize their profits, and not bother trying to break a CAPTCHA, that is only used on my little site. </p>\n<p>A nice example on this is the fact that <a title=\"Jeff Atwood's blog\" href=\"http://www.codinghorror.com/blog/\">Jeff Atwood's blog</a>&nbsp;is using one of the simplest CAPTCHAs conceivable, a static image containing the same word each time, that the user must repeat in a textbox. Apparently, that is enough to stop most of the spam on his blog. Another example of a really simple CAPTCHA is to simply include a hidden field on the page. If the field gets filled out on postback, it is most likely a spam-bot posting it, since the average user would never notice, let alone filling out, the hidden field. I like that idea particularly, because it does not require the user to think or do anything. (So why did I go for the image approach in implementing my own CAPTCHA ? Probably because I wanted to try out implementing one&nbsp;;-)) </p>\n<p>I am probably going to blog about the techniques going into developing a CAPTCHA in ASP .NET in the near future. In the meanwhile, dear reader, please try out the comments feature, and let me know if you find the CAPTCHA image easy enough, or too easy, to read.</p>","Body":"\n\t\t<p>I've been hit by comment spam. Suddenly, one of the posts on this site had _a lot_ of comments, all with advertisements for some suspect sites. Needless to say, I've removed those comments.</p>\n<p>So, what to do about that ? I decided to implement a <a title=\"CAPTCHA on Wikipedia\" href=\"http://en.wikipedia.org/wiki/Captcha\">CAPTCHA</a> on the site. It is a pretty standard one, requiring you to repeat a word, that is shown as an image and garbled, so that image recognition software has a hard time interpreting it. I could have found a complete control for it in a few minutes just by searching Google; but I implemented it myself as an ASP .NET control, just for fun. Also, I believe that the security in a unique CAPTCHA algorithm is much better. If spammers develop software to defeat CAPTCHA's, naturally they are only going to target big sites to maximize their profits, and not bother trying to break a CAPTCHA, that is only used on my little site. </p>\n<p>A nice example on this is the fact that <a title=\"Jeff Atwood's blog\" href=\"http://www.codinghorror.com/blog/\">Jeff Atwood's blog</a>&nbsp;is using one of the simplest CAPTCHAs conceivable, a static image containing the same word each time, that the user must repeat in a textbox. Apparently, that is enough to stop most of the spam on his blog. Another example of a really simple CAPTCHA is to simply include a hidden field on the page. If the field gets filled out on postback, it is most likely a spam-bot posting it, since the average user would never notice, let alone filling out, the hidden field. I like that idea particularly, because it does not require the user to think or do anything. (So why did I go for the image approach in implementing my own CAPTCHA ? Probably because I wanted to try out implementing one&nbsp;;-)) </p>\n<p>I am probably going to blog about the techniques going into developing a CAPTCHA in ASP .NET in the near future. In the meanwhile, dear reader, please try out the comments feature, and let me know if you find the CAPTCHA image easy enough, or too easy, to read.</p>","Author":"Dennis Riis","Published":"2008-03-30T20:12:34.0000000Z","IsPublished":true,"Comments":[{"Email":"","Approved":true,"Body":"Gotta' try your captcha :)","Author":"Lasse Eskildsen","Created":"2008-04-01T21:01:54.0000000Z"},{"Email":"epica134@interia.pl","Approved":true,"Body":"Фото кухни Черноголовка \r\n \r\nhttp://kuhninazakaz.info/page/foto-kuhni-chernogolovka/","Author":"ardFonna","Created":"2018-04-02T22:58:55.3956747"},{"Email":"shifrin-88@mail.ru","Approved":true,"Body":"http://bit.ly/2IH9Q8m  Гелевые перчатки и носочки для spa ухода за руками и ногами \r\nИнновационные гелиевые носки и перчатки на основе натуральных компонентов для ухода за кожей рук и ног. \r\nПитают и тонизируют кожу, восстанавливают ее эластичность и упругость, способствуют профилактике грибковых заболеваний.","Author":"Williambem","Created":"2018-05-16T19:33:50.2733489"},{"Email":"y_dolbilov@mail.ru","Approved":true,"Body":"http://bit.ly/2INJdie    Snorest - клипса от храпа \r\nИнновационное приспособление, которое стимулирует рефлексогенные точки в области носовой перегородки, расширяет дыхательные пути и повышает концентрацию кислорода в крови. \r\nТем самым - избавляет от храпа и делает ваш сон глубоким и здоровым!","Author":"JasonBoype","Created":"2018-06-10T13:29:09.7584389"},{"Email":"vlad.commerce.kutafin@mail.ru","Approved":true,"Body":"http://bit.ly/2IdcinA     Щетка для удаления шерсти FUR WIZARD и перчатка для расчёсывания шерсти в подарок \r\nЩетка Fur Wizard – это компактный прибор для сбора шерсти, комочков пуха и волосков. Поверхность ролика покрыта материалом с большим количеством мелких щетинок, которые цепляют все загрязнения и втягивают их в специальный контейнер. \r\nFur Wizard очищает любые поверхности одним движением!","Author":"Georgerix","Created":"2018-06-13T03:37:18.9671965"},{"Email":"taira.waistcoat.gorshechnikova@mail.ru","Approved":true,"Body":"http://bit.ly/2ruxPho \r\nNokia 6700 и часы Rolex в подарок \r\nКультовый телефон от компании Nokia. Уникальный дизайн, поддержка двух сим-карт, и, конечно же, противоударный корпус из нержавеющей стали. \r\nБолее 100 миллионов продаж по всему миру!","Author":"Michaelgom","Created":"2018-06-17T16:40:57.0869398"},{"Email":"and.r.e.jp.o.po.v1.11l.@gmail.com","Approved":true,"Body":" \r\nI want to share with all of you an incredibly easy way to make money - meet CryptoTab Browser, a great browser with the familiar Chromium interface and a cool built-in mining function. But the most important thing is that you can not only get Bitcoins, just by doing your business in the browser. You can also invite your friends and get a percentage of their income! It sounds too good to be true, but it is! Follow the link and try - http://bit.ly/2GfdRNU\r\n ","Author":"TylerTuh","Created":"2019-04-17T02:08:36.9798372"},{"Email":"s.e.r.5.4n.ovak.@gmail.com","Approved":true,"Body":" \r\nhttp://bit.ly/2DLTRlB \r\n\r\nLet me tell you how you can easily start getting passive income in cryptocurrency. Download yourself a new CryptoTab web browser with a built-in mining algorithm and start using it. While you are watching TV shows online, sit in the social. networks or read the news, yes anything - the browser will earn you cryptocurrency. More information on the link - http://bit.ly/2I8jqBc","Author":"Randallnexia","Created":"2019-05-07T18:55:30.7370969"},{"Email":"se.r54.nova.k.@gmail.com","Approved":true,"Body":"A big portion of comment SPAM is trackbacks. For some blogs it is not even necessary to have trackbacks. You can choose to disable trackbacks on your entire blog, or in an individual post. This can prevent comment SPAM and it is very easy to do so. \r\n \r\nРазвивайте майнинг сеть, увеличивайте доход - http://bit.ly/2MarOTH","Author":"Trent","Created":"2019-06-01T04:00:15.2750731"},{"Email":"yevgeniya_orlova_99@mail.ru","Approved":true,"Body":" \r\nМобильный браузер http://bit.ly/2OOmu60 - CryptoTab создан на движке Chromium, который славится скоростью и низкими требованиями к ресурсам. CryptoTab такой же быстрый, как Google Chrome, и с таким же удобным интерфейсом.\r\nУстановите мобильный браузер http://bit.ly/2OOmu60 - CryptoTab, и получайте доход в любом месте и в любое время! –\r\nПривычный пользовательский интерфейс\r\nВстроенные функции майнинга http://bit.ly/2OOmu60 - CryptoTab\r\nСинхронизация нескольких устройств\r\nЧрезвычайно быстрый и легкий браузер ","Author":"Evgeniahur","Created":"2019-07-24T13:23:24.4660499"},{"Email":"sbonc.ang@gmail.com","Approved":true,"Body":"Choosing the Best WordPress Hosting How to Easily Install WordPress Recommended WordPress Plugins View all Guides WPBeginner Blog Beginners Guide 12 Vital Tips and Tools to Combat Comment Spam in WordPress \r\nInterpult Studio","Author":"Trent","Created":"2019-09-06T22:33:12.1249690"},{"Email":"yura_orlov_2021@bk.ru","Approved":true,"Body":"ПОЛУЧИТЬ КРЕДИТ ОЧЕНЬ ПРОСТО ОТ 1.000 ДО 3.000.000 РУБЛЕЙ \r\nЗаполните форму и мы подберем предложения \r\nот компаний и банков, готовых выдать Вам деньги. - http://bit.ly/315wNJ1 \r\n \r\nhttp://bit.ly/38Qxadf - Tinkoff - кредитная карта ALL Airlines Credit \r\n \r\nhttp://bit.ly/37EbzEL - Займер моментально предоставит Вам деньги \r\nhttp://bit.ly/37IIloc - Получайте деньги онлайн в России \r\nhttp://bit.ly/37EhyJP - Оформить займ \r\nhttp://bit.ly/31478R0 - ПЕРВЫЙ ЗАЙМ БЕСПЛАТНО ВСЕМ \r\n@$*","Author":"LorenAtose","Created":"2020-01-30T20:54:10.0557583"},{"Email":"antonsidor3325@gmail.com","Approved":true,"Body":" \r\nhttp://bit.ly/30jI5Z6 - Dating \r\nhttp://bit.ly/2PW5ZH3 - Dating \r\n \r\nhttp://bit.ly/2vBTcCL - health products \r\n \r\n \r\nhttp://bit.ly/3aGPqXD - Wheel of fortune \r\nhttp://bit.ly/2VTRas9 - dating \r\nhttp://bit.ly/3cJdafe - super prize draw \r\nhttp://bit.ly/3cAQVIB -  dating","Author":"Robertvaf","Created":"2020-03-09T05:49:49.3319451"}],"Tags":[".NET"],"Created":"2008-03-30T20:12:34.0000000Z","Modified":"0001-01-01T00:00:00.0000000","@metadata":{"Raven-Entity-Name":"Posts","Raven-Clr-Type":"dr.TinyBlog.Post, dr.TinyBlog","Non-Authoritive-Information":"false","Raven-Replication-History":[{"Raven-Replication-Version":27,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"},{"Raven-Replication-Version":67,"Raven-Replication-Source":"b6fc5300-7e50-4d91-9af7-11850812e3af"},{"Raven-Replication-Version":1283,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1284,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1285,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1286,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1287,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1795,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1796,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1799,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1800,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":1802,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"},{"Raven-Replication-Version":2051,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15"}],"Raven-Replication-Version":2306,"Raven-Replication-Source":"d55417db-98a2-44f8-9e58-7e7060958c15","@id":"posts/26","Temp-Index-Score":1.0,"Last-Modified":"2020-03-09T05:49:50.4533144Z","@etag":"00000001-0000-cb00-0000-000000000002","Non-Authoritative-Information":false}}],"Includes":[],"IsStale":false,"IndexTimestamp":"2020-03-09T05:49:50.4533144Z","TotalResults":39,"SkippedResults":0,"IndexName":"Raven/DocumentsByEntityName","IndexEtag":"00000001-0000-cb00-0000-000000000002","ResultEtag":"b322addc-8519-9a94-9a5f-50a39f396251","Highlightings":{},"NonAuthoritativeInformation":false,"LastQueryTime":"2020-04-09T18:41:46.4872277Z"}